
Button_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006de0  08006de0  00016de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dfc  08006dfc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006dfc  08006dfc  00016dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e04  08006e04  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e04  08006e04  00016e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e08  08006e08  00016e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000808  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00020090  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015689  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036f7  00000000  00000000  00035743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00038e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa0  00000000  00000000  00039f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002368d  00000000  00000000  0003aef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017171  00000000  00000000  0005e57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb530  00000000  00000000  000756ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140c1e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048c4  00000000  00000000  00140c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006dc8 	.word	0x08006dc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006dc8 	.word	0x08006dc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14d      	bne.n	80002a4 <__udivmoddi4+0xac>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d968      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b152      	cbz	r2, 800022a <__udivmoddi4+0x32>
 8000214:	fa01 f302 	lsl.w	r3, r1, r2
 8000218:	f1c2 0120 	rsb	r1, r2, #32
 800021c:	fa20 f101 	lsr.w	r1, r0, r1
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	ea41 0803 	orr.w	r8, r1, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800022e:	0c21      	lsrs	r1, r4, #16
 8000230:	fbb8 fef5 	udiv	lr, r8, r5
 8000234:	fa1f f78c 	uxth.w	r7, ip
 8000238:	fb05 831e 	mls	r3, r5, lr, r8
 800023c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000240:	fb0e f107 	mul.w	r1, lr, r7
 8000244:	4299      	cmp	r1, r3
 8000246:	d90b      	bls.n	8000260 <__udivmoddi4+0x68>
 8000248:	eb1c 0303 	adds.w	r3, ip, r3
 800024c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000250:	f080 811e 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000254:	4299      	cmp	r1, r3
 8000256:	f240 811b 	bls.w	8000490 <__udivmoddi4+0x298>
 800025a:	f1ae 0e02 	sub.w	lr, lr, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f5 	udiv	r0, r3, r5
 8000268:	fb05 3310 	mls	r3, r5, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x96>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 8108 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8105 	bls.w	8000494 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000294:	2100      	movs	r1, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa8>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d908      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a8:	2e00      	cmp	r6, #0
 80002aa:	f000 80ee 	beq.w	800048a <__udivmoddi4+0x292>
 80002ae:	2100      	movs	r1, #0
 80002b0:	e9c6 0500 	strd	r0, r5, [r6]
 80002b4:	4608      	mov	r0, r1
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	42ab      	cmp	r3, r5
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb65 0303 	sbc.w	r3, r5, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e2      	beq.n	80002a0 <__udivmoddi4+0xa8>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7df      	b.n	80002a0 <__udivmoddi4+0xa8>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8091 	bne.w	8000410 <__udivmoddi4+0x218>
 80002ee:	eba1 050c 	sub.w	r5, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000300:	fb07 5013 	mls	r0, r7, r3, r5
 8000304:	0c25      	lsrs	r5, r4, #16
 8000306:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	42a8      	cmp	r0, r5
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0505 	adds.w	r5, ip, r5
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	42a8      	cmp	r0, r5
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a2d      	subs	r5, r5, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb5 f0f7 	udiv	r0, r5, r7
 800032c:	fb07 5510 	mls	r5, r7, r0, r5
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 35ff 	add.w	r5, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4628      	mov	r0, r5
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79e      	b.n	8000296 <__udivmoddi4+0x9e>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa05 f301 	lsl.w	r3, r5, r1
 800036e:	431c      	orrs	r4, r3
 8000370:	40fd      	lsrs	r5, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f301 	lsl.w	r3, r0, r1
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 5518 	mls	r5, r9, r8, r5
 8000388:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	42a8      	cmp	r0, r5
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0505 	adds.w	r5, ip, r5
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	42a8      	cmp	r0, r5
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4465      	add	r5, ip
 80003b0:	1a2d      	subs	r5, r5, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003b8:	fb09 5510 	mls	r5, r9, r0, r5
 80003bc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45ae      	cmp	lr, r5
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0505 	adds.w	r5, ip, r5
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	45ae      	cmp	lr, r5
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4465      	add	r5, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba5 050e 	sub.w	r5, r5, lr
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15e      	cbz	r6, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb65 050e 	sbc.w	r5, r5, lr
 80003fa:	fa05 f707 	lsl.w	r7, r5, r7
 80003fe:	fa22 f301 	lsr.w	r3, r2, r1
 8000402:	40cd      	lsrs	r5, r1
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c6 7500 	strd	r7, r5, [r6]
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f103 	lsr.w	r1, r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa25 f303 	lsr.w	r3, r5, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000430:	fb07 3011 	mls	r0, r7, r1, r3
 8000434:	0c2b      	lsrs	r3, r5, #16
 8000436:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800043a:	fb01 f00e 	mul.w	r0, r1, lr
 800043e:	4298      	cmp	r0, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f101 38ff 	add.w	r8, r1, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	4298      	cmp	r0, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3902      	subs	r1, #2
 8000456:	4463      	add	r3, ip
 8000458:	1a1b      	subs	r3, r3, r0
 800045a:	b2ad      	uxth	r5, r5
 800045c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000460:	fb07 3310 	mls	r3, r7, r0, r3
 8000464:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000468:	fb00 f30e 	mul.w	r3, r0, lr
 800046c:	42ab      	cmp	r3, r5
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0505 	adds.w	r5, ip, r5
 8000474:	f100 38ff 	add.w	r8, r0, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	42ab      	cmp	r3, r5
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3802      	subs	r0, #2
 8000480:	4465      	add	r5, ip
 8000482:	1aed      	subs	r5, r5, r3
 8000484:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e707      	b.n	80002a0 <__udivmoddi4+0xa8>
 8000490:	4686      	mov	lr, r0
 8000492:	e6e5      	b.n	8000260 <__udivmoddi4+0x68>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fa      	b.n	800028e <__udivmoddi4+0x96>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4641      	mov	r1, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4465      	add	r5, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4608      	mov	r0, r1
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  HAL_Init();
 80004d2:	f000 fd0f 	bl	8000ef4 <HAL_Init>
  SystemClock_Config();
 80004d6:	f000 f93d 	bl	8000754 <SystemClock_Config>

  MX_GPIO_Init();
 80004da:	f000 fa39 	bl	8000950 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004de:	f000 f9a3 	bl	8000828 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e2:	f000 f9cf 	bl	8000884 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e6:	f000 f9fd 	bl	80008e4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004ea:	f006 f881 	bl	80065f0 <MX_USB_HOST_Init>

  uint8_t count = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	71fb      	strb	r3, [r7, #7]
  uint8_t count1 = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	71bb      	strb	r3, [r7, #6]
  uint8_t button_val = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	717b      	strb	r3, [r7, #5]
  while (1)
  {
	button_val = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80004fa:	2101      	movs	r1, #1
 80004fc:	4893      	ldr	r0, [pc, #588]	; (800074c <main+0x280>)
 80004fe:	f001 f833 	bl	8001568 <HAL_GPIO_ReadPin>
 8000502:	4603      	mov	r3, r0
 8000504:	717b      	strb	r3, [r7, #5]
	  if(button_val==1)
 8000506:	797b      	ldrb	r3, [r7, #5]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d108      	bne.n	800051e <main+0x52>
	  {
		  HAL_Delay(400);
 800050c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000510:	f000 fd5e 	bl	8000fd0 <HAL_Delay>
		  count++;
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	3301      	adds	r3, #1
 8000518:	71fb      	strb	r3, [r7, #7]
		  button_val =0;
 800051a:	2300      	movs	r3, #0
 800051c:	717b      	strb	r3, [r7, #5]
	  }
	if(count==1)
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d113      	bne.n	800054c <main+0x80>
	{
		while(button_val==1 && count == 1)
 8000524:	e002      	b.n	800052c <main+0x60>
					{
						count1++;
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	3301      	adds	r3, #1
 800052a:	71bb      	strb	r3, [r7, #6]
		while(button_val==1 && count == 1)
 800052c:	797b      	ldrb	r3, [r7, #5]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d102      	bne.n	8000538 <main+0x6c>
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d0f6      	beq.n	8000526 <main+0x5a>
						if(count1==2000)
						{
							break;
						}
					}
					if(count==1)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d1dd      	bne.n	80004fa <main+0x2e>
					{
		          HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,SET);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000544:	4882      	ldr	r0, [pc, #520]	; (8000750 <main+0x284>)
 8000546:	f001 f826 	bl	8001596 <HAL_GPIO_WritePin>
 800054a:	e7d6      	b.n	80004fa <main+0x2e>
					}
	}
	else if(count>1 && count<5)
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b01      	cmp	r3, #1
 8000550:	f240 80c8 	bls.w	80006e4 <main+0x218>
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b04      	cmp	r3, #4
 8000558:	f200 80c4 	bhi.w	80006e4 <main+0x218>
	  {
	if(count==2)
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d140      	bne.n	80005e4 <main+0x118>
	  {

		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000568:	4879      	ldr	r0, [pc, #484]	; (8000750 <main+0x284>)
 800056a:	f001 f814 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000574:	4876      	ldr	r0, [pc, #472]	; (8000750 <main+0x284>)
 8000576:	f001 f80e 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 800057a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057e:	f000 fd27 	bl	8000fd0 <HAL_Delay>
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000588:	4871      	ldr	r0, [pc, #452]	; (8000750 <main+0x284>)
 800058a:	f001 f804 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000594:	486e      	ldr	r0, [pc, #440]	; (8000750 <main+0x284>)
 8000596:	f000 fffe 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 800059a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059e:	f000 fd17 	bl	8000fd0 <HAL_Delay>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a8:	4869      	ldr	r0, [pc, #420]	; (8000750 <main+0x284>)
 80005aa:	f000 fff4 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port,LED_ORANGE_Pin, SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b4:	4866      	ldr	r0, [pc, #408]	; (8000750 <main+0x284>)
 80005b6:	f000 ffee 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80005ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005be:	f000 fd07 	bl	8000fd0 <HAL_Delay>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port,LED_ORANGE_Pin, RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c8:	4861      	ldr	r0, [pc, #388]	; (8000750 <main+0x284>)
 80005ca:	f000 ffe4 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d4:	485e      	ldr	r0, [pc, #376]	; (8000750 <main+0x284>)
 80005d6:	f000 ffde 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80005da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005de:	f000 fcf7 	bl	8000fd0 <HAL_Delay>
	if(count==2)
 80005e2:	e0b0      	b.n	8000746 <main+0x27a>
	  }
	  else if(count == 3)
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	d13c      	bne.n	8000664 <main+0x198>
	  {
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f0:	4857      	ldr	r0, [pc, #348]	; (8000750 <main+0x284>)
 80005f2:	f000 ffd0 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fc:	4854      	ldr	r0, [pc, #336]	; (8000750 <main+0x284>)
 80005fe:	f000 ffca 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 8000602:	20fa      	movs	r0, #250	; 0xfa
 8000604:	f000 fce4 	bl	8000fd0 <HAL_Delay>
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800060e:	4850      	ldr	r0, [pc, #320]	; (8000750 <main+0x284>)
 8000610:	f000 ffc1 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061a:	484d      	ldr	r0, [pc, #308]	; (8000750 <main+0x284>)
 800061c:	f000 ffbb 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 8000620:	20fa      	movs	r0, #250	; 0xfa
 8000622:	f000 fcd5 	bl	8000fd0 <HAL_Delay>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062c:	4848      	ldr	r0, [pc, #288]	; (8000750 <main+0x284>)
 800062e:	f000 ffb2 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port,LED_ORANGE_Pin, SET);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000638:	4845      	ldr	r0, [pc, #276]	; (8000750 <main+0x284>)
 800063a:	f000 ffac 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 800063e:	20fa      	movs	r0, #250	; 0xfa
 8000640:	f000 fcc6 	bl	8000fd0 <HAL_Delay>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port,LED_ORANGE_Pin, RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064a:	4841      	ldr	r0, [pc, #260]	; (8000750 <main+0x284>)
 800064c:	f000 ffa3 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000656:	483e      	ldr	r0, [pc, #248]	; (8000750 <main+0x284>)
 8000658:	f000 ff9d 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 800065c:	20fa      	movs	r0, #250	; 0xfa
 800065e:	f000 fcb7 	bl	8000fd0 <HAL_Delay>
	if(count==2)
 8000662:	e070      	b.n	8000746 <main+0x27a>
	  }
	  else if(count == 4)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b04      	cmp	r3, #4
 8000668:	d16d      	bne.n	8000746 <main+0x27a>
	  {
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000670:	4837      	ldr	r0, [pc, #220]	; (8000750 <main+0x284>)
 8000672:	f000 ff90 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8000676:	2201      	movs	r2, #1
 8000678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067c:	4834      	ldr	r0, [pc, #208]	; (8000750 <main+0x284>)
 800067e:	f000 ff8a 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_Delay(125);
 8000682:	207d      	movs	r0, #125	; 0x7d
 8000684:	f000 fca4 	bl	8000fd0 <HAL_Delay>
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068e:	4830      	ldr	r0, [pc, #192]	; (8000750 <main+0x284>)
 8000690:	f000 ff81 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069a:	482d      	ldr	r0, [pc, #180]	; (8000750 <main+0x284>)
 800069c:	f000 ff7b 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_Delay(125);
 80006a0:	207d      	movs	r0, #125	; 0x7d
 80006a2:	f000 fc95 	bl	8000fd0 <HAL_Delay>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ac:	4828      	ldr	r0, [pc, #160]	; (8000750 <main+0x284>)
 80006ae:	f000 ff72 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port,LED_ORANGE_Pin, SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b8:	4825      	ldr	r0, [pc, #148]	; (8000750 <main+0x284>)
 80006ba:	f000 ff6c 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_Delay(125);
 80006be:	207d      	movs	r0, #125	; 0x7d
 80006c0:	f000 fc86 	bl	8000fd0 <HAL_Delay>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port,LED_ORANGE_Pin, RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ca:	4821      	ldr	r0, [pc, #132]	; (8000750 <main+0x284>)
 80006cc:	f000 ff63 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d6:	481e      	ldr	r0, [pc, #120]	; (8000750 <main+0x284>)
 80006d8:	f000 ff5d 	bl	8001596 <HAL_GPIO_WritePin>
		  HAL_Delay(125);
 80006dc:	207d      	movs	r0, #125	; 0x7d
 80006de:	f000 fc77 	bl	8000fd0 <HAL_Delay>
	if(count==2)
 80006e2:	e030      	b.n	8000746 <main+0x27a>
	  }
	  }
	  else if(count == 5)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b05      	cmp	r3, #5
 80006e8:	d112      	bne.n	8000710 <main+0x244>
	  {
			  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port,LED_ORANGE_Pin,RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f0:	4817      	ldr	r0, [pc, #92]	; (8000750 <main+0x284>)
 80006f2:	f000 ff50 	bl	8001596 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fc:	4814      	ldr	r0, [pc, #80]	; (8000750 <main+0x284>)
 80006fe:	f000 ff4a 	bl	8001596 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000708:	4811      	ldr	r0, [pc, #68]	; (8000750 <main+0x284>)
 800070a:	f000 ff44 	bl	8001596 <HAL_GPIO_WritePin>
 800070e:	e6f4      	b.n	80004fa <main+0x2e>
	  }
	  else if(count==6)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	2b06      	cmp	r3, #6
 8000714:	f47f aef1 	bne.w	80004fa <main+0x2e>
	  {
			while(button_val==1 && count == 6)
 8000718:	e002      	b.n	8000720 <main+0x254>
			{
				count1++;
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	3301      	adds	r3, #1
 800071e:	71bb      	strb	r3, [r7, #6]
			while(button_val==1 && count == 6)
 8000720:	797b      	ldrb	r3, [r7, #5]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d102      	bne.n	800072c <main+0x260>
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	2b06      	cmp	r3, #6
 800072a:	d0f6      	beq.n	800071a <main+0x24e>
				if(count1==2000)
				{
					break;
				}
			}
			if(count==6)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b06      	cmp	r3, #6
 8000730:	f47f aee3 	bne.w	80004fa <main+0x2e>
			{
          HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <main+0x284>)
 800073c:	f000 ff2b 	bl	8001596 <HAL_GPIO_WritePin>
		  count=0;
 8000740:	2300      	movs	r3, #0
 8000742:	71fb      	strb	r3, [r7, #7]
 8000744:	e6d9      	b.n	80004fa <main+0x2e>
	if(count==2)
 8000746:	bf00      	nop
	button_val = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8000748:	e6d7      	b.n	80004fa <main+0x2e>
 800074a:	bf00      	nop
 800074c:	40020000 	.word	0x40020000
 8000750:	40020c00 	.word	0x40020c00

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	; 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f006 fa2c 	bl	8006bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <SystemClock_Config+0xcc>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a27      	ldr	r2, [pc, #156]	; (8000820 <SystemClock_Config+0xcc>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b25      	ldr	r3, [pc, #148]	; (8000820 <SystemClock_Config+0xcc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <SystemClock_Config+0xd0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a21      	ldr	r2, [pc, #132]	; (8000824 <SystemClock_Config+0xd0>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <SystemClock_Config+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c4:	2308      	movs	r3, #8
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d2:	2307      	movs	r3, #7
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 f8be 	bl	800395c <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007e6:	f000 f9af 	bl	8000b48 <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2302      	movs	r3, #2
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000800:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	2105      	movs	r1, #5
 8000808:	4618      	mov	r0, r3
 800080a:	f003 fb1f 	bl	8003e4c <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000814:	f000 f998 	bl	8000b48 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3750      	adds	r7, #80	; 0x50
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2C1_Init+0x50>)
 800082e:	4a13      	ldr	r2, [pc, #76]	; (800087c <MX_I2C1_Init+0x54>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_I2C1_Init+0x50>)
 8000834:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_I2C1_Init+0x58>)
 8000836:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_I2C1_Init+0x50>)
 8000846:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800084a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_I2C1_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_I2C1_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_I2C1_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_I2C1_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_I2C1_Init+0x50>)
 8000866:	f002 fa9b 	bl	8002da0 <HAL_I2C_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000870:	f000 f96a 	bl	8000b48 <Error_Handler>
  }

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000ac 	.word	0x200000ac
 800087c:	40005400 	.word	0x40005400
 8000880:	000186a0 	.word	0x000186a0

08000884 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  hi2s3.Instance = SPI3;
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_I2S3_Init+0x54>)
 800088a:	4a14      	ldr	r2, [pc, #80]	; (80008dc <MX_I2S3_Init+0x58>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_I2S3_Init+0x54>)
 8000890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000894:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_I2S3_Init+0x54>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_I2S3_Init+0x54>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_I2S3_Init+0x54>)
 80008a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_I2S3_Init+0x54>)
 80008ac:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <MX_I2S3_Init+0x5c>)
 80008ae:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_I2S3_Init+0x54>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_I2S3_Init+0x54>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_I2S3_Init+0x54>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_I2S3_Init+0x54>)
 80008c4:	f002 fbb0 	bl	8003028 <HAL_I2S_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ce:	f000 f93b 	bl	8000b48 <Error_Handler>
  }

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000100 	.word	0x20000100
 80008dc:	40003c00 	.word	0x40003c00
 80008e0:	00017700 	.word	0x00017700

080008e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_SPI1_Init+0x64>)
 80008ea:	4a18      	ldr	r2, [pc, #96]	; (800094c <MX_SPI1_Init+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_SPI1_Init+0x64>)
 80008f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_SPI1_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_SPI1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_SPI1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_SPI1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_SPI1_Init+0x64>)
 8000910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000914:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_SPI1_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_SPI1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_SPI1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_SPI1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_SPI1_Init+0x64>)
 8000930:	220a      	movs	r2, #10
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_SPI1_Init+0x64>)
 8000936:	f003 fdd7 	bl	80044e8 <HAL_SPI_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000940:	f000 f902 	bl	8000b48 <Error_Handler>
  }

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000148 	.word	0x20000148
 800094c:	40013000 	.word	0x40013000

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	; 0x30
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	4b71      	ldr	r3, [pc, #452]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a70      	ldr	r2, [pc, #448]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 8000970:	f043 0310 	orr.w	r3, r3, #16
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b6e      	ldr	r3, [pc, #440]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	4b6a      	ldr	r3, [pc, #424]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a69      	ldr	r2, [pc, #420]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b67      	ldr	r3, [pc, #412]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b63      	ldr	r3, [pc, #396]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a62      	ldr	r2, [pc, #392]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b60      	ldr	r3, [pc, #384]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b5c      	ldr	r3, [pc, #368]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a5b      	ldr	r2, [pc, #364]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b59      	ldr	r3, [pc, #356]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b55      	ldr	r3, [pc, #340]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a54      	ldr	r2, [pc, #336]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b52      	ldr	r3, [pc, #328]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b4e      	ldr	r3, [pc, #312]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a4d      	ldr	r2, [pc, #308]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b4b      	ldr	r3, [pc, #300]	; (8000b30 <MX_GPIO_Init+0x1e0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2108      	movs	r1, #8
 8000a12:	4848      	ldr	r0, [pc, #288]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 8000a14:	f000 fdbf 	bl	8001596 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4846      	ldr	r0, [pc, #280]	; (8000b38 <MX_GPIO_Init+0x1e8>)
 8000a1e:	f000 fdba 	bl	8001596 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000a22:	2200      	movs	r2, #0
 8000a24:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a28:	4844      	ldr	r0, [pc, #272]	; (8000b3c <MX_GPIO_Init+0x1ec>)
 8000a2a:	f000 fdb4 	bl	8001596 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	483b      	ldr	r0, [pc, #236]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 8000a46:	f000 fbf5 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4835      	ldr	r0, [pc, #212]	; (8000b38 <MX_GPIO_Init+0x1e8>)
 8000a62:	f000 fbe7 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a66:	2308      	movs	r3, #8
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a76:	2305      	movs	r3, #5
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	482d      	ldr	r0, [pc, #180]	; (8000b38 <MX_GPIO_Init+0x1e8>)
 8000a82:	f000 fbd7 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	4829      	ldr	r0, [pc, #164]	; (8000b40 <MX_GPIO_Init+0x1f0>)
 8000a9a:	f000 fbcb 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4824      	ldr	r0, [pc, #144]	; (8000b44 <MX_GPIO_Init+0x1f4>)
 8000ab2:	f000 fbbf 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ac8:	2305      	movs	r3, #5
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481c      	ldr	r0, [pc, #112]	; (8000b44 <MX_GPIO_Init+0x1f4>)
 8000ad4:	f000 fbae 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000ad8:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000adc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4812      	ldr	r0, [pc, #72]	; (8000b3c <MX_GPIO_Init+0x1ec>)
 8000af2:	f000 fb9f 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000af6:	2320      	movs	r3, #32
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_GPIO_Init+0x1ec>)
 8000b0a:	f000 fb93 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b12:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 8000b24:	f000 fb86 	bl	8001234 <HAL_GPIO_Init>

}
 8000b28:	bf00      	nop
 8000b2a:	3730      	adds	r7, #48	; 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020400 	.word	0x40020400

08000b48 <Error_Handler>:
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b92:	2007      	movs	r0, #7
 8000b94:	f000 fb0c 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_I2C_MspInit+0x84>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d12c      	bne.n	8000c20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <HAL_I2C_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_I2C_MspInit+0x88>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_I2C_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000be2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be8:	2312      	movs	r3, #18
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480c      	ldr	r0, [pc, #48]	; (8000c30 <HAL_I2C_MspInit+0x8c>)
 8000c00:	f000 fb18 	bl	8001234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_I2C_MspInit+0x88>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_I2C_MspInit+0x88>)
 8000c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c12:	6413      	str	r3, [r2, #64]	; 0x40
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_I2C_MspInit+0x88>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020400 	.word	0x40020400

08000c34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08e      	sub	sp, #56	; 0x38
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a31      	ldr	r2, [pc, #196]	; (8000d24 <HAL_I2S_MspInit+0xf0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d15a      	bne.n	8000d1a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c64:	2301      	movs	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c68:	23c0      	movs	r3, #192	; 0xc0
 8000c6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 faf9 	bl	800426c <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c80:	f7ff ff62 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a26      	ldr	r2, [pc, #152]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ce8:	2306      	movs	r3, #6
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <HAL_I2S_MspInit+0xf8>)
 8000cf4:	f000 fa9e 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cf8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d0a:	2306      	movs	r3, #6
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <HAL_I2S_MspInit+0xfc>)
 8000d16:	f000 fa8d 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3738      	adds	r7, #56	; 0x38
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40003c00 	.word	0x40003c00
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020800 	.word	0x40020800

08000d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12b      	bne.n	8000dae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d8e:	23e0      	movs	r3, #224	; 0xe0
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_SPI_MspInit+0x8c>)
 8000daa:	f000 fa43 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40013000 	.word	0x40013000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0a:	f000 f8c5 	bl	8000f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <OTG_FS_IRQHandler+0x10>)
 8000e1a:	f000 fe3f 	bl	8001a9c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000584 	.word	0x20000584

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f005 fe78 	bl	8006b4c <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20020000 	.word	0x20020000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	200001a0 	.word	0x200001a0
 8000e90:	20000898 	.word	0x20000898

08000e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea6:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ebc:	4c0b      	ldr	r4, [pc, #44]	; (8000eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eca:	f7ff ffe3 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ece:	f005 fe43 	bl	8006b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fafb 	bl	80004cc <main>
  bx  lr    
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ee4:	08006e0c 	.word	0x08006e0c
  ldr r2, =_sbss
 8000ee8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000eec:	20000898 	.word	0x20000898

08000ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_Init+0x40>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_Init+0x40>)
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x40>)
 8000f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f947 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 f808 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff fe14 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f95f 	bl	800121a <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f000 f927 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000004 	.word	0x20000004

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_IncTick+0x1c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_IncTick+0x20>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <HAL_IncTick+0x20>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	200001a4 	.word	0x200001a4

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b02      	ldr	r3, [pc, #8]	; (8000fcc <HAL_GetTick+0x10>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	200001a4 	.word	0x200001a4

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff fff0 	bl	8000fbc <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_Delay+0x44>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffe0 	bl	8000fbc <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4906      	ldr	r1, [pc, #24]	; (80010b0 <__NVIC_EnableIRQ+0x34>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	; (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff90 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff2d 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff42 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff90 	bl	8001108 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5f 	bl	80010b4 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff35 	bl	800107c <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffa2 	bl	800116c <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	e16b      	b.n	8001528 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001250:	2201      	movs	r2, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	429a      	cmp	r2, r3
 800126a:	f040 815a 	bne.w	8001522 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d005      	beq.n	8001286 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001282:	2b02      	cmp	r3, #2
 8001284:	d130      	bne.n	80012e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012bc:	2201      	movs	r2, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 0201 	and.w	r2, r3, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d017      	beq.n	8001324 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d123      	bne.n	8001378 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	08da      	lsrs	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3208      	adds	r2, #8
 8001338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	220f      	movs	r2, #15
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	08da      	lsrs	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3208      	adds	r2, #8
 8001372:	69b9      	ldr	r1, [r7, #24]
 8001374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0203 	and.w	r2, r3, #3
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80b4 	beq.w	8001522 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b5f      	ldr	r3, [pc, #380]	; (800153c <HAL_GPIO_Init+0x308>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	4a5e      	ldr	r2, [pc, #376]	; (800153c <HAL_GPIO_Init+0x308>)
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ca:	4b5c      	ldr	r3, [pc, #368]	; (800153c <HAL_GPIO_Init+0x308>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d6:	4a5a      	ldr	r2, [pc, #360]	; (8001540 <HAL_GPIO_Init+0x30c>)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a51      	ldr	r2, [pc, #324]	; (8001544 <HAL_GPIO_Init+0x310>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d02b      	beq.n	800145a <HAL_GPIO_Init+0x226>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a50      	ldr	r2, [pc, #320]	; (8001548 <HAL_GPIO_Init+0x314>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d025      	beq.n	8001456 <HAL_GPIO_Init+0x222>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4f      	ldr	r2, [pc, #316]	; (800154c <HAL_GPIO_Init+0x318>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d01f      	beq.n	8001452 <HAL_GPIO_Init+0x21e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4e      	ldr	r2, [pc, #312]	; (8001550 <HAL_GPIO_Init+0x31c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d019      	beq.n	800144e <HAL_GPIO_Init+0x21a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4d      	ldr	r2, [pc, #308]	; (8001554 <HAL_GPIO_Init+0x320>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0x216>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4c      	ldr	r2, [pc, #304]	; (8001558 <HAL_GPIO_Init+0x324>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00d      	beq.n	8001446 <HAL_GPIO_Init+0x212>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4b      	ldr	r2, [pc, #300]	; (800155c <HAL_GPIO_Init+0x328>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0x20e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <HAL_GPIO_Init+0x32c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_GPIO_Init+0x20a>
 800143a:	2307      	movs	r3, #7
 800143c:	e00e      	b.n	800145c <HAL_GPIO_Init+0x228>
 800143e:	2308      	movs	r3, #8
 8001440:	e00c      	b.n	800145c <HAL_GPIO_Init+0x228>
 8001442:	2306      	movs	r3, #6
 8001444:	e00a      	b.n	800145c <HAL_GPIO_Init+0x228>
 8001446:	2305      	movs	r3, #5
 8001448:	e008      	b.n	800145c <HAL_GPIO_Init+0x228>
 800144a:	2304      	movs	r3, #4
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x228>
 800144e:	2303      	movs	r3, #3
 8001450:	e004      	b.n	800145c <HAL_GPIO_Init+0x228>
 8001452:	2302      	movs	r3, #2
 8001454:	e002      	b.n	800145c <HAL_GPIO_Init+0x228>
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <HAL_GPIO_Init+0x228>
 800145a:	2300      	movs	r3, #0
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	f002 0203 	and.w	r2, r2, #3
 8001462:	0092      	lsls	r2, r2, #2
 8001464:	4093      	lsls	r3, r2
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800146c:	4934      	ldr	r1, [pc, #208]	; (8001540 <HAL_GPIO_Init+0x30c>)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	3302      	adds	r3, #2
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800147a:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <HAL_GPIO_Init+0x330>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800149e:	4a31      	ldr	r2, [pc, #196]	; (8001564 <HAL_GPIO_Init+0x330>)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a4:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <HAL_GPIO_Init+0x330>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c8:	4a26      	ldr	r2, [pc, #152]	; (8001564 <HAL_GPIO_Init+0x330>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ce:	4b25      	ldr	r3, [pc, #148]	; (8001564 <HAL_GPIO_Init+0x330>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014f2:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <HAL_GPIO_Init+0x330>)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <HAL_GPIO_Init+0x330>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800151c:	4a11      	ldr	r2, [pc, #68]	; (8001564 <HAL_GPIO_Init+0x330>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3301      	adds	r3, #1
 8001526:	61fb      	str	r3, [r7, #28]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	2b0f      	cmp	r3, #15
 800152c:	f67f ae90 	bls.w	8001250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40023800 	.word	0x40023800
 8001540:	40013800 	.word	0x40013800
 8001544:	40020000 	.word	0x40020000
 8001548:	40020400 	.word	0x40020400
 800154c:	40020800 	.word	0x40020800
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40021000 	.word	0x40021000
 8001558:	40021400 	.word	0x40021400
 800155c:	40021800 	.word	0x40021800
 8001560:	40021c00 	.word	0x40021c00
 8001564:	40013c00 	.word	0x40013c00

08001568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e001      	b.n	800158a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	460b      	mov	r3, r1
 80015a0:	807b      	strh	r3, [r7, #2]
 80015a2:	4613      	mov	r3, r2
 80015a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a6:	787b      	ldrb	r3, [r7, #1]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ac:	887a      	ldrh	r2, [r7, #2]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015b2:	e003      	b.n	80015bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015b4:	887b      	ldrh	r3, [r7, #2]
 80015b6:	041a      	lsls	r2, r3, #16
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c8:	b08f      	sub	sp, #60	; 0x3c
 80015ca:	af0a      	add	r7, sp, #40	; 0x28
 80015cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e054      	b.n	8001682 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d106      	bne.n	80015f8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f005 f84e 	bl	8006694 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2203      	movs	r2, #3
 80015fc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f003 f860 	bl	80046dc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	687e      	ldr	r6, [r7, #4]
 8001624:	466d      	mov	r5, sp
 8001626:	f106 0410 	add.w	r4, r6, #16
 800162a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001632:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001636:	e885 0003 	stmia.w	r5, {r0, r1}
 800163a:	1d33      	adds	r3, r6, #4
 800163c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163e:	6838      	ldr	r0, [r7, #0]
 8001640:	f002 ffdb 	bl	80045fa <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2101      	movs	r1, #1
 800164a:	4618      	mov	r0, r3
 800164c:	f003 f856 	bl	80046fc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	687e      	ldr	r6, [r7, #4]
 8001658:	466d      	mov	r5, sp
 800165a:	f106 0410 	add.w	r4, r6, #16
 800165e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001666:	e894 0003 	ldmia.w	r4, {r0, r1}
 800166a:	e885 0003 	stmia.w	r5, {r0, r1}
 800166e:	1d33      	adds	r3, r6, #4
 8001670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001672:	6838      	ldr	r0, [r7, #0]
 8001674:	f003 f9d8 	bl	8004a28 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800168a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800168a:	b590      	push	{r4, r7, lr}
 800168c:	b089      	sub	sp, #36	; 0x24
 800168e:	af04      	add	r7, sp, #16
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	4608      	mov	r0, r1
 8001694:	4611      	mov	r1, r2
 8001696:	461a      	mov	r2, r3
 8001698:	4603      	mov	r3, r0
 800169a:	70fb      	strb	r3, [r7, #3]
 800169c:	460b      	mov	r3, r1
 800169e:	70bb      	strb	r3, [r7, #2]
 80016a0:	4613      	mov	r3, r2
 80016a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_HCD_HC_Init+0x28>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e076      	b.n	80017a0 <HAL_HCD_HC_Init+0x116>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	212c      	movs	r1, #44	; 0x2c
 80016c0:	fb01 f303 	mul.w	r3, r1, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	333d      	adds	r3, #61	; 0x3d
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	212c      	movs	r1, #44	; 0x2c
 80016d2:	fb01 f303 	mul.w	r3, r1, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	3338      	adds	r3, #56	; 0x38
 80016da:	787a      	ldrb	r2, [r7, #1]
 80016dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	212c      	movs	r1, #44	; 0x2c
 80016e4:	fb01 f303 	mul.w	r3, r1, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	3340      	adds	r3, #64	; 0x40
 80016ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016ee:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	212c      	movs	r1, #44	; 0x2c
 80016f6:	fb01 f303 	mul.w	r3, r1, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	3339      	adds	r3, #57	; 0x39
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	212c      	movs	r1, #44	; 0x2c
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	4413      	add	r3, r2
 800170e:	333f      	adds	r3, #63	; 0x3f
 8001710:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001714:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	78ba      	ldrb	r2, [r7, #2]
 800171a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800171e:	b2d0      	uxtb	r0, r2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	212c      	movs	r1, #44	; 0x2c
 8001724:	fb01 f303 	mul.w	r3, r1, r3
 8001728:	4413      	add	r3, r2
 800172a:	333a      	adds	r3, #58	; 0x3a
 800172c:	4602      	mov	r2, r0
 800172e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001730:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001734:	2b00      	cmp	r3, #0
 8001736:	da09      	bge.n	800174c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	212c      	movs	r1, #44	; 0x2c
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	4413      	add	r3, r2
 8001744:	333b      	adds	r3, #59	; 0x3b
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
 800174a:	e008      	b.n	800175e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	212c      	movs	r1, #44	; 0x2c
 8001752:	fb01 f303 	mul.w	r3, r1, r3
 8001756:	4413      	add	r3, r2
 8001758:	333b      	adds	r3, #59	; 0x3b
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	212c      	movs	r1, #44	; 0x2c
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	4413      	add	r3, r2
 800176a:	333c      	adds	r3, #60	; 0x3c
 800176c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001770:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	787c      	ldrb	r4, [r7, #1]
 8001778:	78ba      	ldrb	r2, [r7, #2]
 800177a:	78f9      	ldrb	r1, [r7, #3]
 800177c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	4623      	mov	r3, r4
 800178e:	f003 faa3 	bl	8004cd8 <USB_HC_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}

080017a8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_HCD_HC_Halt+0x1e>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e00f      	b.n	80017e6 <HAL_HCD_HC_Halt+0x3e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 fcf2 	bl	80051c0 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	4608      	mov	r0, r1
 80017fa:	4611      	mov	r1, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4603      	mov	r3, r0
 8001800:	70fb      	strb	r3, [r7, #3]
 8001802:	460b      	mov	r3, r1
 8001804:	70bb      	strb	r3, [r7, #2]
 8001806:	4613      	mov	r3, r2
 8001808:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	212c      	movs	r1, #44	; 0x2c
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	4413      	add	r3, r2
 8001816:	333b      	adds	r3, #59	; 0x3b
 8001818:	78ba      	ldrb	r2, [r7, #2]
 800181a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	212c      	movs	r1, #44	; 0x2c
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	333f      	adds	r3, #63	; 0x3f
 800182a:	787a      	ldrb	r2, [r7, #1]
 800182c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800182e:	7c3b      	ldrb	r3, [r7, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d112      	bne.n	800185a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	212c      	movs	r1, #44	; 0x2c
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	4413      	add	r3, r2
 8001840:	3342      	adds	r3, #66	; 0x42
 8001842:	2203      	movs	r2, #3
 8001844:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	212c      	movs	r1, #44	; 0x2c
 800184c:	fb01 f303 	mul.w	r3, r1, r3
 8001850:	4413      	add	r3, r2
 8001852:	333d      	adds	r3, #61	; 0x3d
 8001854:	7f3a      	ldrb	r2, [r7, #28]
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	e008      	b.n	800186c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3342      	adds	r3, #66	; 0x42
 8001868:	2202      	movs	r2, #2
 800186a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b03      	cmp	r3, #3
 8001870:	f200 80c6 	bhi.w	8001a00 <HAL_HCD_HC_SubmitRequest+0x210>
 8001874:	a201      	add	r2, pc, #4	; (adr r2, 800187c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187a:	bf00      	nop
 800187c:	0800188d 	.word	0x0800188d
 8001880:	080019ed 	.word	0x080019ed
 8001884:	080018f1 	.word	0x080018f1
 8001888:	0800196f 	.word	0x0800196f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800188c:	7c3b      	ldrb	r3, [r7, #16]
 800188e:	2b01      	cmp	r3, #1
 8001890:	f040 80b8 	bne.w	8001a04 <HAL_HCD_HC_SubmitRequest+0x214>
 8001894:	78bb      	ldrb	r3, [r7, #2]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f040 80b4 	bne.w	8001a04 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800189c:	8b3b      	ldrh	r3, [r7, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d108      	bne.n	80018b4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	212c      	movs	r1, #44	; 0x2c
 80018a8:	fb01 f303 	mul.w	r3, r1, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	3355      	adds	r3, #85	; 0x55
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	212c      	movs	r1, #44	; 0x2c
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	3355      	adds	r3, #85	; 0x55
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d109      	bne.n	80018dc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	212c      	movs	r1, #44	; 0x2c
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	3342      	adds	r3, #66	; 0x42
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018da:	e093      	b.n	8001a04 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3342      	adds	r3, #66	; 0x42
 80018ea:	2202      	movs	r2, #2
 80018ec:	701a      	strb	r2, [r3, #0]
      break;
 80018ee:	e089      	b.n	8001a04 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018f0:	78bb      	ldrb	r3, [r7, #2]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d11d      	bne.n	8001932 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	212c      	movs	r1, #44	; 0x2c
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	4413      	add	r3, r2
 8001902:	3355      	adds	r3, #85	; 0x55
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	212c      	movs	r1, #44	; 0x2c
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	4413      	add	r3, r2
 8001916:	3342      	adds	r3, #66	; 0x42
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800191c:	e073      	b.n	8001a06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	212c      	movs	r1, #44	; 0x2c
 8001924:	fb01 f303 	mul.w	r3, r1, r3
 8001928:	4413      	add	r3, r2
 800192a:	3342      	adds	r3, #66	; 0x42
 800192c:	2202      	movs	r2, #2
 800192e:	701a      	strb	r2, [r3, #0]
      break;
 8001930:	e069      	b.n	8001a06 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	212c      	movs	r1, #44	; 0x2c
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	3354      	adds	r3, #84	; 0x54
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	212c      	movs	r1, #44	; 0x2c
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	4413      	add	r3, r2
 8001952:	3342      	adds	r3, #66	; 0x42
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
      break;
 8001958:	e055      	b.n	8001a06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	212c      	movs	r1, #44	; 0x2c
 8001960:	fb01 f303 	mul.w	r3, r1, r3
 8001964:	4413      	add	r3, r2
 8001966:	3342      	adds	r3, #66	; 0x42
 8001968:	2202      	movs	r2, #2
 800196a:	701a      	strb	r2, [r3, #0]
      break;
 800196c:	e04b      	b.n	8001a06 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800196e:	78bb      	ldrb	r3, [r7, #2]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d11d      	bne.n	80019b0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	212c      	movs	r1, #44	; 0x2c
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	3355      	adds	r3, #85	; 0x55
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d109      	bne.n	800199c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	212c      	movs	r1, #44	; 0x2c
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	4413      	add	r3, r2
 8001994:	3342      	adds	r3, #66	; 0x42
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800199a:	e034      	b.n	8001a06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	212c      	movs	r1, #44	; 0x2c
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	3342      	adds	r3, #66	; 0x42
 80019aa:	2202      	movs	r2, #2
 80019ac:	701a      	strb	r2, [r3, #0]
      break;
 80019ae:	e02a      	b.n	8001a06 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	212c      	movs	r1, #44	; 0x2c
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	3354      	adds	r3, #84	; 0x54
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d109      	bne.n	80019d8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	212c      	movs	r1, #44	; 0x2c
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	3342      	adds	r3, #66	; 0x42
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
      break;
 80019d6:	e016      	b.n	8001a06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	212c      	movs	r1, #44	; 0x2c
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	3342      	adds	r3, #66	; 0x42
 80019e6:	2202      	movs	r2, #2
 80019e8:	701a      	strb	r2, [r3, #0]
      break;
 80019ea:	e00c      	b.n	8001a06 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	212c      	movs	r1, #44	; 0x2c
 80019f2:	fb01 f303 	mul.w	r3, r1, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	3342      	adds	r3, #66	; 0x42
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
      break;
 80019fe:	e002      	b.n	8001a06 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a00:	bf00      	nop
 8001a02:	e000      	b.n	8001a06 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a04:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	212c      	movs	r1, #44	; 0x2c
 8001a0c:	fb01 f303 	mul.w	r3, r1, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	3344      	adds	r3, #68	; 0x44
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	8b3a      	ldrh	r2, [r7, #24]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	202c      	movs	r0, #44	; 0x2c
 8001a20:	fb00 f303 	mul.w	r3, r0, r3
 8001a24:	440b      	add	r3, r1
 8001a26:	334c      	adds	r3, #76	; 0x4c
 8001a28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	212c      	movs	r1, #44	; 0x2c
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	3360      	adds	r3, #96	; 0x60
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	3350      	adds	r3, #80	; 0x50
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	212c      	movs	r1, #44	; 0x2c
 8001a54:	fb01 f303 	mul.w	r3, r1, r3
 8001a58:	4413      	add	r3, r2
 8001a5a:	3339      	adds	r3, #57	; 0x39
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	212c      	movs	r1, #44	; 0x2c
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3361      	adds	r3, #97	; 0x61
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	222c      	movs	r2, #44	; 0x2c
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	3338      	adds	r3, #56	; 0x38
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	18d1      	adds	r1, r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f003 fa46 	bl	8004f1c <USB_HC_StartXfer>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop

08001a9c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 ff78 	bl	80049a8 <USB_GetMode>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	f040 80f6 	bne.w	8001cac <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 ff5d 	bl	8004984 <USB_ReadInterrupts>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80ec 	beq.w	8001caa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f002 ff54 	bl	8004984 <USB_ReadInterrupts>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ae6:	d104      	bne.n	8001af2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001af0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 ff44 	bl	8004984 <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b06:	d104      	bne.n	8001b12 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 ff34 	bl	8004984 <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b26:	d104      	bne.n	8001b32 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 ff24 	bl	8004984 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d103      	bne.n	8001b4e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 ff16 	bl	8004984 <USB_ReadInterrupts>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b62:	d11c      	bne.n	8001b9e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b6c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10f      	bne.n	8001b9e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b7e:	2110      	movs	r1, #16
 8001b80:	6938      	ldr	r0, [r7, #16]
 8001b82:	f002 fe07 	bl	8004794 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b86:	6938      	ldr	r0, [r7, #16]
 8001b88:	f002 fe38 	bl	80047fc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2101      	movs	r1, #1
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 f808 	bl	8004ba8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f004 fdf9 	bl	8006790 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f002 feee 	bl	8004984 <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb2:	d102      	bne.n	8001bba <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f001 f880 	bl	8002cba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 fee0 	bl	8004984 <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d106      	bne.n	8001bdc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f004 fdc2 	bl	8006758 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2208      	movs	r2, #8
 8001bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 fecf 	bl	8004984 <USB_ReadInterrupts>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	d101      	bne.n	8001bf4 <HAL_HCD_IRQHandler+0x158>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_HCD_IRQHandler+0x15a>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d012      	beq.n	8001c20 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699a      	ldr	r2, [r3, #24]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0210 	bic.w	r2, r2, #16
 8001c08:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 ff83 	bl	8002b16 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0210 	orr.w	r2, r2, #16
 8001c1e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f002 fead 	bl	8004984 <USB_ReadInterrupts>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c34:	d13a      	bne.n	8001cac <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fab0 	bl	80051a0 <USB_HC_ReadInterrupt>
 8001c40:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e025      	b.n	8001c94 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d018      	beq.n	8001c8e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	015a      	lsls	r2, r3, #5
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c72:	d106      	bne.n	8001c82 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	4619      	mov	r1, r3
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f88d 	bl	8001d9a <HCD_HC_IN_IRQHandler>
 8001c80:	e005      	b.n	8001c8e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	4619      	mov	r1, r3
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fbdb 	bl	8002444 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d3d4      	bcc.n	8001c48 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca6:	615a      	str	r2, [r3, #20]
 8001ca8:	e000      	b.n	8001cac <HAL_HCD_IRQHandler+0x210>
      return;
 8001caa:	bf00      	nop
    }
  }
}
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_HCD_Start+0x16>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e013      	b.n	8001cf0 <HAL_HCD_Start+0x3e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 ff9f 	bl	8004c1a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 fceb 	bl	80046bc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_HCD_Stop+0x16>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e00d      	b.n	8001d2a <HAL_HCD_Stop+0x32>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f003 fb86 	bl	800542c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	212c      	movs	r1, #44	; 0x2c
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	3360      	adds	r3, #96	; 0x60
 8001d4c:	781b      	ldrb	r3, [r3, #0]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	212c      	movs	r1, #44	; 0x2c
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	3350      	adds	r3, #80	; 0x50
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f002 ff93 	bl	8004cb6 <USB_GetCurrentFrame>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d11a      	bne.n	8001e00 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	2304      	movs	r3, #4
 8001dda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	212c      	movs	r1, #44	; 0x2c
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	3361      	adds	r3, #97	; 0x61
 8001dea:	2206      	movs	r2, #6
 8001dec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 f9e1 	bl	80051c0 <USB_HC_Halt>
 8001dfe:	e0af      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	015a      	lsls	r2, r3, #5
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e16:	d11b      	bne.n	8001e50 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e24:	461a      	mov	r2, r3
 8001e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	212c      	movs	r1, #44	; 0x2c
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	3361      	adds	r3, #97	; 0x61
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 f9b9 	bl	80051c0 <USB_HC_Halt>
 8001e4e:	e087      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	d109      	bne.n	8001e7a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e72:	461a      	mov	r2, r3
 8001e74:	2320      	movs	r3, #32
 8001e76:	6093      	str	r3, [r2, #8]
 8001e78:	e072      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d11a      	bne.n	8001ec6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	212c      	movs	r1, #44	; 0x2c
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	3361      	adds	r3, #97	; 0x61
 8001eb0:	2205      	movs	r2, #5
 8001eb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 f97e 	bl	80051c0 <USB_HC_Halt>
 8001ec4:	e04c      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	015a      	lsls	r2, r3, #5
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001edc:	d11b      	bne.n	8001f16 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eea:	461a      	mov	r2, r3
 8001eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	212c      	movs	r1, #44	; 0x2c
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3361      	adds	r3, #97	; 0x61
 8001f00:	2208      	movs	r2, #8
 8001f02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 f956 	bl	80051c0 <USB_HC_Halt>
 8001f14:	e024      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	2b80      	cmp	r3, #128	; 0x80
 8001f2a:	d119      	bne.n	8001f60 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	3361      	adds	r3, #97	; 0x61
 8001f4c:	2206      	movs	r2, #6
 8001f4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 f930 	bl	80051c0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f76:	d112      	bne.n	8001f9e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 f91c 	bl	80051c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f9c:	e24e      	b.n	800243c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	f040 80df 	bne.w	8002174 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d019      	beq.n	8001ff2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3348      	adds	r3, #72	; 0x48
 8001fcc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	0159      	lsls	r1, r3, #5
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	440b      	add	r3, r1
 8001fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fe0:	1ad2      	subs	r2, r2, r3
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	202c      	movs	r0, #44	; 0x2c
 8001fe8:	fb00 f303 	mul.w	r3, r0, r3
 8001fec:	440b      	add	r3, r1
 8001fee:	3350      	adds	r3, #80	; 0x50
 8001ff0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3361      	adds	r3, #97	; 0x61
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	212c      	movs	r1, #44	; 0x2c
 800200a:	fb01 f303 	mul.w	r3, r1, r3
 800200e:	4413      	add	r3, r2
 8002010:	335c      	adds	r3, #92	; 0x5c
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4413      	add	r3, r2
 800201e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002022:	461a      	mov	r2, r3
 8002024:	2301      	movs	r3, #1
 8002026:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	333f      	adds	r3, #63	; 0x3f
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d009      	beq.n	8002050 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	333f      	adds	r3, #63	; 0x3f
 800204a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800204c:	2b02      	cmp	r3, #2
 800204e:	d111      	bne.n	8002074 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f003 f8b0 	bl	80051c0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206c:	461a      	mov	r2, r3
 800206e:	2310      	movs	r3, #16
 8002070:	6093      	str	r3, [r2, #8]
 8002072:	e03a      	b.n	80020ea <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	333f      	adds	r3, #63	; 0x3f
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d009      	beq.n	800209c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	212c      	movs	r1, #44	; 0x2c
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	333f      	adds	r3, #63	; 0x3f
 8002096:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002098:	2b01      	cmp	r3, #1
 800209a:	d126      	bne.n	80020ea <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	0151      	lsls	r1, r2, #5
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	440a      	add	r2, r1
 80020b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020ba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	3360      	adds	r3, #96	; 0x60
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	b2d9      	uxtb	r1, r3
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	202c      	movs	r0, #44	; 0x2c
 80020d8:	fb00 f303 	mul.w	r3, r0, r3
 80020dc:	4413      	add	r3, r2
 80020de:	3360      	adds	r3, #96	; 0x60
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f004 fb61 	bl	80067ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d12b      	bne.n	800214a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3348      	adds	r3, #72	; 0x48
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	202c      	movs	r0, #44	; 0x2c
 8002108:	fb00 f202 	mul.w	r2, r0, r2
 800210c:	440a      	add	r2, r1
 800210e:	3240      	adds	r2, #64	; 0x40
 8002110:	8812      	ldrh	r2, [r2, #0]
 8002112:	fbb3 f3f2 	udiv	r3, r3, r2
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 818e 	beq.w	800243c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3354      	adds	r3, #84	; 0x54
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	f083 0301 	eor.w	r3, r3, #1
 8002134:	b2d8      	uxtb	r0, r3
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	3354      	adds	r3, #84	; 0x54
 8002144:	4602      	mov	r2, r0
 8002146:	701a      	strb	r2, [r3, #0]
}
 8002148:	e178      	b.n	800243c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	3354      	adds	r3, #84	; 0x54
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	f083 0301 	eor.w	r3, r3, #1
 800215e:	b2d8      	uxtb	r0, r3
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	3354      	adds	r3, #84	; 0x54
 800216e:	4602      	mov	r2, r0
 8002170:	701a      	strb	r2, [r3, #0]
}
 8002172:	e163      	b.n	800243c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b02      	cmp	r3, #2
 8002188:	f040 80f6 	bne.w	8002378 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3361      	adds	r3, #97	; 0x61
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d109      	bne.n	80021b4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	3360      	adds	r3, #96	; 0x60
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	e0c9      	b.n	8002348 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	212c      	movs	r1, #44	; 0x2c
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	4413      	add	r3, r2
 80021c0:	3361      	adds	r3, #97	; 0x61
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	d109      	bne.n	80021dc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3360      	adds	r3, #96	; 0x60
 80021d6:	2205      	movs	r2, #5
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	e0b5      	b.n	8002348 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	212c      	movs	r1, #44	; 0x2c
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	3361      	adds	r3, #97	; 0x61
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b06      	cmp	r3, #6
 80021ee:	d009      	beq.n	8002204 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	212c      	movs	r1, #44	; 0x2c
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	3361      	adds	r3, #97	; 0x61
 80021fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002200:	2b08      	cmp	r3, #8
 8002202:	d150      	bne.n	80022a6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	335c      	adds	r3, #92	; 0x5c
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	202c      	movs	r0, #44	; 0x2c
 800221c:	fb00 f303 	mul.w	r3, r0, r3
 8002220:	440b      	add	r3, r1
 8002222:	335c      	adds	r3, #92	; 0x5c
 8002224:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	335c      	adds	r3, #92	; 0x5c
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d912      	bls.n	8002260 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	335c      	adds	r3, #92	; 0x5c
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3360      	adds	r3, #96	; 0x60
 800225a:	2204      	movs	r2, #4
 800225c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800225e:	e073      	b.n	8002348 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	3360      	adds	r3, #96	; 0x60
 800226e:	2202      	movs	r2, #2
 8002270:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4413      	add	r3, r2
 800227a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002288:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002290:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229e:	461a      	mov	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022a4:	e050      	b.n	8002348 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3361      	adds	r3, #97	; 0x61
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d122      	bne.n	8002300 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3360      	adds	r3, #96	; 0x60
 80022c8:	2202      	movs	r2, #2
 80022ca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022e2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022ea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f8:	461a      	mov	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e023      	b.n	8002348 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	212c      	movs	r1, #44	; 0x2c
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	3361      	adds	r3, #97	; 0x61
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b07      	cmp	r3, #7
 8002312:	d119      	bne.n	8002348 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	335c      	adds	r3, #92	; 0x5c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	202c      	movs	r0, #44	; 0x2c
 800232c:	fb00 f303 	mul.w	r3, r0, r3
 8002330:	440b      	add	r3, r1
 8002332:	335c      	adds	r3, #92	; 0x5c
 8002334:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	212c      	movs	r1, #44	; 0x2c
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	4413      	add	r3, r2
 8002342:	3360      	adds	r3, #96	; 0x60
 8002344:	2204      	movs	r2, #4
 8002346:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	461a      	mov	r2, r3
 8002356:	2302      	movs	r3, #2
 8002358:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	b2d9      	uxtb	r1, r3
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	202c      	movs	r0, #44	; 0x2c
 8002364:	fb00 f303 	mul.w	r3, r0, r3
 8002368:	4413      	add	r3, r2
 800236a:	3360      	adds	r3, #96	; 0x60
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f004 fa1b 	bl	80067ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002376:	e061      	b.n	800243c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b10      	cmp	r3, #16
 800238c:	d156      	bne.n	800243c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	333f      	adds	r3, #63	; 0x3f
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d111      	bne.n	80023c6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	335c      	adds	r3, #92	; 0x5c
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 fefe 	bl	80051c0 <USB_HC_Halt>
 80023c4:	e031      	b.n	800242a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	333f      	adds	r3, #63	; 0x3f
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	333f      	adds	r3, #63	; 0x3f
 80023e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d11d      	bne.n	800242a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	335c      	adds	r3, #92	; 0x5c
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d110      	bne.n	800242a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	3361      	adds	r3, #97	; 0x61
 8002416:	2203      	movs	r2, #3
 8002418:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f002 fecb 	bl	80051c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	461a      	mov	r2, r3
 8002438:	2310      	movs	r3, #16
 800243a:	6093      	str	r3, [r2, #8]
}
 800243c:	bf00      	nop
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b04      	cmp	r3, #4
 8002472:	d11a      	bne.n	80024aa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002480:	461a      	mov	r2, r3
 8002482:	2304      	movs	r3, #4
 8002484:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	3361      	adds	r3, #97	; 0x61
 8002494:	2206      	movs	r2, #6
 8002496:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 fe8c 	bl	80051c0 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80024a8:	e331      	b.n	8002b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d12e      	bne.n	800251e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024cc:	461a      	mov	r2, r3
 80024ce:	2320      	movs	r3, #32
 80024d0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	333d      	adds	r3, #61	; 0x3d
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	f040 8313 	bne.w	8002b0e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	333d      	adds	r3, #61	; 0x3d
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	212c      	movs	r1, #44	; 0x2c
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	4413      	add	r3, r2
 8002506:	3360      	adds	r3, #96	; 0x60
 8002508:	2202      	movs	r2, #2
 800250a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f002 fe52 	bl	80051c0 <USB_HC_Halt>
}
 800251c:	e2f7      	b.n	8002b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	4413      	add	r3, r2
 8002526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002534:	d112      	bne.n	800255c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	4413      	add	r3, r2
 800253e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002542:	461a      	mov	r2, r3
 8002544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002548:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f002 fe33 	bl	80051c0 <USB_HC_Halt>
}
 800255a:	e2d8      	b.n	8002b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d140      	bne.n	80025f4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	335c      	adds	r3, #92	; 0x5c
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002596:	2b40      	cmp	r3, #64	; 0x40
 8002598:	d111      	bne.n	80025be <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	333d      	adds	r3, #61	; 0x3d
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b8:	461a      	mov	r2, r3
 80025ba:	2340      	movs	r3, #64	; 0x40
 80025bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ca:	461a      	mov	r2, r3
 80025cc:	2301      	movs	r3, #1
 80025ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	212c      	movs	r1, #44	; 0x2c
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	3361      	adds	r3, #97	; 0x61
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f002 fde7 	bl	80051c0 <USB_HC_Halt>
}
 80025f2:	e28c      	b.n	8002b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b40      	cmp	r3, #64	; 0x40
 8002608:	d12c      	bne.n	8002664 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	3361      	adds	r3, #97	; 0x61
 8002618:	2204      	movs	r2, #4
 800261a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	333d      	adds	r3, #61	; 0x3d
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	335c      	adds	r3, #92	; 0x5c
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f002 fdb8 	bl	80051c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	461a      	mov	r2, r3
 800265e:	2340      	movs	r3, #64	; 0x40
 8002660:	6093      	str	r3, [r2, #8]
}
 8002662:	e254      	b.n	8002b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b08      	cmp	r3, #8
 8002678:	d11a      	bne.n	80026b0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	461a      	mov	r2, r3
 8002688:	2308      	movs	r3, #8
 800268a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	3361      	adds	r3, #97	; 0x61
 800269a:	2205      	movs	r2, #5
 800269c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f002 fd89 	bl	80051c0 <USB_HC_Halt>
}
 80026ae:	e22e      	b.n	8002b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b10      	cmp	r3, #16
 80026c4:	d140      	bne.n	8002748 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	335c      	adds	r3, #92	; 0x5c
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	3361      	adds	r3, #97	; 0x61
 80026e6:	2203      	movs	r2, #3
 80026e8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	333d      	adds	r3, #61	; 0x3d
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d112      	bne.n	8002724 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	333c      	adds	r3, #60	; 0x3c
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d108      	bne.n	8002724 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	333d      	adds	r3, #61	; 0x3d
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f002 fd46 	bl	80051c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002740:	461a      	mov	r2, r3
 8002742:	2310      	movs	r3, #16
 8002744:	6093      	str	r3, [r2, #8]
}
 8002746:	e1e2      	b.n	8002b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b80      	cmp	r3, #128	; 0x80
 800275c:	d164      	bne.n	8002828 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d111      	bne.n	800278a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	3361      	adds	r3, #97	; 0x61
 8002774:	2206      	movs	r2, #6
 8002776:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f002 fd1c 	bl	80051c0 <USB_HC_Halt>
 8002788:	e044      	b.n	8002814 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	335c      	adds	r3, #92	; 0x5c
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	202c      	movs	r0, #44	; 0x2c
 80027a2:	fb00 f303 	mul.w	r3, r0, r3
 80027a6:	440b      	add	r3, r1
 80027a8:	335c      	adds	r3, #92	; 0x5c
 80027aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	212c      	movs	r1, #44	; 0x2c
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	335c      	adds	r3, #92	; 0x5c
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d920      	bls.n	8002802 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	335c      	adds	r3, #92	; 0x5c
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3360      	adds	r3, #96	; 0x60
 80027e0:	2204      	movs	r2, #4
 80027e2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	b2d9      	uxtb	r1, r3
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	202c      	movs	r0, #44	; 0x2c
 80027ee:	fb00 f303 	mul.w	r3, r0, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	3360      	adds	r3, #96	; 0x60
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f003 ffd6 	bl	80067ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8002800:	e008      	b.n	8002814 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	3360      	adds	r3, #96	; 0x60
 8002810:	2202      	movs	r2, #2
 8002812:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	461a      	mov	r2, r3
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	6093      	str	r3, [r2, #8]
}
 8002826:	e172      	b.n	8002b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283e:	d11b      	bne.n	8002878 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	3361      	adds	r3, #97	; 0x61
 800284e:	2208      	movs	r2, #8
 8002850:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f002 fcaf 	bl	80051c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	461a      	mov	r2, r3
 8002870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002874:	6093      	str	r3, [r2, #8]
}
 8002876:	e14a      	b.n	8002b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b02      	cmp	r3, #2
 800288c:	f040 813f 	bne.w	8002b0e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	212c      	movs	r1, #44	; 0x2c
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	3361      	adds	r3, #97	; 0x61
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d17d      	bne.n	80029a0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3360      	adds	r3, #96	; 0x60
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	333f      	adds	r3, #63	; 0x3f
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d00a      	beq.n	80028e0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	333f      	adds	r3, #63	; 0x3f
 80028d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028da:	2b03      	cmp	r3, #3
 80028dc:	f040 8100 	bne.w	8002ae0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d113      	bne.n	8002910 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3355      	adds	r3, #85	; 0x55
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	f083 0301 	eor.w	r3, r3, #1
 80028fc:	b2d8      	uxtb	r0, r3
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	3355      	adds	r3, #85	; 0x55
 800290c:	4602      	mov	r2, r0
 800290e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b01      	cmp	r3, #1
 8002916:	f040 80e3 	bne.w	8002ae0 <HCD_HC_OUT_IRQHandler+0x69c>
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	334c      	adds	r3, #76	; 0x4c
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80d8 	beq.w	8002ae0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	334c      	adds	r3, #76	; 0x4c
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	202c      	movs	r0, #44	; 0x2c
 8002946:	fb00 f202 	mul.w	r2, r0, r2
 800294a:	440a      	add	r2, r1
 800294c:	3240      	adds	r2, #64	; 0x40
 800294e:	8812      	ldrh	r2, [r2, #0]
 8002950:	4413      	add	r3, r2
 8002952:	3b01      	subs	r3, #1
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	202c      	movs	r0, #44	; 0x2c
 800295a:	fb00 f202 	mul.w	r2, r0, r2
 800295e:	440a      	add	r2, r1
 8002960:	3240      	adds	r2, #64	; 0x40
 8002962:	8812      	ldrh	r2, [r2, #0]
 8002964:	fbb3 f3f2 	udiv	r3, r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80b5 	beq.w	8002ae0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3355      	adds	r3, #85	; 0x55
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	f083 0301 	eor.w	r3, r3, #1
 800298a:	b2d8      	uxtb	r0, r3
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3355      	adds	r3, #85	; 0x55
 800299a:	4602      	mov	r2, r0
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	e09f      	b.n	8002ae0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	3361      	adds	r3, #97	; 0x61
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d109      	bne.n	80029c8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	212c      	movs	r1, #44	; 0x2c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	3360      	adds	r3, #96	; 0x60
 80029c2:	2202      	movs	r2, #2
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e08b      	b.n	8002ae0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3361      	adds	r3, #97	; 0x61
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d109      	bne.n	80029f0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	3360      	adds	r3, #96	; 0x60
 80029ea:	2202      	movs	r2, #2
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	e077      	b.n	8002ae0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3361      	adds	r3, #97	; 0x61
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d109      	bne.n	8002a18 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3360      	adds	r3, #96	; 0x60
 8002a12:	2205      	movs	r2, #5
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e063      	b.n	8002ae0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3361      	adds	r3, #97	; 0x61
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b06      	cmp	r3, #6
 8002a2a:	d009      	beq.n	8002a40 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3361      	adds	r3, #97	; 0x61
 8002a3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d14f      	bne.n	8002ae0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	335c      	adds	r3, #92	; 0x5c
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	202c      	movs	r0, #44	; 0x2c
 8002a58:	fb00 f303 	mul.w	r3, r0, r3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	335c      	adds	r3, #92	; 0x5c
 8002a60:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	335c      	adds	r3, #92	; 0x5c
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d912      	bls.n	8002a9c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	335c      	adds	r3, #92	; 0x5c
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3360      	adds	r3, #96	; 0x60
 8002a96:	2204      	movs	r2, #4
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e021      	b.n	8002ae0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3360      	adds	r3, #96	; 0x60
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ac4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002acc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ada:	461a      	mov	r2, r3
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aec:	461a      	mov	r2, r3
 8002aee:	2302      	movs	r3, #2
 8002af0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	b2d9      	uxtb	r1, r3
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	202c      	movs	r0, #44	; 0x2c
 8002afc:	fb00 f303 	mul.w	r3, r0, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3360      	adds	r3, #96	; 0x60
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f003 fe4f 	bl	80067ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b0e:	bf00      	nop
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b08a      	sub	sp, #40	; 0x28
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	0c5b      	lsrs	r3, r3, #17
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b4a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d004      	beq.n	8002b5c <HCD_RXQLVL_IRQHandler+0x46>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b05      	cmp	r3, #5
 8002b56:	f000 80a9 	beq.w	8002cac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b5a:	e0aa      	b.n	8002cb2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 80a6 	beq.w	8002cb0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3344      	adds	r3, #68	; 0x44
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 809b 	beq.w	8002cb0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	3350      	adds	r3, #80	; 0x50
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	441a      	add	r2, r3
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	202c      	movs	r0, #44	; 0x2c
 8002b94:	fb00 f303 	mul.w	r3, r0, r3
 8002b98:	440b      	add	r3, r1
 8002b9a:	334c      	adds	r3, #76	; 0x4c
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d87a      	bhi.n	8002c98 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3344      	adds	r3, #68	; 0x44
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	b292      	uxth	r2, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f001 fe8b 	bl	80048d6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3344      	adds	r3, #68	; 0x44
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	441a      	add	r2, r3
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	202c      	movs	r0, #44	; 0x2c
 8002bda:	fb00 f303 	mul.w	r3, r0, r3
 8002bde:	440b      	add	r3, r1
 8002be0:	3344      	adds	r3, #68	; 0x44
 8002be2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3350      	adds	r3, #80	; 0x50
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	441a      	add	r2, r3
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	202c      	movs	r0, #44	; 0x2c
 8002bfe:	fb00 f303 	mul.w	r3, r0, r3
 8002c02:	440b      	add	r3, r1
 8002c04:	3350      	adds	r3, #80	; 0x50
 8002c06:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	0cdb      	lsrs	r3, r3, #19
 8002c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c1c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	3340      	adds	r3, #64	; 0x40
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d13c      	bne.n	8002cb0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d039      	beq.n	8002cb0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c52:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c5a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	461a      	mov	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3354      	adds	r3, #84	; 0x54
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	f083 0301 	eor.w	r3, r3, #1
 8002c82:	b2d8      	uxtb	r0, r3
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3354      	adds	r3, #84	; 0x54
 8002c92:	4602      	mov	r2, r0
 8002c94:	701a      	strb	r2, [r3, #0]
      break;
 8002c96:	e00b      	b.n	8002cb0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3360      	adds	r3, #96	; 0x60
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	701a      	strb	r2, [r3, #0]
      break;
 8002caa:	e001      	b.n	8002cb0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002cac:	bf00      	nop
 8002cae:	e000      	b.n	8002cb2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002cb0:	bf00      	nop
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	3728      	adds	r7, #40	; 0x28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ce6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d10b      	bne.n	8002d0a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d102      	bne.n	8002d02 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f003 fd39 	bl	8006774 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d132      	bne.n	8002d7a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f043 0308 	orr.w	r3, r3, #8
 8002d1a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d126      	bne.n	8002d74 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d113      	bne.n	8002d56 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d38:	d106      	bne.n	8002d48 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2102      	movs	r1, #2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 ff31 	bl	8004ba8 <USB_InitFSLSPClkSel>
 8002d46:	e011      	b.n	8002d6c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f001 ff2a 	bl	8004ba8 <USB_InitFSLSPClkSel>
 8002d54:	e00a      	b.n	8002d6c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d106      	bne.n	8002d6c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d64:	461a      	mov	r2, r3
 8002d66:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d6a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f003 fd2a 	bl	80067c6 <HAL_HCD_PortEnabled_Callback>
 8002d72:	e002      	b.n	8002d7a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f003 fd34 	bl	80067e2 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d103      	bne.n	8002d8c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f043 0320 	orr.w	r3, r3, #32
 8002d8a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d92:	461a      	mov	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	6013      	str	r3, [r2, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e12b      	b.n	800300a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fd feec 	bl	8000ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e04:	f001 fa1e 	bl	8004244 <HAL_RCC_GetPCLK1Freq>
 8002e08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4a81      	ldr	r2, [pc, #516]	; (8003014 <HAL_I2C_Init+0x274>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d807      	bhi.n	8002e24 <HAL_I2C_Init+0x84>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4a80      	ldr	r2, [pc, #512]	; (8003018 <HAL_I2C_Init+0x278>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	bf94      	ite	ls
 8002e1c:	2301      	movls	r3, #1
 8002e1e:	2300      	movhi	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	e006      	b.n	8002e32 <HAL_I2C_Init+0x92>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a7d      	ldr	r2, [pc, #500]	; (800301c <HAL_I2C_Init+0x27c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	bf94      	ite	ls
 8002e2c:	2301      	movls	r3, #1
 8002e2e:	2300      	movhi	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0e7      	b.n	800300a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4a78      	ldr	r2, [pc, #480]	; (8003020 <HAL_I2C_Init+0x280>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	0c9b      	lsrs	r3, r3, #18
 8002e44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4a6a      	ldr	r2, [pc, #424]	; (8003014 <HAL_I2C_Init+0x274>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d802      	bhi.n	8002e74 <HAL_I2C_Init+0xd4>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	3301      	adds	r3, #1
 8002e72:	e009      	b.n	8002e88 <HAL_I2C_Init+0xe8>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e7a:	fb02 f303 	mul.w	r3, r2, r3
 8002e7e:	4a69      	ldr	r2, [pc, #420]	; (8003024 <HAL_I2C_Init+0x284>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	3301      	adds	r3, #1
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	495c      	ldr	r1, [pc, #368]	; (8003014 <HAL_I2C_Init+0x274>)
 8002ea4:	428b      	cmp	r3, r1
 8002ea6:	d819      	bhi.n	8002edc <HAL_I2C_Init+0x13c>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e59      	subs	r1, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb6:	1c59      	adds	r1, r3, #1
 8002eb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_I2C_Init+0x138>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1e59      	subs	r1, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed6:	e051      	b.n	8002f7c <HAL_I2C_Init+0x1dc>
 8002ed8:	2304      	movs	r3, #4
 8002eda:	e04f      	b.n	8002f7c <HAL_I2C_Init+0x1dc>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d111      	bne.n	8002f08 <HAL_I2C_Init+0x168>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1e58      	subs	r0, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	440b      	add	r3, r1
 8002ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e012      	b.n	8002f2e <HAL_I2C_Init+0x18e>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1e58      	subs	r0, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	0099      	lsls	r1, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_I2C_Init+0x196>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e022      	b.n	8002f7c <HAL_I2C_Init+0x1dc>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10e      	bne.n	8002f5c <HAL_I2C_Init+0x1bc>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1e58      	subs	r0, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6859      	ldr	r1, [r3, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	440b      	add	r3, r1
 8002f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f50:	3301      	adds	r3, #1
 8002f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5a:	e00f      	b.n	8002f7c <HAL_I2C_Init+0x1dc>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e58      	subs	r0, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	0099      	lsls	r1, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	6809      	ldr	r1, [r1, #0]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002faa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6911      	ldr	r1, [r2, #16]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68d2      	ldr	r2, [r2, #12]
 8002fb6:	4311      	orrs	r1, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	000186a0 	.word	0x000186a0
 8003018:	001e847f 	.word	0x001e847f
 800301c:	003d08ff 	.word	0x003d08ff
 8003020:	431bde83 	.word	0x431bde83
 8003024:	10624dd3 	.word	0x10624dd3

08003028 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e128      	b.n	800328c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a90      	ldr	r2, [pc, #576]	; (8003294 <HAL_I2S_Init+0x26c>)
 8003052:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7fd fded 	bl	8000c34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003070:	f023 030f 	bic.w	r3, r3, #15
 8003074:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2202      	movs	r2, #2
 800307c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d060      	beq.n	8003148 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d102      	bne.n	8003094 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800308e:	2310      	movs	r3, #16
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	e001      	b.n	8003098 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003094:	2320      	movs	r3, #32
 8003096:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b20      	cmp	r3, #32
 800309e:	d802      	bhi.n	80030a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f001 f9c2 	bl	8004430 <HAL_RCCEx_GetPeriphCLKFreq>
 80030ac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b6:	d125      	bne.n	8003104 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d010      	beq.n	80030e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	461a      	mov	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	3305      	adds	r3, #5
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	e01f      	b.n	8003122 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	461a      	mov	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	3305      	adds	r3, #5
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	e00e      	b.n	8003122 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	fbb2 f2f3 	udiv	r2, r2, r3
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	461a      	mov	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	3305      	adds	r3, #5
 8003120:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4a5c      	ldr	r2, [pc, #368]	; (8003298 <HAL_I2S_Init+0x270>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	08db      	lsrs	r3, r3, #3
 800312c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	085b      	lsrs	r3, r3, #1
 800313e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	e003      	b.n	8003150 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003148:	2302      	movs	r3, #2
 800314a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d902      	bls.n	800315c <HAL_I2S_Init+0x134>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	2bff      	cmp	r3, #255	; 0xff
 800315a:	d907      	bls.n	800316c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	f043 0210 	orr.w	r2, r3, #16
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e08f      	b.n	800328c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	ea42 0103 	orr.w	r1, r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	430a      	orrs	r2, r1
 800317e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800318a:	f023 030f 	bic.w	r3, r3, #15
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6851      	ldr	r1, [r2, #4]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6892      	ldr	r2, [r2, #8]
 8003196:	4311      	orrs	r1, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	68d2      	ldr	r2, [r2, #12]
 800319c:	4311      	orrs	r1, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6992      	ldr	r2, [r2, #24]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d161      	bne.n	800327c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a38      	ldr	r2, [pc, #224]	; (800329c <HAL_I2S_Init+0x274>)
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a37      	ldr	r2, [pc, #220]	; (80032a0 <HAL_I2S_Init+0x278>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_I2S_Init+0x1a4>
 80031c8:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <HAL_I2S_Init+0x27c>)
 80031ca:	e001      	b.n	80031d0 <HAL_I2S_Init+0x1a8>
 80031cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	4932      	ldr	r1, [pc, #200]	; (80032a0 <HAL_I2S_Init+0x278>)
 80031d8:	428a      	cmp	r2, r1
 80031da:	d101      	bne.n	80031e0 <HAL_I2S_Init+0x1b8>
 80031dc:	4a31      	ldr	r2, [pc, #196]	; (80032a4 <HAL_I2S_Init+0x27c>)
 80031de:	e001      	b.n	80031e4 <HAL_I2S_Init+0x1bc>
 80031e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80031e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031e8:	f023 030f 	bic.w	r3, r3, #15
 80031ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2b      	ldr	r2, [pc, #172]	; (80032a0 <HAL_I2S_Init+0x278>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d101      	bne.n	80031fc <HAL_I2S_Init+0x1d4>
 80031f8:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <HAL_I2S_Init+0x27c>)
 80031fa:	e001      	b.n	8003200 <HAL_I2S_Init+0x1d8>
 80031fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003200:	2202      	movs	r2, #2
 8003202:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a25      	ldr	r2, [pc, #148]	; (80032a0 <HAL_I2S_Init+0x278>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d101      	bne.n	8003212 <HAL_I2S_Init+0x1ea>
 800320e:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <HAL_I2S_Init+0x27c>)
 8003210:	e001      	b.n	8003216 <HAL_I2S_Init+0x1ee>
 8003212:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003222:	d003      	beq.n	800322c <HAL_I2S_Init+0x204>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d103      	bne.n	8003234 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800322c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	e001      	b.n	8003238 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003242:	4313      	orrs	r3, r2
 8003244:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800324c:	4313      	orrs	r3, r2
 800324e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003256:	4313      	orrs	r3, r2
 8003258:	b29a      	uxth	r2, r3
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	4313      	orrs	r3, r2
 800325e:	b29b      	uxth	r3, r3
 8003260:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003264:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <HAL_I2S_Init+0x278>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d101      	bne.n	8003274 <HAL_I2S_Init+0x24c>
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <HAL_I2S_Init+0x27c>)
 8003272:	e001      	b.n	8003278 <HAL_I2S_Init+0x250>
 8003274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003278:	897a      	ldrh	r2, [r7, #10]
 800327a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	08003399 	.word	0x08003399
 8003298:	cccccccd 	.word	0xcccccccd
 800329c:	080034ad 	.word	0x080034ad
 80032a0:	40003800 	.word	0x40003800
 80032a4:	40003400 	.word	0x40003400

080032a8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	881a      	ldrh	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	1c9a      	adds	r2, r3, #2
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10e      	bne.n	8003332 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003322:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ffbb 	bl	80032a8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	b292      	uxth	r2, r2
 800334e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	1c9a      	adds	r2, r3, #2
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10e      	bne.n	8003390 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003380:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ff95 	bl	80032ba <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d13a      	bne.n	800342a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d109      	bne.n	80033d2 <I2S_IRQHandler+0x3a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c8:	2b40      	cmp	r3, #64	; 0x40
 80033ca:	d102      	bne.n	80033d2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ffb4 	bl	800333a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d8:	2b40      	cmp	r3, #64	; 0x40
 80033da:	d126      	bne.n	800342a <I2S_IRQHandler+0x92>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d11f      	bne.n	800342a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033f8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	f043 0202 	orr.w	r2, r3, #2
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff ff51 	bl	80032cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b03      	cmp	r3, #3
 8003434:	d136      	bne.n	80034a4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b02      	cmp	r3, #2
 800343e:	d109      	bne.n	8003454 <I2S_IRQHandler+0xbc>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b80      	cmp	r3, #128	; 0x80
 800344c:	d102      	bne.n	8003454 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff ff45 	bl	80032de <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b08      	cmp	r3, #8
 800345c:	d122      	bne.n	80034a4 <I2S_IRQHandler+0x10c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b20      	cmp	r3, #32
 800346a:	d11b      	bne.n	80034a4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800347a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	f043 0204 	orr.w	r2, r3, #4
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff ff14 	bl	80032cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034a4:	bf00      	nop
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a92      	ldr	r2, [pc, #584]	; (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034c6:	4b92      	ldr	r3, [pc, #584]	; (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034c8:	e001      	b.n	80034ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a8b      	ldr	r2, [pc, #556]	; (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80034e4:	4b8a      	ldr	r3, [pc, #552]	; (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034e6:	e001      	b.n	80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80034e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f8:	d004      	beq.n	8003504 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f040 8099 	bne.w	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b02      	cmp	r3, #2
 800350c:	d107      	bne.n	800351e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f924 	bl	8003766 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d107      	bne.n	8003538 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f9c6 	bl	80038c4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	d13a      	bne.n	80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d035      	beq.n	80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a6e      	ldr	r2, [pc, #440]	; (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003556:	4b6e      	ldr	r3, [pc, #440]	; (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003558:	e001      	b.n	800355e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800355a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4969      	ldr	r1, [pc, #420]	; (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003566:	428b      	cmp	r3, r1
 8003568:	d101      	bne.n	800356e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800356a:	4b69      	ldr	r3, [pc, #420]	; (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800356c:	e001      	b.n	8003572 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800356e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003572:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003576:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003586:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f043 0202 	orr.w	r2, r3, #2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff fe8a 	bl	80032cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b08      	cmp	r3, #8
 80035c0:	f040 80c3 	bne.w	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80bd 	beq.w	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a49      	ldr	r2, [pc, #292]	; (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d101      	bne.n	80035ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80035ea:	4b49      	ldr	r3, [pc, #292]	; (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035ec:	e001      	b.n	80035f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80035ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4944      	ldr	r1, [pc, #272]	; (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035fa:	428b      	cmp	r3, r1
 80035fc:	d101      	bne.n	8003602 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80035fe:	4b44      	ldr	r3, [pc, #272]	; (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003600:	e001      	b.n	8003606 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003602:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003606:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800360a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800360c:	2300      	movs	r3, #0
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	f043 0204 	orr.w	r2, r3, #4
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff fe4c 	bl	80032cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003634:	e089      	b.n	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b02      	cmp	r3, #2
 800363e:	d107      	bne.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f8bc 	bl	80037c8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b01      	cmp	r3, #1
 8003658:	d107      	bne.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f8fb 	bl	8003860 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d12f      	bne.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d02a      	beq.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800368c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1e      	ldr	r2, [pc, #120]	; (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d101      	bne.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800369a:	e001      	b.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800369c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4919      	ldr	r1, [pc, #100]	; (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036a8:	428b      	cmp	r3, r1
 80036aa:	d101      	bne.n	80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80036ac:	4b18      	ldr	r3, [pc, #96]	; (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ae:	e001      	b.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80036b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	f043 0202 	orr.w	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff fdfc 	bl	80032cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d136      	bne.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d031      	beq.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a07      	ldr	r2, [pc, #28]	; (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80036f2:	4b07      	ldr	r3, [pc, #28]	; (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f4:	e001      	b.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80036f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4902      	ldr	r1, [pc, #8]	; (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003702:	428b      	cmp	r3, r1
 8003704:	d106      	bne.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003706:	4b02      	ldr	r3, [pc, #8]	; (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003708:	e006      	b.n	8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800370a:	bf00      	nop
 800370c:	40003800 	.word	0x40003800
 8003710:	40003400 	.word	0x40003400
 8003714:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003718:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800371c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800372c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f043 0204 	orr.w	r2, r3, #4
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff fdc2 	bl	80032cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003748:	e000      	b.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800374a:	bf00      	nop
}
 800374c:	bf00      	nop
 800374e:	3720      	adds	r7, #32
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	1c99      	adds	r1, r3, #2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6251      	str	r1, [r2, #36]	; 0x24
 8003778:	881a      	ldrh	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d113      	bne.n	80037c0 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a6:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff ffca 	bl	8003754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	1c99      	adds	r1, r3, #2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6251      	str	r1, [r2, #36]	; 0x24
 80037da:	8819      	ldrh	r1, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1d      	ldr	r2, [pc, #116]	; (8003858 <I2SEx_TxISR_I2SExt+0x90>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d101      	bne.n	80037ea <I2SEx_TxISR_I2SExt+0x22>
 80037e6:	4b1d      	ldr	r3, [pc, #116]	; (800385c <I2SEx_TxISR_I2SExt+0x94>)
 80037e8:	e001      	b.n	80037ee <I2SEx_TxISR_I2SExt+0x26>
 80037ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ee:	460a      	mov	r2, r1
 80037f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d121      	bne.n	800384e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a12      	ldr	r2, [pc, #72]	; (8003858 <I2SEx_TxISR_I2SExt+0x90>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d101      	bne.n	8003818 <I2SEx_TxISR_I2SExt+0x50>
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <I2SEx_TxISR_I2SExt+0x94>)
 8003816:	e001      	b.n	800381c <I2SEx_TxISR_I2SExt+0x54>
 8003818:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	490d      	ldr	r1, [pc, #52]	; (8003858 <I2SEx_TxISR_I2SExt+0x90>)
 8003824:	428b      	cmp	r3, r1
 8003826:	d101      	bne.n	800382c <I2SEx_TxISR_I2SExt+0x64>
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <I2SEx_TxISR_I2SExt+0x94>)
 800382a:	e001      	b.n	8003830 <I2SEx_TxISR_I2SExt+0x68>
 800382c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003830:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003834:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ff83 	bl	8003754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40003800 	.word	0x40003800
 800385c:	40003400 	.word	0x40003400

08003860 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68d8      	ldr	r0, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	1c99      	adds	r1, r3, #2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003878:	b282      	uxth	r2, r0
 800387a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d113      	bne.n	80038bc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038a2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff ff4c 	bl	8003754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a20      	ldr	r2, [pc, #128]	; (8003954 <I2SEx_RxISR_I2SExt+0x90>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <I2SEx_RxISR_I2SExt+0x16>
 80038d6:	4b20      	ldr	r3, [pc, #128]	; (8003958 <I2SEx_RxISR_I2SExt+0x94>)
 80038d8:	e001      	b.n	80038de <I2SEx_RxISR_I2SExt+0x1a>
 80038da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038de:	68d8      	ldr	r0, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	1c99      	adds	r1, r3, #2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038ea:	b282      	uxth	r2, r0
 80038ec:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d121      	bne.n	800394a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a12      	ldr	r2, [pc, #72]	; (8003954 <I2SEx_RxISR_I2SExt+0x90>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d101      	bne.n	8003914 <I2SEx_RxISR_I2SExt+0x50>
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <I2SEx_RxISR_I2SExt+0x94>)
 8003912:	e001      	b.n	8003918 <I2SEx_RxISR_I2SExt+0x54>
 8003914:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	490d      	ldr	r1, [pc, #52]	; (8003954 <I2SEx_RxISR_I2SExt+0x90>)
 8003920:	428b      	cmp	r3, r1
 8003922:	d101      	bne.n	8003928 <I2SEx_RxISR_I2SExt+0x64>
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <I2SEx_RxISR_I2SExt+0x94>)
 8003926:	e001      	b.n	800392c <I2SEx_RxISR_I2SExt+0x68>
 8003928:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003930:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d106      	bne.n	800394a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ff05 	bl	8003754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40003800 	.word	0x40003800
 8003958:	40003400 	.word	0x40003400

0800395c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e267      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d075      	beq.n	8003a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800397a:	4b88      	ldr	r3, [pc, #544]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b04      	cmp	r3, #4
 8003984:	d00c      	beq.n	80039a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003986:	4b85      	ldr	r3, [pc, #532]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800398e:	2b08      	cmp	r3, #8
 8003990:	d112      	bne.n	80039b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003992:	4b82      	ldr	r3, [pc, #520]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399e:	d10b      	bne.n	80039b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	4b7e      	ldr	r3, [pc, #504]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d05b      	beq.n	8003a64 <HAL_RCC_OscConfig+0x108>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d157      	bne.n	8003a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e242      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c0:	d106      	bne.n	80039d0 <HAL_RCC_OscConfig+0x74>
 80039c2:	4b76      	ldr	r3, [pc, #472]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a75      	ldr	r2, [pc, #468]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e01d      	b.n	8003a0c <HAL_RCC_OscConfig+0xb0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x98>
 80039da:	4b70      	ldr	r3, [pc, #448]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a6f      	ldr	r2, [pc, #444]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	4b6d      	ldr	r3, [pc, #436]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6c      	ldr	r2, [pc, #432]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e00b      	b.n	8003a0c <HAL_RCC_OscConfig+0xb0>
 80039f4:	4b69      	ldr	r3, [pc, #420]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a68      	ldr	r2, [pc, #416]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b66      	ldr	r3, [pc, #408]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a65      	ldr	r2, [pc, #404]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d013      	beq.n	8003a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fd fad2 	bl	8000fbc <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fd face 	bl	8000fbc <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	; 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e207      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	4b5b      	ldr	r3, [pc, #364]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0xc0>
 8003a3a:	e014      	b.n	8003a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fd fabe 	bl	8000fbc <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a44:	f7fd faba 	bl	8000fbc <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e1f3      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a56:	4b51      	ldr	r3, [pc, #324]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0xe8>
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d063      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a72:	4b4a      	ldr	r3, [pc, #296]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a7e:	4b47      	ldr	r3, [pc, #284]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d11c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8a:	4b44      	ldr	r3, [pc, #272]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d116      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a96:	4b41      	ldr	r3, [pc, #260]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_RCC_OscConfig+0x152>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d001      	beq.n	8003aae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e1c7      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aae:	4b3b      	ldr	r3, [pc, #236]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4937      	ldr	r1, [pc, #220]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac2:	e03a      	b.n	8003b3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d020      	beq.n	8003b0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003acc:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <HAL_RCC_OscConfig+0x244>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad2:	f7fd fa73 	bl	8000fbc <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ada:	f7fd fa6f 	bl	8000fbc <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e1a8      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aec:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af8:	4b28      	ldr	r3, [pc, #160]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4925      	ldr	r1, [pc, #148]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]
 8003b0c:	e015      	b.n	8003b3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b0e:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_RCC_OscConfig+0x244>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fd fa52 	bl	8000fbc <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1c:	f7fd fa4e 	bl	8000fbc <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e187      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d036      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d016      	beq.n	8003b7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b4e:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <HAL_RCC_OscConfig+0x248>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b54:	f7fd fa32 	bl	8000fbc <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5c:	f7fd fa2e 	bl	8000fbc <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e167      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x200>
 8003b7a:	e01b      	b.n	8003bb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b7c:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <HAL_RCC_OscConfig+0x248>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b82:	f7fd fa1b 	bl	8000fbc <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b88:	e00e      	b.n	8003ba8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8a:	f7fd fa17 	bl	8000fbc <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d907      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e150      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	42470000 	.word	0x42470000
 8003ba4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba8:	4b88      	ldr	r3, [pc, #544]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1ea      	bne.n	8003b8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8097 	beq.w	8003cf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc6:	4b81      	ldr	r3, [pc, #516]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10f      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	4b7d      	ldr	r3, [pc, #500]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	4a7c      	ldr	r2, [pc, #496]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
 8003be2:	4b7a      	ldr	r3, [pc, #488]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf2:	4b77      	ldr	r3, [pc, #476]	; (8003dd0 <HAL_RCC_OscConfig+0x474>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d118      	bne.n	8003c30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfe:	4b74      	ldr	r3, [pc, #464]	; (8003dd0 <HAL_RCC_OscConfig+0x474>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a73      	ldr	r2, [pc, #460]	; (8003dd0 <HAL_RCC_OscConfig+0x474>)
 8003c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0a:	f7fd f9d7 	bl	8000fbc <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c12:	f7fd f9d3 	bl	8000fbc <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e10c      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c24:	4b6a      	ldr	r3, [pc, #424]	; (8003dd0 <HAL_RCC_OscConfig+0x474>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x2ea>
 8003c38:	4b64      	ldr	r3, [pc, #400]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	4a63      	ldr	r2, [pc, #396]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	6713      	str	r3, [r2, #112]	; 0x70
 8003c44:	e01c      	b.n	8003c80 <HAL_RCC_OscConfig+0x324>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b05      	cmp	r3, #5
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x30c>
 8003c4e:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	4a5e      	ldr	r2, [pc, #376]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c54:	f043 0304 	orr.w	r3, r3, #4
 8003c58:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5a:	4b5c      	ldr	r3, [pc, #368]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	4a5b      	ldr	r2, [pc, #364]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70
 8003c66:	e00b      	b.n	8003c80 <HAL_RCC_OscConfig+0x324>
 8003c68:	4b58      	ldr	r3, [pc, #352]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	4a57      	ldr	r2, [pc, #348]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	6713      	str	r3, [r2, #112]	; 0x70
 8003c74:	4b55      	ldr	r3, [pc, #340]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	4a54      	ldr	r2, [pc, #336]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c7a:	f023 0304 	bic.w	r3, r3, #4
 8003c7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d015      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c88:	f7fd f998 	bl	8000fbc <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c90:	f7fd f994 	bl	8000fbc <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e0cb      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca6:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0ee      	beq.n	8003c90 <HAL_RCC_OscConfig+0x334>
 8003cb2:	e014      	b.n	8003cde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb4:	f7fd f982 	bl	8000fbc <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cbc:	f7fd f97e 	bl	8000fbc <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e0b5      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd2:	4b3e      	ldr	r3, [pc, #248]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1ee      	bne.n	8003cbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d105      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce4:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	4a38      	ldr	r2, [pc, #224]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80a1 	beq.w	8003e3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cfa:	4b34      	ldr	r3, [pc, #208]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d05c      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d141      	bne.n	8003d92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0e:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <HAL_RCC_OscConfig+0x478>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fd f952 	bl	8000fbc <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fd f94e 	bl	8000fbc <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e087      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2e:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69da      	ldr	r2, [r3, #28]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	019b      	lsls	r3, r3, #6
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	3b01      	subs	r3, #1
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	491b      	ldr	r1, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCC_OscConfig+0x478>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6a:	f7fd f927 	bl	8000fbc <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d72:	f7fd f923 	bl	8000fbc <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e05c      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d84:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x416>
 8003d90:	e054      	b.n	8003e3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_RCC_OscConfig+0x478>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7fd f910 	bl	8000fbc <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da0:	f7fd f90c 	bl	8000fbc <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e045      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0x444>
 8003dbe:	e03d      	b.n	8003e3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e038      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <HAL_RCC_OscConfig+0x4ec>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d028      	beq.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d121      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d11a      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e08:	4013      	ands	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d111      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	3b01      	subs	r3, #1
 8003e22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800

08003e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0cc      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e60:	4b68      	ldr	r3, [pc, #416]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d90c      	bls.n	8003e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b65      	ldr	r3, [pc, #404]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b63      	ldr	r3, [pc, #396]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0b8      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d020      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea0:	4b59      	ldr	r3, [pc, #356]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4a58      	ldr	r2, [pc, #352]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb8:	4b53      	ldr	r3, [pc, #332]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a52      	ldr	r2, [pc, #328]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec4:	4b50      	ldr	r3, [pc, #320]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	494d      	ldr	r1, [pc, #308]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d044      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	4b47      	ldr	r3, [pc, #284]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d119      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e07f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d003      	beq.n	8003f0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d107      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0a:	4b3f      	ldr	r3, [pc, #252]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e06f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1a:	4b3b      	ldr	r3, [pc, #236]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e067      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2a:	4b37      	ldr	r3, [pc, #220]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f023 0203 	bic.w	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4934      	ldr	r1, [pc, #208]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f3c:	f7fd f83e 	bl	8000fbc <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f44:	f7fd f83a 	bl	8000fbc <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e04f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5a:	4b2b      	ldr	r3, [pc, #172]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 020c 	and.w	r2, r3, #12
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d1eb      	bne.n	8003f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d20c      	bcs.n	8003f94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b22      	ldr	r3, [pc, #136]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b20      	ldr	r3, [pc, #128]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e032      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa0:	4b19      	ldr	r3, [pc, #100]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4916      	ldr	r1, [pc, #88]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	490e      	ldr	r1, [pc, #56]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fd2:	f000 f821 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	490a      	ldr	r1, [pc, #40]	; (800400c <HAL_RCC_ClockConfig+0x1c0>)
 8003fe4:	5ccb      	ldrb	r3, [r1, r3]
 8003fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fea:	4a09      	ldr	r2, [pc, #36]	; (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fee:	4b09      	ldr	r3, [pc, #36]	; (8004014 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fc ffa0 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40023c00 	.word	0x40023c00
 8004008:	40023800 	.word	0x40023800
 800400c:	08006de4 	.word	0x08006de4
 8004010:	20000000 	.word	0x20000000
 8004014:	20000004 	.word	0x20000004

08004018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800401c:	b094      	sub	sp, #80	; 0x50
 800401e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	647b      	str	r3, [r7, #68]	; 0x44
 8004024:	2300      	movs	r3, #0
 8004026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004028:	2300      	movs	r3, #0
 800402a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004030:	4b7c      	ldr	r3, [pc, #496]	; (8004224 <HAL_RCC_GetSysClockFreq+0x20c>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 030c 	and.w	r3, r3, #12
 8004038:	2b08      	cmp	r3, #8
 800403a:	d00d      	beq.n	8004058 <HAL_RCC_GetSysClockFreq+0x40>
 800403c:	2b08      	cmp	r3, #8
 800403e:	f200 80e7 	bhi.w	8004210 <HAL_RCC_GetSysClockFreq+0x1f8>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x34>
 8004046:	2b04      	cmp	r3, #4
 8004048:	d003      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x3a>
 800404a:	e0e1      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800404c:	4b76      	ldr	r3, [pc, #472]	; (8004228 <HAL_RCC_GetSysClockFreq+0x210>)
 800404e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004050:	e0e1      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004052:	4b76      	ldr	r3, [pc, #472]	; (800422c <HAL_RCC_GetSysClockFreq+0x214>)
 8004054:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004056:	e0de      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004058:	4b72      	ldr	r3, [pc, #456]	; (8004224 <HAL_RCC_GetSysClockFreq+0x20c>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004060:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004062:	4b70      	ldr	r3, [pc, #448]	; (8004224 <HAL_RCC_GetSysClockFreq+0x20c>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d065      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406e:	4b6d      	ldr	r3, [pc, #436]	; (8004224 <HAL_RCC_GetSysClockFreq+0x20c>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	099b      	lsrs	r3, r3, #6
 8004074:	2200      	movs	r2, #0
 8004076:	63bb      	str	r3, [r7, #56]	; 0x38
 8004078:	63fa      	str	r2, [r7, #60]	; 0x3c
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004080:	633b      	str	r3, [r7, #48]	; 0x30
 8004082:	2300      	movs	r3, #0
 8004084:	637b      	str	r3, [r7, #52]	; 0x34
 8004086:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800408a:	4622      	mov	r2, r4
 800408c:	462b      	mov	r3, r5
 800408e:	f04f 0000 	mov.w	r0, #0
 8004092:	f04f 0100 	mov.w	r1, #0
 8004096:	0159      	lsls	r1, r3, #5
 8004098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800409c:	0150      	lsls	r0, r2, #5
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4621      	mov	r1, r4
 80040a4:	1a51      	subs	r1, r2, r1
 80040a6:	6139      	str	r1, [r7, #16]
 80040a8:	4629      	mov	r1, r5
 80040aa:	eb63 0301 	sbc.w	r3, r3, r1
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040bc:	4659      	mov	r1, fp
 80040be:	018b      	lsls	r3, r1, #6
 80040c0:	4651      	mov	r1, sl
 80040c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040c6:	4651      	mov	r1, sl
 80040c8:	018a      	lsls	r2, r1, #6
 80040ca:	46d4      	mov	ip, sl
 80040cc:	ebb2 080c 	subs.w	r8, r2, ip
 80040d0:	4659      	mov	r1, fp
 80040d2:	eb63 0901 	sbc.w	r9, r3, r1
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ea:	4690      	mov	r8, r2
 80040ec:	4699      	mov	r9, r3
 80040ee:	4623      	mov	r3, r4
 80040f0:	eb18 0303 	adds.w	r3, r8, r3
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	462b      	mov	r3, r5
 80040f8:	eb49 0303 	adc.w	r3, r9, r3
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800410a:	4629      	mov	r1, r5
 800410c:	024b      	lsls	r3, r1, #9
 800410e:	4620      	mov	r0, r4
 8004110:	4629      	mov	r1, r5
 8004112:	4604      	mov	r4, r0
 8004114:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004118:	4601      	mov	r1, r0
 800411a:	024a      	lsls	r2, r1, #9
 800411c:	4610      	mov	r0, r2
 800411e:	4619      	mov	r1, r3
 8004120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004122:	2200      	movs	r2, #0
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
 8004126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800412c:	f7fc f84c 	bl	80001c8 <__aeabi_uldivmod>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4613      	mov	r3, r2
 8004136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004138:	e05c      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413a:	4b3a      	ldr	r3, [pc, #232]	; (8004224 <HAL_RCC_GetSysClockFreq+0x20c>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	099b      	lsrs	r3, r3, #6
 8004140:	2200      	movs	r2, #0
 8004142:	4618      	mov	r0, r3
 8004144:	4611      	mov	r1, r2
 8004146:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800414a:	623b      	str	r3, [r7, #32]
 800414c:	2300      	movs	r3, #0
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
 8004150:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	f04f 0000 	mov.w	r0, #0
 800415c:	f04f 0100 	mov.w	r1, #0
 8004160:	0159      	lsls	r1, r3, #5
 8004162:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004166:	0150      	lsls	r0, r2, #5
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	46c4      	mov	ip, r8
 800416e:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004172:	4640      	mov	r0, r8
 8004174:	4649      	mov	r1, r9
 8004176:	468c      	mov	ip, r1
 8004178:	eb63 0b0c 	sbc.w	fp, r3, ip
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004188:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800418c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004190:	ebb2 040a 	subs.w	r4, r2, sl
 8004194:	eb63 050b 	sbc.w	r5, r3, fp
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	00eb      	lsls	r3, r5, #3
 80041a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041a6:	00e2      	lsls	r2, r4, #3
 80041a8:	4614      	mov	r4, r2
 80041aa:	461d      	mov	r5, r3
 80041ac:	4603      	mov	r3, r0
 80041ae:	18e3      	adds	r3, r4, r3
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	460b      	mov	r3, r1
 80041b4:	eb45 0303 	adc.w	r3, r5, r3
 80041b8:	607b      	str	r3, [r7, #4]
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041c6:	4629      	mov	r1, r5
 80041c8:	028b      	lsls	r3, r1, #10
 80041ca:	4620      	mov	r0, r4
 80041cc:	4629      	mov	r1, r5
 80041ce:	4604      	mov	r4, r0
 80041d0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80041d4:	4601      	mov	r1, r0
 80041d6:	028a      	lsls	r2, r1, #10
 80041d8:	4610      	mov	r0, r2
 80041da:	4619      	mov	r1, r3
 80041dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041de:	2200      	movs	r2, #0
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	61fa      	str	r2, [r7, #28]
 80041e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e8:	f7fb ffee 	bl	80001c8 <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4613      	mov	r3, r2
 80041f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_GetSysClockFreq+0x20c>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800420e:	e002      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RCC_GetSysClockFreq+0x210>)
 8004212:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004218:	4618      	mov	r0, r3
 800421a:	3750      	adds	r7, #80	; 0x50
 800421c:	46bd      	mov	sp, r7
 800421e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800
 8004228:	00f42400 	.word	0x00f42400
 800422c:	007a1200 	.word	0x007a1200

08004230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004234:	4b02      	ldr	r3, [pc, #8]	; (8004240 <HAL_RCC_GetHCLKFreq+0x10>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr
 8004240:	20000000 	.word	0x20000000

08004244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004248:	f7ff fff2 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 800424c:	4602      	mov	r2, r0
 800424e:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	0a9b      	lsrs	r3, r3, #10
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	4903      	ldr	r1, [pc, #12]	; (8004268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800425a:	5ccb      	ldrb	r3, [r1, r3]
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004260:	4618      	mov	r0, r3
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40023800 	.word	0x40023800
 8004268:	08006df4 	.word	0x08006df4

0800426c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d105      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004290:	2b00      	cmp	r3, #0
 8004292:	d035      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004294:	4b62      	ldr	r3, [pc, #392]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800429a:	f7fc fe8f 	bl	8000fbc <HAL_GetTick>
 800429e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a0:	e008      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042a2:	f7fc fe8b 	bl	8000fbc <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0b0      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042b4:	4b5b      	ldr	r3, [pc, #364]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1f0      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	019a      	lsls	r2, r3, #6
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	071b      	lsls	r3, r3, #28
 80042cc:	4955      	ldr	r1, [pc, #340]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042d4:	4b52      	ldr	r3, [pc, #328]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042da:	f7fc fe6f 	bl	8000fbc <HAL_GetTick>
 80042de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042e2:	f7fc fe6b 	bl	8000fbc <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e090      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042f4:	4b4b      	ldr	r3, [pc, #300]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 8083 	beq.w	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	4b44      	ldr	r3, [pc, #272]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	4a43      	ldr	r2, [pc, #268]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431c:	6413      	str	r3, [r2, #64]	; 0x40
 800431e:	4b41      	ldr	r3, [pc, #260]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800432a:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a3e      	ldr	r2, [pc, #248]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004334:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004336:	f7fc fe41 	bl	8000fbc <HAL_GetTick>
 800433a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800433e:	f7fc fe3d 	bl	8000fbc <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e062      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004350:	4b35      	ldr	r3, [pc, #212]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800435c:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004364:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d02f      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	429a      	cmp	r2, r3
 8004378:	d028      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800437a:	4b2a      	ldr	r3, [pc, #168]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004382:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004384:	4b29      	ldr	r3, [pc, #164]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004386:	2201      	movs	r2, #1
 8004388:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800438a:	4b28      	ldr	r3, [pc, #160]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004390:	4a24      	ldr	r2, [pc, #144]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004396:	4b23      	ldr	r3, [pc, #140]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d114      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043a2:	f7fc fe0b 	bl	8000fbc <HAL_GetTick>
 80043a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a8:	e00a      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043aa:	f7fc fe07 	bl	8000fbc <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e02a      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c0:	4b18      	ldr	r3, [pc, #96]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0ee      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043d8:	d10d      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043da:	4b12      	ldr	r3, [pc, #72]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ee:	490d      	ldr	r1, [pc, #52]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	608b      	str	r3, [r1, #8]
 80043f4:	e005      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043f6:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	4a0a      	ldr	r2, [pc, #40]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004400:	6093      	str	r3, [r2, #8]
 8004402:	4b08      	ldr	r3, [pc, #32]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004404:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800440e:	4905      	ldr	r1, [pc, #20]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004410:	4313      	orrs	r3, r2
 8004412:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	42470068 	.word	0x42470068
 8004424:	40023800 	.word	0x40023800
 8004428:	40007000 	.word	0x40007000
 800442c:	42470e40 	.word	0x42470e40

08004430 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d13e      	bne.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800444e:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d12f      	bne.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004464:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004466:	617b      	str	r3, [r7, #20]
          break;
 8004468:	e02f      	b.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800446a:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004476:	d108      	bne.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004478:	4b17      	ldr	r3, [pc, #92]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004480:	4a17      	ldr	r2, [pc, #92]	; (80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004482:	fbb2 f3f3 	udiv	r3, r2, r3
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	e007      	b.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004492:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004494:	fbb2 f3f3 	udiv	r3, r2, r3
 8004498:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800449a:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800449c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a0:	099b      	lsrs	r3, r3, #6
 80044a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044ae:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b4:	0f1b      	lsrs	r3, r3, #28
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	617b      	str	r3, [r7, #20]
          break;
 80044c2:	e002      	b.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
          break;
 80044c8:	bf00      	nop
        }
      }
      break;
 80044ca:	bf00      	nop
    }
  }
  return frequency;
 80044cc:	697b      	ldr	r3, [r7, #20]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	40023800 	.word	0x40023800
 80044dc:	00bb8000 	.word	0x00bb8000
 80044e0:	007a1200 	.word	0x007a1200
 80044e4:	00f42400 	.word	0x00f42400

080044e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e07b      	b.n	80045f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d108      	bne.n	8004514 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800450a:	d009      	beq.n	8004520 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	61da      	str	r2, [r3, #28]
 8004512:	e005      	b.n	8004520 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fc fbfa 	bl	8000d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004556:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a4:	ea42 0103 	orr.w	r1, r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	0c1b      	lsrs	r3, r3, #16
 80045be:	f003 0104 	and.w	r1, r3, #4
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	f003 0210 	and.w	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045fa:	b084      	sub	sp, #16
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	f107 001c 	add.w	r0, r7, #28
 8004608:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	2b01      	cmp	r3, #1
 8004610:	d122      	bne.n	8004658 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800463a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463c:	2b01      	cmp	r3, #1
 800463e:	d105      	bne.n	800464c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f9b9 	bl	80049c4 <USB_CoreReset>
 8004652:	4603      	mov	r3, r0
 8004654:	73fb      	strb	r3, [r7, #15]
 8004656:	e01a      	b.n	800468e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f9ad 	bl	80049c4 <USB_CoreReset>
 800466a:	4603      	mov	r3, r0
 800466c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800466e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d106      	bne.n	8004682 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	639a      	str	r2, [r3, #56]	; 0x38
 8004680:	e005      	b.n	800468e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	2b01      	cmp	r3, #1
 8004692:	d10b      	bne.n	80046ac <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f043 0206 	orr.w	r2, r3, #6
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f043 0220 	orr.w	r2, r3, #32
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046b8:	b004      	add	sp, #16
 80046ba:	4770      	bx	lr

080046bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f043 0201 	orr.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f023 0201 	bic.w	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d115      	bne.n	800474a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800472a:	2001      	movs	r0, #1
 800472c:	f7fc fc50 	bl	8000fd0 <HAL_Delay>
      ms++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f936 	bl	80049a8 <USB_GetMode>
 800473c:	4603      	mov	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d01e      	beq.n	8004780 <USB_SetCurrentMode+0x84>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b31      	cmp	r3, #49	; 0x31
 8004746:	d9f0      	bls.n	800472a <USB_SetCurrentMode+0x2e>
 8004748:	e01a      	b.n	8004780 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d115      	bne.n	800477c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800475c:	2001      	movs	r0, #1
 800475e:	f7fc fc37 	bl	8000fd0 <HAL_Delay>
      ms++;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3301      	adds	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f91d 	bl	80049a8 <USB_GetMode>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <USB_SetCurrentMode+0x84>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b31      	cmp	r3, #49	; 0x31
 8004778:	d9f0      	bls.n	800475c <USB_SetCurrentMode+0x60>
 800477a:	e001      	b.n	8004780 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e005      	b.n	800478c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b32      	cmp	r3, #50	; 0x32
 8004784:	d101      	bne.n	800478a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3301      	adds	r3, #1
 80047a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a13      	ldr	r2, [pc, #76]	; (80047f8 <USB_FlushTxFifo+0x64>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d901      	bls.n	80047b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e01b      	b.n	80047ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	daf2      	bge.n	80047a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	019b      	lsls	r3, r3, #6
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3301      	adds	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <USB_FlushTxFifo+0x64>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e006      	b.n	80047ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d0f0      	beq.n	80047cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	00030d40 	.word	0x00030d40

080047fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3301      	adds	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4a11      	ldr	r2, [pc, #68]	; (8004858 <USB_FlushRxFifo+0x5c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d901      	bls.n	800481a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e018      	b.n	800484c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	daf2      	bge.n	8004808 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2210      	movs	r2, #16
 800482a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3301      	adds	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4a08      	ldr	r2, [pc, #32]	; (8004858 <USB_FlushRxFifo+0x5c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e006      	b.n	800484c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b10      	cmp	r3, #16
 8004848:	d0f0      	beq.n	800482c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	00030d40 	.word	0x00030d40

0800485c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800485c:	b480      	push	{r7}
 800485e:	b089      	sub	sp, #36	; 0x24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	4611      	mov	r1, r2
 8004868:	461a      	mov	r2, r3
 800486a:	460b      	mov	r3, r1
 800486c:	71fb      	strb	r3, [r7, #7]
 800486e:	4613      	mov	r3, r2
 8004870:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800487a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800487e:	2b00      	cmp	r3, #0
 8004880:	d123      	bne.n	80048ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004882:	88bb      	ldrh	r3, [r7, #4]
 8004884:	3303      	adds	r3, #3
 8004886:	089b      	lsrs	r3, r3, #2
 8004888:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800488a:	2300      	movs	r3, #0
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	e018      	b.n	80048c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	031a      	lsls	r2, r3, #12
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	4413      	add	r3, r2
 8004898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800489c:	461a      	mov	r2, r3
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	3301      	adds	r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	3301      	adds	r3, #1
 80048ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	3301      	adds	r3, #1
 80048b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3301      	adds	r3, #1
 80048ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	3301      	adds	r3, #1
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d3e2      	bcc.n	8004890 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3724      	adds	r7, #36	; 0x24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr

080048d6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b08b      	sub	sp, #44	; 0x2c
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	4613      	mov	r3, r2
 80048e2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80048ec:	88fb      	ldrh	r3, [r7, #6]
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80048f4:	88fb      	ldrh	r3, [r7, #6]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80048fc:	2300      	movs	r3, #0
 80048fe:	623b      	str	r3, [r7, #32]
 8004900:	e014      	b.n	800492c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	601a      	str	r2, [r3, #0]
    pDest++;
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	3301      	adds	r3, #1
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	3301      	adds	r3, #1
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	3301      	adds	r3, #1
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	3301      	adds	r3, #1
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	3301      	adds	r3, #1
 800492a:	623b      	str	r3, [r7, #32]
 800492c:	6a3a      	ldr	r2, [r7, #32]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	429a      	cmp	r2, r3
 8004932:	d3e6      	bcc.n	8004902 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004934:	8bfb      	ldrh	r3, [r7, #30]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01e      	beq.n	8004978 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004944:	461a      	mov	r2, r3
 8004946:	f107 0310 	add.w	r3, r7, #16
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	fa22 f303 	lsr.w	r3, r2, r3
 800495a:	b2da      	uxtb	r2, r3
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	701a      	strb	r2, [r3, #0]
      i++;
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	3301      	adds	r3, #1
 8004964:	623b      	str	r3, [r7, #32]
      pDest++;
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	3301      	adds	r3, #1
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800496c:	8bfb      	ldrh	r3, [r7, #30]
 800496e:	3b01      	subs	r3, #1
 8004970:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004972:	8bfb      	ldrh	r3, [r7, #30]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1ea      	bne.n	800494e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800497a:	4618      	mov	r0, r3
 800497c:	372c      	adds	r7, #44	; 0x2c
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4013      	ands	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800499c:	68fb      	ldr	r3, [r7, #12]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr

080049a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f003 0301 	and.w	r3, r3, #1
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr
	...

080049c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3301      	adds	r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <USB_CoreReset+0x60>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e01b      	b.n	8004a1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	daf2      	bge.n	80049d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f043 0201 	orr.w	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3301      	adds	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a08      	ldr	r2, [pc, #32]	; (8004a24 <USB_CoreReset+0x60>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d901      	bls.n	8004a0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e006      	b.n	8004a1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d0f0      	beq.n	80049fa <USB_CoreReset+0x36>

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr
 8004a24:	00030d40 	.word	0x00030d40

08004a28 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a28:	b084      	sub	sp, #16
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b086      	sub	sp, #24
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d018      	beq.n	8004ab0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d10a      	bne.n	8004a9a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a92:	f043 0304 	orr.w	r3, r3, #4
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	e014      	b.n	8004ac4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004aa8:	f023 0304 	bic.w	r3, r3, #4
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	e009      	b.n	8004ac4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004abe:	f023 0304 	bic.w	r3, r3, #4
 8004ac2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ac4:	2110      	movs	r1, #16
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fe64 	bl	8004794 <USB_FlushTxFifo>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff fe90 	bl	80047fc <USB_FlushRxFifo>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	e015      	b.n	8004b18 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af8:	461a      	mov	r2, r3
 8004afa:	f04f 33ff 	mov.w	r3, #4294967295
 8004afe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	3301      	adds	r3, #1
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d3e5      	bcc.n	8004aec <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b40:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <USB_HostInit+0x16c>)
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <USB_HostInit+0x170>)
 8004b4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b50:	e009      	b.n	8004b66 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2280      	movs	r2, #128	; 0x80
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a10      	ldr	r2, [pc, #64]	; (8004b9c <USB_HostInit+0x174>)
 8004b5c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a0f      	ldr	r2, [pc, #60]	; (8004ba0 <USB_HostInit+0x178>)
 8004b62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f043 0210 	orr.w	r2, r3, #16
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699a      	ldr	r2, [r3, #24]
 8004b7c:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <USB_HostInit+0x17c>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b90:	b004      	add	sp, #16
 8004b92:	4770      	bx	lr
 8004b94:	01000200 	.word	0x01000200
 8004b98:	00e00300 	.word	0x00e00300
 8004b9c:	00600080 	.word	0x00600080
 8004ba0:	004000e0 	.word	0x004000e0
 8004ba4:	a3200008 	.word	0xa3200008

08004ba8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bc6:	f023 0303 	bic.w	r3, r3, #3
 8004bca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	68f9      	ldr	r1, [r7, #12]
 8004bdc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004be0:	4313      	orrs	r3, r2
 8004be2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d107      	bne.n	8004bfa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bf6:	6053      	str	r3, [r2, #4]
 8004bf8:	e009      	b.n	8004c0e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d106      	bne.n	8004c0e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c06:	461a      	mov	r2, r3
 8004c08:	f241 7370 	movw	r3, #6000	; 0x1770
 8004c0c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr

08004c1a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	460b      	mov	r3, r1
 8004c24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c3e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <USB_DriveVbus+0x44>
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d106      	bne.n	8004c5e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c5c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c68:	d109      	bne.n	8004c7e <USB_DriveVbus+0x64>
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c7c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bc80      	pop	{r7}
 8004c88:	4770      	bx	lr

08004c8a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	0c5b      	lsrs	r3, r3, #17
 8004ca8:	f003 0303 	and.w	r3, r3, #3
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b085      	sub	sp, #20
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	b29b      	uxth	r3, r3
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr
	...

08004cd8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	70fb      	strb	r3, [r7, #3]
 8004cea:	460b      	mov	r3, r1
 8004cec:	70bb      	strb	r3, [r7, #2]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d06:	461a      	mov	r2, r3
 8004d08:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d87e      	bhi.n	8004e14 <USB_HC_Init+0x13c>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <USB_HC_Init+0x44>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d2d 	.word	0x08004d2d
 8004d20:	08004dd7 	.word	0x08004dd7
 8004d24:	08004d2d 	.word	0x08004d2d
 8004d28:	08004d99 	.word	0x08004d99
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da10      	bge.n	8004d6a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	0151      	lsls	r1, r2, #5
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d66:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004d68:	e057      	b.n	8004e1a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d051      	beq.n	8004e1a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	78fa      	ldrb	r2, [r7, #3]
 8004d86:	0151      	lsls	r1, r2, #5
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	440a      	add	r2, r1
 8004d8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d94:	60d3      	str	r3, [r2, #12]
      break;
 8004d96:	e040      	b.n	8004e1a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da4:	461a      	mov	r2, r3
 8004da6:	f240 639d 	movw	r3, #1693	; 0x69d
 8004daa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004dac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	da34      	bge.n	8004e1e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004dd4:	e023      	b.n	8004e1e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dd6:	78fb      	ldrb	r3, [r7, #3]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de2:	461a      	mov	r2, r3
 8004de4:	f240 2325 	movw	r3, #549	; 0x225
 8004de8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004dea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	da17      	bge.n	8004e22 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	78fa      	ldrb	r2, [r7, #3]
 8004e02:	0151      	lsls	r1, r2, #5
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	440a      	add	r2, r1
 8004e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e0c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e10:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e12:	e006      	b.n	8004e22 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	77fb      	strb	r3, [r7, #31]
      break;
 8004e18:	e004      	b.n	8004e24 <USB_HC_Init+0x14c>
      break;
 8004e1a:	bf00      	nop
 8004e1c:	e002      	b.n	8004e24 <USB_HC_Init+0x14c>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e000      	b.n	8004e24 <USB_HC_Init+0x14c>
      break;
 8004e22:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e3e:	f043 0302 	orr.w	r3, r3, #2
 8004e42:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	2101      	movs	r1, #1
 8004e54:	fa01 f303 	lsl.w	r3, r1, r3
 8004e58:	6939      	ldr	r1, [r7, #16]
 8004e5a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	da03      	bge.n	8004e7e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	e001      	b.n	8004e82 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff ff01 	bl	8004c8a <USB_GetHostSpeed>
 8004e88:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004e8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d106      	bne.n	8004ea0 <USB_HC_Init+0x1c8>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d003      	beq.n	8004ea0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	e001      	b.n	8004ea4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ea4:	787b      	ldrb	r3, [r7, #1]
 8004ea6:	059b      	lsls	r3, r3, #22
 8004ea8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004eac:	78bb      	ldrb	r3, [r7, #2]
 8004eae:	02db      	lsls	r3, r3, #11
 8004eb0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004eb4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004eb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004eba:	049b      	lsls	r3, r3, #18
 8004ebc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ec0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ec2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ec8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	0159      	lsls	r1, r3, #5
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	440b      	add	r3, r1
 8004ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eda:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ee0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004ee2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d003      	beq.n	8004ef2 <USB_HC_Init+0x21a>
 8004eea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d10f      	bne.n	8004f12 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	0151      	lsls	r1, r2, #5
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	440a      	add	r2, r1
 8004f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f10:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f12:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3720      	adds	r7, #32
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08c      	sub	sp, #48	; 0x30
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	785b      	ldrb	r3, [r3, #1]
 8004f32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f38:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d02d      	beq.n	8004fa2 <USB_HC_StartXfer+0x86>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	791b      	ldrb	r3, [r3, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d129      	bne.n	8004fa2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d117      	bne.n	8004f84 <USB_HC_StartXfer+0x68>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	79db      	ldrb	r3, [r3, #7]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <USB_HC_StartXfer+0x48>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	79db      	ldrb	r3, [r3, #7]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d10f      	bne.n	8004f84 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	6a3a      	ldr	r2, [r7, #32]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10b      	bne.n	8004fa2 <USB_HC_StartXfer+0x86>
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	795b      	ldrb	r3, [r3, #5]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d107      	bne.n	8004fa2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	785b      	ldrb	r3, [r3, #1]
 8004f96:	4619      	mov	r1, r3
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fa0d 	bl	80053b8 <USB_DoPing>
      return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e0f8      	b.n	8005194 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d018      	beq.n	8004fdc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	8912      	ldrh	r2, [r2, #8]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	8912      	ldrh	r2, [r2, #8]
 8004fba:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fbe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004fc0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004fc2:	8b7b      	ldrh	r3, [r7, #26]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d90b      	bls.n	8004fe0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004fc8:	8b7b      	ldrh	r3, [r7, #26]
 8004fca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004fcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	8912      	ldrh	r2, [r2, #8]
 8004fd2:	fb03 f202 	mul.w	r2, r3, r2
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	611a      	str	r2, [r3, #16]
 8004fda:	e001      	b.n	8004fe0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	78db      	ldrb	r3, [r3, #3]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d007      	beq.n	8004ff8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004fe8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	8912      	ldrh	r2, [r2, #8]
 8004fee:	fb03 f202 	mul.w	r2, r3, r2
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	611a      	str	r2, [r3, #16]
 8004ff6:	e003      	b.n	8005000 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	695a      	ldr	r2, [r3, #20]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005008:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800500a:	04d9      	lsls	r1, r3, #19
 800500c:	4b63      	ldr	r3, [pc, #396]	; (800519c <USB_HC_StartXfer+0x280>)
 800500e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005010:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	7a9b      	ldrb	r3, [r3, #10]
 8005016:	075b      	lsls	r3, r3, #29
 8005018:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800501c:	69f9      	ldr	r1, [r7, #28]
 800501e:	0148      	lsls	r0, r1, #5
 8005020:	6a39      	ldr	r1, [r7, #32]
 8005022:	4401      	add	r1, r0
 8005024:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005028:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800502a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	68d9      	ldr	r1, [r3, #12]
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	460a      	mov	r2, r1
 8005044:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	4413      	add	r3, r2
 8005066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	6a3a      	ldr	r2, [r7, #32]
 8005072:	440a      	add	r2, r1
 8005074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005078:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800507c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	4413      	add	r3, r2
 8005086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	7e7b      	ldrb	r3, [r7, #25]
 800508e:	075b      	lsls	r3, r3, #29
 8005090:	69f9      	ldr	r1, [r7, #28]
 8005092:	0148      	lsls	r0, r1, #5
 8005094:	6a39      	ldr	r1, [r7, #32]
 8005096:	4401      	add	r1, r0
 8005098:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800509c:	4313      	orrs	r3, r2
 800509e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050b6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	78db      	ldrb	r3, [r3, #3]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d004      	beq.n	80050ca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	e003      	b.n	80050d2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050d0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050d8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e6:	461a      	mov	r2, r3
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e04e      	b.n	8005194 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	78db      	ldrb	r3, [r3, #3]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d149      	bne.n	8005192 <USB_HC_StartXfer+0x276>
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d045      	beq.n	8005192 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	79db      	ldrb	r3, [r3, #7]
 800510a:	2b03      	cmp	r3, #3
 800510c:	d830      	bhi.n	8005170 <USB_HC_StartXfer+0x254>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <USB_HC_StartXfer+0x1f8>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005125 	.word	0x08005125
 8005118:	08005149 	.word	0x08005149
 800511c:	08005125 	.word	0x08005125
 8005120:	08005149 	.word	0x08005149
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	3303      	adds	r3, #3
 800512a:	089b      	lsrs	r3, r3, #2
 800512c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800512e:	8afa      	ldrh	r2, [r7, #22]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	b29b      	uxth	r3, r3
 8005136:	429a      	cmp	r2, r3
 8005138:	d91c      	bls.n	8005174 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	619a      	str	r2, [r3, #24]
        }
        break;
 8005146:	e015      	b.n	8005174 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	3303      	adds	r3, #3
 800514e:	089b      	lsrs	r3, r3, #2
 8005150:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005152:	8afa      	ldrh	r2, [r7, #22]
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	b29b      	uxth	r3, r3
 800515e:	429a      	cmp	r2, r3
 8005160:	d90a      	bls.n	8005178 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	619a      	str	r2, [r3, #24]
        }
        break;
 800516e:	e003      	b.n	8005178 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005170:	bf00      	nop
 8005172:	e002      	b.n	800517a <USB_HC_StartXfer+0x25e>
        break;
 8005174:	bf00      	nop
 8005176:	e000      	b.n	800517a <USB_HC_StartXfer+0x25e>
        break;
 8005178:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	68d9      	ldr	r1, [r3, #12]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	785a      	ldrb	r2, [r3, #1]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	b29b      	uxth	r3, r3
 8005188:	2000      	movs	r0, #0
 800518a:	9000      	str	r0, [sp, #0]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7ff fb65 	bl	800485c <USB_WritePacket>
  }

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3728      	adds	r7, #40	; 0x28
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	1ff80000 	.word	0x1ff80000

080051a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	b29b      	uxth	r3, r3
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr

080051c0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b089      	sub	sp, #36	; 0x24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	0c9b      	lsrs	r3, r3, #18
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	0fdb      	lsrs	r3, r3, #31
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b20      	cmp	r3, #32
 800520e:	d104      	bne.n	800521a <USB_HC_Halt+0x5a>
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	e0c8      	b.n	80053ac <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <USB_HC_Halt+0x66>
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d163      	bne.n	80052ee <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	440a      	add	r2, r1
 800523c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005244:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b00      	cmp	r3, #0
 8005250:	f040 80ab 	bne.w	80053aa <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d133      	bne.n	80052c8 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	440a      	add	r2, r1
 8005276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800527e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	440a      	add	r2, r1
 8005296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800529e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3301      	adds	r3, #1
 80052a4:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052ac:	d81d      	bhi.n	80052ea <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052c4:	d0ec      	beq.n	80052a0 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052c6:	e070      	b.n	80053aa <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	0151      	lsls	r1, r2, #5
 80052da:	69fa      	ldr	r2, [r7, #28]
 80052dc:	440a      	add	r2, r1
 80052de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052e6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052e8:	e05f      	b.n	80053aa <USB_HC_Halt+0x1ea>
            break;
 80052ea:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052ec:	e05d      	b.n	80053aa <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	440a      	add	r2, r1
 8005304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800530c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d133      	bne.n	8005386 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4413      	add	r3, r2
 8005326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	440a      	add	r2, r1
 8005334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005338:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800533c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	4413      	add	r3, r2
 8005346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	440a      	add	r2, r1
 8005354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005358:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800535c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3301      	adds	r3, #1
 8005362:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800536a:	d81d      	bhi.n	80053a8 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	4413      	add	r3, r2
 8005374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800537e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005382:	d0ec      	beq.n	800535e <USB_HC_Halt+0x19e>
 8005384:	e011      	b.n	80053aa <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	440a      	add	r2, r1
 800539c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	e000      	b.n	80053aa <USB_HC_Halt+0x1ea>
          break;
 80053a8:	bf00      	nop
    }
  }

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3724      	adds	r7, #36	; 0x24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr
	...

080053b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80053cc:	2301      	movs	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	04da      	lsls	r2, r3, #19
 80053d4:	4b14      	ldr	r3, [pc, #80]	; (8005428 <USB_DoPing+0x70>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005400:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005408:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	4413      	add	r3, r2
 8005412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005416:	461a      	mov	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr
 8005428:	1ff80000 	.word	0x1ff80000

0800542c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff f94b 	bl	80046dc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005446:	2110      	movs	r1, #16
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff f9a3 	bl	8004794 <USB_FlushTxFifo>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff f9cf 	bl	80047fc <USB_FlushRxFifo>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005468:	2300      	movs	r3, #0
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	e01f      	b.n	80054ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	4413      	add	r3, r2
 8005476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005484:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800548c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005494:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	4413      	add	r3, r2
 800549e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a2:	461a      	mov	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	3301      	adds	r3, #1
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b0f      	cmp	r3, #15
 80054b2:	d9dc      	bls.n	800546e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80054b4:	2300      	movs	r3, #0
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	e034      	b.n	8005524 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ee:	461a      	mov	r2, r3
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3301      	adds	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005500:	d80c      	bhi.n	800551c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	4413      	add	r3, r2
 800550a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005518:	d0ec      	beq.n	80054f4 <USB_StopHost+0xc8>
 800551a:	e000      	b.n	800551e <USB_StopHost+0xf2>
        break;
 800551c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	3301      	adds	r3, #1
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b0f      	cmp	r3, #15
 8005528:	d9c7      	bls.n	80054ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005530:	461a      	mov	r2, r3
 8005532:	f04f 33ff 	mov.w	r3, #4294967295
 8005536:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f04f 32ff 	mov.w	r2, #4294967295
 800553e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff f8bb 	bl	80046bc <USB_EnableGlobalInt>

  return ret;
 8005546:	7ffb      	ldrb	r3, [r7, #31]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3720      	adds	r7, #32
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005550:	b590      	push	{r4, r7, lr}
 8005552:	b089      	sub	sp, #36	; 0x24
 8005554:	af04      	add	r7, sp, #16
 8005556:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005558:	2301      	movs	r3, #1
 800555a:	2202      	movs	r2, #2
 800555c:	2102      	movs	r1, #2
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fc5f 	bl	8005e22 <USBH_FindInterface>
 8005564:	4603      	mov	r3, r0
 8005566:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2bff      	cmp	r3, #255	; 0xff
 800556c:	d002      	beq.n	8005574 <USBH_CDC_InterfaceInit+0x24>
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d901      	bls.n	8005578 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005574:	2302      	movs	r3, #2
 8005576:	e13d      	b.n	80057f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fc35 	bl	8005dec <USBH_SelectInterface>
 8005582:	4603      	mov	r3, r0
 8005584:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005586:	7bbb      	ldrb	r3, [r7, #14]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800558c:	2302      	movs	r3, #2
 800558e:	e131      	b.n	80057f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005596:	2050      	movs	r0, #80	; 0x50
 8005598:	f001 fb02 	bl	8006ba0 <malloc>
 800559c:	4603      	mov	r3, r0
 800559e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80055b0:	2302      	movs	r3, #2
 80055b2:	e11f      	b.n	80057f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80055b4:	2250      	movs	r2, #80	; 0x50
 80055b6:	2100      	movs	r1, #0
 80055b8:	68b8      	ldr	r0, [r7, #8]
 80055ba:	f001 fb01 	bl	8006bc0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	211a      	movs	r1, #26
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	4413      	add	r3, r2
 80055ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	b25b      	sxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da15      	bge.n	8005602 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	211a      	movs	r1, #26
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	4413      	add	r3, r2
 80055e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055e6:	781a      	ldrb	r2, [r3, #0]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	211a      	movs	r1, #26
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055fc:	881a      	ldrh	r2, [r3, #0]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	785b      	ldrb	r3, [r3, #1]
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 ff90 	bl	800652e <USBH_AllocPipe>
 800560e:	4603      	mov	r3, r0
 8005610:	461a      	mov	r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	7819      	ldrb	r1, [r3, #0]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	7858      	ldrb	r0, [r3, #1]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	8952      	ldrh	r2, [r2, #10]
 800562e:	9202      	str	r2, [sp, #8]
 8005630:	2203      	movs	r2, #3
 8005632:	9201      	str	r2, [sp, #4]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	4623      	mov	r3, r4
 8005638:	4602      	mov	r2, r0
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 ff48 	bl	80064d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2200      	movs	r2, #0
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f001 fa07 	bl	8006a5c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800564e:	2300      	movs	r3, #0
 8005650:	2200      	movs	r2, #0
 8005652:	210a      	movs	r1, #10
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fbe4 	bl	8005e22 <USBH_FindInterface>
 800565a:	4603      	mov	r3, r0
 800565c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	2bff      	cmp	r3, #255	; 0xff
 8005662:	d002      	beq.n	800566a <USBH_CDC_InterfaceInit+0x11a>
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d901      	bls.n	800566e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800566a:	2302      	movs	r3, #2
 800566c:	e0c2      	b.n	80057f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800566e:	7bfb      	ldrb	r3, [r7, #15]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	211a      	movs	r1, #26
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	4413      	add	r3, r2
 800567a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	b25b      	sxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	da16      	bge.n	80056b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	211a      	movs	r1, #26
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	4413      	add	r3, r2
 8005692:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005696:	781a      	ldrb	r2, [r3, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	211a      	movs	r1, #26
 80056a2:	fb01 f303 	mul.w	r3, r1, r3
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056ac:	881a      	ldrh	r2, [r3, #0]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	835a      	strh	r2, [r3, #26]
 80056b2:	e015      	b.n	80056e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	211a      	movs	r1, #26
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	4413      	add	r3, r2
 80056c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056c4:	781a      	ldrb	r2, [r3, #0]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	211a      	movs	r1, #26
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056da:	881a      	ldrh	r2, [r3, #0]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	211a      	movs	r1, #26
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	4413      	add	r3, r2
 80056ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	b25b      	sxtb	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	da16      	bge.n	8005726 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	211a      	movs	r1, #26
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	4413      	add	r3, r2
 8005704:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	211a      	movs	r1, #26
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	4413      	add	r3, r2
 800571a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800571e:	881a      	ldrh	r2, [r3, #0]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	835a      	strh	r2, [r3, #26]
 8005724:	e015      	b.n	8005752 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	211a      	movs	r1, #26
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	4413      	add	r3, r2
 8005732:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005736:	781a      	ldrb	r2, [r3, #0]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	211a      	movs	r1, #26
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	4413      	add	r3, r2
 8005748:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800574c:	881a      	ldrh	r2, [r3, #0]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	7b9b      	ldrb	r3, [r3, #14]
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fee8 	bl	800652e <USBH_AllocPipe>
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	7bdb      	ldrb	r3, [r3, #15]
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fede 	bl	800652e <USBH_AllocPipe>
 8005772:	4603      	mov	r3, r0
 8005774:	461a      	mov	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	7b59      	ldrb	r1, [r3, #13]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	7b98      	ldrb	r0, [r3, #14]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	8b12      	ldrh	r2, [r2, #24]
 8005792:	9202      	str	r2, [sp, #8]
 8005794:	2202      	movs	r2, #2
 8005796:	9201      	str	r2, [sp, #4]
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	4623      	mov	r3, r4
 800579c:	4602      	mov	r2, r0
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fe96 	bl	80064d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	7b19      	ldrb	r1, [r3, #12]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	7bd8      	ldrb	r0, [r3, #15]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	8b52      	ldrh	r2, [r2, #26]
 80057bc:	9202      	str	r2, [sp, #8]
 80057be:	2202      	movs	r2, #2
 80057c0:	9201      	str	r2, [sp, #4]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	4623      	mov	r3, r4
 80057c6:	4602      	mov	r2, r0
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fe81 	bl	80064d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	7b5b      	ldrb	r3, [r3, #13]
 80057da:	2200      	movs	r2, #0
 80057dc:	4619      	mov	r1, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f001 f93c 	bl	8006a5c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	7b1b      	ldrb	r3, [r3, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 f935 	bl	8006a5c <USBH_LL_SetToggle>

  return USBH_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd90      	pop	{r4, r7, pc}

080057fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00e      	beq.n	8005834 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fe76 	bl	800650e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fea1 	bl	8006570 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	7b1b      	ldrb	r3, [r3, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00e      	beq.n	800585a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	7b1b      	ldrb	r3, [r3, #12]
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fe63 	bl	800650e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	7b1b      	ldrb	r3, [r3, #12]
 800584c:	4619      	mov	r1, r3
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fe8e 	bl	8006570 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	7b5b      	ldrb	r3, [r3, #13]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00e      	beq.n	8005880 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	7b5b      	ldrb	r3, [r3, #13]
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fe50 	bl	800650e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	7b5b      	ldrb	r3, [r3, #13]
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fe7b 	bl	8006570 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	4618      	mov	r0, r3
 8005896:	f001 f98b 	bl	8006bb0 <free>
    phost->pActiveClass->pData = 0U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058a0:	2200      	movs	r2, #0
 80058a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3340      	adds	r3, #64	; 0x40
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f8b0 	bl	8005a2c <GetLineCoding>
 80058cc:	4603      	mov	r3, r0
 80058ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80058d0:	7afb      	ldrb	r3, [r7, #11]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d105      	bne.n	80058e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80058dc:	2102      	movs	r1, #2
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80058e2:	7afb      	ldrb	r3, [r7, #11]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80058f4:	2301      	movs	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800590c:	2b04      	cmp	r3, #4
 800590e:	d877      	bhi.n	8005a00 <USBH_CDC_Process+0x114>
 8005910:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <USBH_CDC_Process+0x2c>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	0800592d 	.word	0x0800592d
 800591c:	08005933 	.word	0x08005933
 8005920:	08005963 	.word	0x08005963
 8005924:	080059d7 	.word	0x080059d7
 8005928:	080059e5 	.word	0x080059e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	73fb      	strb	r3, [r7, #15]
      break;
 8005930:	e06d      	b.n	8005a0e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f896 	bl	8005a6a <SetLineCoding>
 800593e:	4603      	mov	r3, r0
 8005940:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005942:	7bbb      	ldrb	r3, [r7, #14]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d104      	bne.n	8005952 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005950:	e058      	b.n	8005a04 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005952:	7bbb      	ldrb	r3, [r7, #14]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d055      	beq.n	8005a04 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2204      	movs	r2, #4
 800595c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005960:	e050      	b.n	8005a04 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	3340      	adds	r3, #64	; 0x40
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f85f 	bl	8005a2c <GetLineCoding>
 800596e:	4603      	mov	r3, r0
 8005970:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005972:	7bbb      	ldrb	r3, [r7, #14]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d126      	bne.n	80059c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598a:	791b      	ldrb	r3, [r3, #4]
 800598c:	429a      	cmp	r2, r3
 800598e:	d13b      	bne.n	8005a08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800599a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800599c:	429a      	cmp	r2, r3
 800599e:	d133      	bne.n	8005a08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d12b      	bne.n	8005a08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d124      	bne.n	8005a08 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f955 	bl	8005c6e <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80059c4:	e020      	b.n	8005a08 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80059c6:	7bbb      	ldrb	r3, [r7, #14]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d01d      	beq.n	8005a08 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2204      	movs	r2, #4
 80059d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80059d4:	e018      	b.n	8005a08 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f866 	bl	8005aa8 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f8d9 	bl	8005b94 <CDC_ProcessReception>
      break;
 80059e2:	e014      	b.n	8005a0e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80059e4:	2100      	movs	r1, #0
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fafc 	bl	8005fe4 <USBH_ClrFeature>
 80059ec:	4603      	mov	r3, r0
 80059ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059f0:	7bbb      	ldrb	r3, [r7, #14]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80059fe:	e005      	b.n	8005a0c <USBH_CDC_Process+0x120>

    default:
      break;
 8005a00:	bf00      	nop
 8005a02:	e004      	b.n	8005a0e <USBH_CDC_Process+0x122>
      break;
 8005a04:	bf00      	nop
 8005a06:	e002      	b.n	8005a0e <USBH_CDC_Process+0x122>
      break;
 8005a08:	bf00      	nop
 8005a0a:	e000      	b.n	8005a0e <USBH_CDC_Process+0x122>
      break;
 8005a0c:	bf00      	nop

  }

  return status;
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr

08005a2c <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	22a1      	movs	r2, #161	; 0xa1
 8005a3a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2221      	movs	r2, #33	; 0x21
 8005a40:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2207      	movs	r2, #7
 8005a52:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2207      	movs	r2, #7
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fae6 	bl	800602c <USBH_CtlReq>
 8005a60:	4603      	mov	r3, r0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b082      	sub	sp, #8
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2221      	movs	r2, #33	; 0x21
 8005a78:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2207      	movs	r2, #7
 8005a90:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2207      	movs	r2, #7
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fac7 	bl	800602c <USBH_CtlReq>
 8005a9e:	4603      	mov	r3, r0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af02      	add	r7, sp, #8
 8005aae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d002      	beq.n	8005ace <CDC_ProcessTransmission+0x26>
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d023      	beq.n	8005b14 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005acc:	e05e      	b.n	8005b8c <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	8b12      	ldrh	r2, [r2, #24]
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d90b      	bls.n	8005af2 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	69d9      	ldr	r1, [r3, #28]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8b1a      	ldrh	r2, [r3, #24]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	7b5b      	ldrb	r3, [r3, #13]
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	9000      	str	r0, [sp, #0]
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fcad 	bl	800644a <USBH_BulkSendData>
 8005af0:	e00b      	b.n	8005b0a <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	7b5b      	ldrb	r3, [r3, #13]
 8005b00:	2001      	movs	r0, #1
 8005b02:	9000      	str	r0, [sp, #0]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fca0 	bl	800644a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b12:	e03b      	b.n	8005b8c <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	7b5b      	ldrb	r3, [r3, #13]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 ff74 	bl	8006a08 <USBH_LL_GetURBState>
 8005b20:	4603      	mov	r3, r0
 8005b22:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005b24:	7afb      	ldrb	r3, [r7, #11]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d128      	bne.n	8005b7c <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	8b12      	ldrh	r2, [r2, #24]
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d90e      	bls.n	8005b54 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	8b12      	ldrh	r2, [r2, #24]
 8005b3e:	1a9a      	subs	r2, r3, r2
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	8b12      	ldrh	r2, [r2, #24]
 8005b4c:	441a      	add	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	61da      	str	r2, [r3, #28]
 8005b52:	e002      	b.n	8005b5a <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d004      	beq.n	8005b6c <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b6a:	e00e      	b.n	8005b8a <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f868 	bl	8005c4a <USBH_CDC_TransmitCallback>
      break;
 8005b7a:	e006      	b.n	8005b8a <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005b7c:	7afb      	ldrb	r3, [r7, #11]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d103      	bne.n	8005b8a <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b8a:	bf00      	nop
  }
}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d002      	beq.n	8005bba <CDC_ProcessReception+0x26>
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d00e      	beq.n	8005bd6 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005bb8:	e043      	b.n	8005c42 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	6a19      	ldr	r1, [r3, #32]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	8b5a      	ldrh	r2, [r3, #26]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	7b1b      	ldrb	r3, [r3, #12]
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fc64 	bl	8006494 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	2204      	movs	r2, #4
 8005bd0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005bd4:	e035      	b.n	8005c42 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	7b1b      	ldrb	r3, [r3, #12]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 ff13 	bl	8006a08 <USBH_LL_GetURBState>
 8005be2:	4603      	mov	r3, r0
 8005be4:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005be6:	7cfb      	ldrb	r3, [r7, #19]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d129      	bne.n	8005c40 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	7b1b      	ldrb	r3, [r3, #12]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fe76 	bl	80068e4 <USBH_LL_GetLastXferSize>
 8005bf8:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d016      	beq.n	8005c32 <CDC_ProcessReception+0x9e>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	8b5b      	ldrh	r3, [r3, #26]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d910      	bls.n	8005c32 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1ad2      	subs	r2, r2, r3
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	6a1a      	ldr	r2, [r3, #32]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	441a      	add	r2, r3
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c30:	e006      	b.n	8005c40 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f80e 	bl	8005c5c <USBH_CDC_ReceiveCallback>
      break;
 8005c40:	bf00      	nop
  }
}
 8005c42:	bf00      	nop
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr

08005c5c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bc80      	pop	{r7}
 8005c6c:	4770      	bx	lr

08005c6e <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr

08005c80 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005c94:	2302      	movs	r3, #2
 8005c96:	e029      	b.n	8005cec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	79fa      	ldrb	r2, [r7, #7]
 8005c9c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f81f 	bl	8005cf4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fd8b 	bl	8006800 <USBH_LL_Init>

  return USBH_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e009      	b.n	8005d1a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	33e0      	adds	r3, #224	; 0xe0
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	2200      	movs	r2, #0
 8005d12:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b0f      	cmp	r3, #15
 8005d1e:	d9f2      	bls.n	8005d06 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	e009      	b.n	8005d3a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d30:	2200      	movs	r2, #0
 8005d32:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3301      	adds	r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d40:	d3f1      	bcc.n	8005d26 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2240      	movs	r2, #64	; 0x40
 8005d66:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr

08005d9a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d016      	beq.n	8005ddc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10e      	bne.n	8005dd6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005dbe:	1c59      	adds	r1, r3, #1
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	33de      	adds	r3, #222	; 0xde
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	73fb      	strb	r3, [r7, #15]
 8005dd4:	e004      	b.n	8005de0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	73fb      	strb	r3, [r7, #15]
 8005dda:	e001      	b.n	8005de0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005ddc:	2302      	movs	r3, #2
 8005dde:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bc80      	pop	{r7}
 8005dea:	4770      	bx	lr

08005dec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005e02:	78fa      	ldrb	r2, [r7, #3]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d204      	bcs.n	8005e12 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	78fa      	ldrb	r2, [r7, #3]
 8005e0c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005e10:	e001      	b.n	8005e16 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005e12:	2302      	movs	r3, #2
 8005e14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr

08005e22 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b087      	sub	sp, #28
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	4608      	mov	r0, r1
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4603      	mov	r3, r0
 8005e32:	70fb      	strb	r3, [r7, #3]
 8005e34:	460b      	mov	r3, r1
 8005e36:	70bb      	strb	r3, [r7, #2]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005e4a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e4c:	e025      	b.n	8005e9a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
 8005e50:	221a      	movs	r2, #26
 8005e52:	fb02 f303 	mul.w	r3, r2, r3
 8005e56:	3308      	adds	r3, #8
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	795b      	ldrb	r3, [r3, #5]
 8005e64:	78fa      	ldrb	r2, [r7, #3]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d002      	beq.n	8005e70 <USBH_FindInterface+0x4e>
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	2bff      	cmp	r3, #255	; 0xff
 8005e6e:	d111      	bne.n	8005e94 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e74:	78ba      	ldrb	r2, [r7, #2]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d002      	beq.n	8005e80 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e7a:	78bb      	ldrb	r3, [r7, #2]
 8005e7c:	2bff      	cmp	r3, #255	; 0xff
 8005e7e:	d109      	bne.n	8005e94 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e84:	787a      	ldrb	r2, [r7, #1]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d002      	beq.n	8005e90 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e8a:	787b      	ldrb	r3, [r7, #1]
 8005e8c:	2bff      	cmp	r3, #255	; 0xff
 8005e8e:	d101      	bne.n	8005e94 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
 8005e92:	e006      	b.n	8005ea2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	3301      	adds	r3, #1
 8005e98:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d9d6      	bls.n	8005e4e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005ea0:	23ff      	movs	r3, #255	; 0xff
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	371c      	adds	r7, #28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr

08005eac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fcdf 	bl	8006878 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005eba:	2101      	movs	r1, #1
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fdb6 	bl	8006a2e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bc80      	pop	{r7}
 8005ee6:	4770      	bx	lr

08005ee8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f804 	bl	8005f0c <USBH_HandleSof>
}
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b0b      	cmp	r3, #11
 8005f1c:	d10a      	bne.n	8005f34 <USBH_HandleSof+0x28>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
  }
}
 8005f34:	bf00      	nop
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005f4c:	bf00      	nop
}
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bc80      	pop	{r7}
 8005f54:	4770      	bx	lr

08005f56 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005f66:	bf00      	nop
}
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bc80      	pop	{r7}
 8005f6e:	4770      	bx	lr

08005f70 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr

08005f9c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fc76 	bl	80068ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	791b      	ldrb	r3, [r3, #4]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fad1 	bl	8006570 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	795b      	ldrb	r3, [r3, #5]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 facb 	bl	8006570 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	789b      	ldrb	r3, [r3, #2]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d10f      	bne.n	8006018 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800600a:	78fb      	ldrb	r3, [r7, #3]
 800600c:	b29a      	uxth	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006018:	2200      	movs	r2, #0
 800601a:	2100      	movs	r1, #0
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f805 	bl	800602c <USBH_CtlReq>
 8006022:	4603      	mov	r3, r0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800603a:	2301      	movs	r3, #1
 800603c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	789b      	ldrb	r3, [r3, #2]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d002      	beq.n	800604c <USBH_CtlReq+0x20>
 8006046:	2b02      	cmp	r3, #2
 8006048:	d00f      	beq.n	800606a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800604a:	e027      	b.n	800609c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	88fa      	ldrh	r2, [r7, #6]
 8006056:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2202      	movs	r2, #2
 8006062:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006064:	2301      	movs	r3, #1
 8006066:	75fb      	strb	r3, [r7, #23]
      break;
 8006068:	e018      	b.n	800609c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f81c 	bl	80060a8 <USBH_HandleControl>
 8006070:	4603      	mov	r3, r0
 8006072:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006074:	7dfb      	ldrb	r3, [r7, #23]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <USBH_CtlReq+0x54>
 800607a:	7dfb      	ldrb	r3, [r7, #23]
 800607c:	2b03      	cmp	r3, #3
 800607e:	d106      	bne.n	800608e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	761a      	strb	r2, [r3, #24]
      break;
 800608c:	e005      	b.n	800609a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	2b02      	cmp	r3, #2
 8006092:	d102      	bne.n	800609a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	709a      	strb	r2, [r3, #2]
      break;
 800609a:	bf00      	nop
  }
  return status;
 800609c:	7dfb      	ldrb	r3, [r7, #23]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80060b0:	2301      	movs	r3, #1
 80060b2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80060b4:	2300      	movs	r3, #0
 80060b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	7e1b      	ldrb	r3, [r3, #24]
 80060bc:	3b01      	subs	r3, #1
 80060be:	2b0a      	cmp	r3, #10
 80060c0:	f200 8156 	bhi.w	8006370 <USBH_HandleControl+0x2c8>
 80060c4:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <USBH_HandleControl+0x24>)
 80060c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ca:	bf00      	nop
 80060cc:	080060f9 	.word	0x080060f9
 80060d0:	08006113 	.word	0x08006113
 80060d4:	0800617d 	.word	0x0800617d
 80060d8:	080061a3 	.word	0x080061a3
 80060dc:	080061db 	.word	0x080061db
 80060e0:	08006205 	.word	0x08006205
 80060e4:	08006257 	.word	0x08006257
 80060e8:	08006279 	.word	0x08006279
 80060ec:	080062b5 	.word	0x080062b5
 80060f0:	080062db 	.word	0x080062db
 80060f4:	08006319 	.word	0x08006319
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f103 0110 	add.w	r1, r3, #16
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	795b      	ldrb	r3, [r3, #5]
 8006102:	461a      	mov	r2, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f943 	bl	8006390 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	761a      	strb	r2, [r3, #24]
      break;
 8006110:	e139      	b.n	8006386 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	795b      	ldrb	r3, [r3, #5]
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fc75 	bl	8006a08 <USBH_LL_GetURBState>
 800611e:	4603      	mov	r3, r0
 8006120:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d11e      	bne.n	8006166 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	7c1b      	ldrb	r3, [r3, #16]
 800612c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006130:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8adb      	ldrh	r3, [r3, #22]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800613a:	7b7b      	ldrb	r3, [r7, #13]
 800613c:	2b80      	cmp	r3, #128	; 0x80
 800613e:	d103      	bne.n	8006148 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2203      	movs	r2, #3
 8006144:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006146:	e115      	b.n	8006374 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2205      	movs	r2, #5
 800614c:	761a      	strb	r2, [r3, #24]
      break;
 800614e:	e111      	b.n	8006374 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006150:	7b7b      	ldrb	r3, [r7, #13]
 8006152:	2b80      	cmp	r3, #128	; 0x80
 8006154:	d103      	bne.n	800615e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2209      	movs	r2, #9
 800615a:	761a      	strb	r2, [r3, #24]
      break;
 800615c:	e10a      	b.n	8006374 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2207      	movs	r2, #7
 8006162:	761a      	strb	r2, [r3, #24]
      break;
 8006164:	e106      	b.n	8006374 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006166:	7bbb      	ldrb	r3, [r7, #14]
 8006168:	2b04      	cmp	r3, #4
 800616a:	d003      	beq.n	8006174 <USBH_HandleControl+0xcc>
 800616c:	7bbb      	ldrb	r3, [r7, #14]
 800616e:	2b02      	cmp	r3, #2
 8006170:	f040 8100 	bne.w	8006374 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	220b      	movs	r2, #11
 8006178:	761a      	strb	r2, [r3, #24]
      break;
 800617a:	e0fb      	b.n	8006374 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006182:	b29a      	uxth	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6899      	ldr	r1, [r3, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	899a      	ldrh	r2, [r3, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	791b      	ldrb	r3, [r3, #4]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f93a 	bl	800640e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2204      	movs	r2, #4
 800619e:	761a      	strb	r2, [r3, #24]
      break;
 80061a0:	e0f1      	b.n	8006386 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	791b      	ldrb	r3, [r3, #4]
 80061a6:	4619      	mov	r1, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fc2d 	bl	8006a08 <USBH_LL_GetURBState>
 80061ae:	4603      	mov	r3, r0
 80061b0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80061b2:	7bbb      	ldrb	r3, [r7, #14]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d102      	bne.n	80061be <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2209      	movs	r2, #9
 80061bc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	2b05      	cmp	r3, #5
 80061c2:	d102      	bne.n	80061ca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80061c4:	2303      	movs	r3, #3
 80061c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80061c8:	e0d6      	b.n	8006378 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	f040 80d3 	bne.w	8006378 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	220b      	movs	r2, #11
 80061d6:	761a      	strb	r2, [r3, #24]
      break;
 80061d8:	e0ce      	b.n	8006378 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6899      	ldr	r1, [r3, #8]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	899a      	ldrh	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	795b      	ldrb	r3, [r3, #5]
 80061e6:	2001      	movs	r0, #1
 80061e8:	9000      	str	r0, [sp, #0]
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f8ea 	bl	80063c4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2206      	movs	r2, #6
 8006200:	761a      	strb	r2, [r3, #24]
      break;
 8006202:	e0c0      	b.n	8006386 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	795b      	ldrb	r3, [r3, #5]
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fbfc 	bl	8006a08 <USBH_LL_GetURBState>
 8006210:	4603      	mov	r3, r0
 8006212:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d103      	bne.n	8006222 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2207      	movs	r2, #7
 800621e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006220:	e0ac      	b.n	800637c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006222:	7bbb      	ldrb	r3, [r7, #14]
 8006224:	2b05      	cmp	r3, #5
 8006226:	d105      	bne.n	8006234 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	220c      	movs	r2, #12
 800622c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800622e:	2303      	movs	r3, #3
 8006230:	73fb      	strb	r3, [r7, #15]
      break;
 8006232:	e0a3      	b.n	800637c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006234:	7bbb      	ldrb	r3, [r7, #14]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d103      	bne.n	8006242 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2205      	movs	r2, #5
 800623e:	761a      	strb	r2, [r3, #24]
      break;
 8006240:	e09c      	b.n	800637c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006242:	7bbb      	ldrb	r3, [r7, #14]
 8006244:	2b04      	cmp	r3, #4
 8006246:	f040 8099 	bne.w	800637c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	220b      	movs	r2, #11
 800624e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006250:	2302      	movs	r3, #2
 8006252:	73fb      	strb	r3, [r7, #15]
      break;
 8006254:	e092      	b.n	800637c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	791b      	ldrb	r3, [r3, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	2100      	movs	r1, #0
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f8d5 	bl	800640e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800626a:	b29a      	uxth	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2208      	movs	r2, #8
 8006274:	761a      	strb	r2, [r3, #24]

      break;
 8006276:	e086      	b.n	8006386 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	791b      	ldrb	r3, [r3, #4]
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fbc2 	bl	8006a08 <USBH_LL_GetURBState>
 8006284:	4603      	mov	r3, r0
 8006286:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006288:	7bbb      	ldrb	r3, [r7, #14]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d105      	bne.n	800629a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	220d      	movs	r2, #13
 8006292:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006298:	e072      	b.n	8006380 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800629a:	7bbb      	ldrb	r3, [r7, #14]
 800629c:	2b04      	cmp	r3, #4
 800629e:	d103      	bne.n	80062a8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	220b      	movs	r2, #11
 80062a4:	761a      	strb	r2, [r3, #24]
      break;
 80062a6:	e06b      	b.n	8006380 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80062a8:	7bbb      	ldrb	r3, [r7, #14]
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	d168      	bne.n	8006380 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80062ae:	2303      	movs	r3, #3
 80062b0:	73fb      	strb	r3, [r7, #15]
      break;
 80062b2:	e065      	b.n	8006380 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	795b      	ldrb	r3, [r3, #5]
 80062b8:	2201      	movs	r2, #1
 80062ba:	9200      	str	r2, [sp, #0]
 80062bc:	2200      	movs	r2, #0
 80062be:	2100      	movs	r1, #0
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f87f 	bl	80063c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	220a      	movs	r2, #10
 80062d6:	761a      	strb	r2, [r3, #24]
      break;
 80062d8:	e055      	b.n	8006386 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	795b      	ldrb	r3, [r3, #5]
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fb91 	bl	8006a08 <USBH_LL_GetURBState>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80062ea:	7bbb      	ldrb	r3, [r7, #14]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d105      	bne.n	80062fc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	220d      	movs	r2, #13
 80062f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80062fa:	e043      	b.n	8006384 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d103      	bne.n	800630a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2209      	movs	r2, #9
 8006306:	761a      	strb	r2, [r3, #24]
      break;
 8006308:	e03c      	b.n	8006384 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	2b04      	cmp	r3, #4
 800630e:	d139      	bne.n	8006384 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	220b      	movs	r2, #11
 8006314:	761a      	strb	r2, [r3, #24]
      break;
 8006316:	e035      	b.n	8006384 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	7e5b      	ldrb	r3, [r3, #25]
 800631c:	3301      	adds	r3, #1
 800631e:	b2da      	uxtb	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	765a      	strb	r2, [r3, #25]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	7e5b      	ldrb	r3, [r3, #25]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d806      	bhi.n	800633a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006338:	e025      	b.n	8006386 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006340:	2106      	movs	r1, #6
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	795b      	ldrb	r3, [r3, #5]
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f90c 	bl	8006570 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	791b      	ldrb	r3, [r3, #4]
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f906 	bl	8006570 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800636a:	2302      	movs	r3, #2
 800636c:	73fb      	strb	r3, [r7, #15]
      break;
 800636e:	e00a      	b.n	8006386 <USBH_HandleControl+0x2de>

    default:
      break;
 8006370:	bf00      	nop
 8006372:	e008      	b.n	8006386 <USBH_HandleControl+0x2de>
      break;
 8006374:	bf00      	nop
 8006376:	e006      	b.n	8006386 <USBH_HandleControl+0x2de>
      break;
 8006378:	bf00      	nop
 800637a:	e004      	b.n	8006386 <USBH_HandleControl+0x2de>
      break;
 800637c:	bf00      	nop
 800637e:	e002      	b.n	8006386 <USBH_HandleControl+0x2de>
      break;
 8006380:	bf00      	nop
 8006382:	e000      	b.n	8006386 <USBH_HandleControl+0x2de>
      break;
 8006384:	bf00      	nop
  }

  return status;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af04      	add	r7, sp, #16
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	4613      	mov	r3, r2
 800639c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800639e:	79f9      	ldrb	r1, [r7, #7]
 80063a0:	2300      	movs	r3, #0
 80063a2:	9303      	str	r3, [sp, #12]
 80063a4:	2308      	movs	r3, #8
 80063a6:	9302      	str	r3, [sp, #8]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	2300      	movs	r3, #0
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	2300      	movs	r3, #0
 80063b2:	2200      	movs	r2, #0
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 faf6 	bl	80069a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af04      	add	r7, sp, #16
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	4611      	mov	r1, r2
 80063d0:	461a      	mov	r2, r3
 80063d2:	460b      	mov	r3, r1
 80063d4:	80fb      	strh	r3, [r7, #6]
 80063d6:	4613      	mov	r3, r2
 80063d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80063e8:	7979      	ldrb	r1, [r7, #5]
 80063ea:	7e3b      	ldrb	r3, [r7, #24]
 80063ec:	9303      	str	r3, [sp, #12]
 80063ee:	88fb      	ldrh	r3, [r7, #6]
 80063f0:	9302      	str	r3, [sp, #8]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	2301      	movs	r3, #1
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	2300      	movs	r3, #0
 80063fc:	2200      	movs	r2, #0
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 fad1 	bl	80069a6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b088      	sub	sp, #32
 8006412:	af04      	add	r7, sp, #16
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	4611      	mov	r1, r2
 800641a:	461a      	mov	r2, r3
 800641c:	460b      	mov	r3, r1
 800641e:	80fb      	strh	r3, [r7, #6]
 8006420:	4613      	mov	r3, r2
 8006422:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006424:	7979      	ldrb	r1, [r7, #5]
 8006426:	2300      	movs	r3, #0
 8006428:	9303      	str	r3, [sp, #12]
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	9302      	str	r3, [sp, #8]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	2301      	movs	r3, #1
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	2300      	movs	r3, #0
 8006438:	2201      	movs	r2, #1
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 fab3 	bl	80069a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006440:	2300      	movs	r3, #0

}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b088      	sub	sp, #32
 800644e:	af04      	add	r7, sp, #16
 8006450:	60f8      	str	r0, [r7, #12]
 8006452:	60b9      	str	r1, [r7, #8]
 8006454:	4611      	mov	r1, r2
 8006456:	461a      	mov	r2, r3
 8006458:	460b      	mov	r3, r1
 800645a:	80fb      	strh	r3, [r7, #6]
 800645c:	4613      	mov	r3, r2
 800645e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800646e:	7979      	ldrb	r1, [r7, #5]
 8006470:	7e3b      	ldrb	r3, [r7, #24]
 8006472:	9303      	str	r3, [sp, #12]
 8006474:	88fb      	ldrh	r3, [r7, #6]
 8006476:	9302      	str	r3, [sp, #8]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	2301      	movs	r3, #1
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	2302      	movs	r3, #2
 8006482:	2200      	movs	r2, #0
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fa8e 	bl	80069a6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af04      	add	r7, sp, #16
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	4611      	mov	r1, r2
 80064a0:	461a      	mov	r2, r3
 80064a2:	460b      	mov	r3, r1
 80064a4:	80fb      	strh	r3, [r7, #6]
 80064a6:	4613      	mov	r3, r2
 80064a8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80064aa:	7979      	ldrb	r1, [r7, #5]
 80064ac:	2300      	movs	r3, #0
 80064ae:	9303      	str	r3, [sp, #12]
 80064b0:	88fb      	ldrh	r3, [r7, #6]
 80064b2:	9302      	str	r3, [sp, #8]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	2301      	movs	r3, #1
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	2302      	movs	r3, #2
 80064be:	2201      	movs	r2, #1
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 fa70 	bl	80069a6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af04      	add	r7, sp, #16
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	4608      	mov	r0, r1
 80064da:	4611      	mov	r1, r2
 80064dc:	461a      	mov	r2, r3
 80064de:	4603      	mov	r3, r0
 80064e0:	70fb      	strb	r3, [r7, #3]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70bb      	strb	r3, [r7, #2]
 80064e6:	4613      	mov	r3, r2
 80064e8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80064ea:	7878      	ldrb	r0, [r7, #1]
 80064ec:	78ba      	ldrb	r2, [r7, #2]
 80064ee:	78f9      	ldrb	r1, [r7, #3]
 80064f0:	8b3b      	ldrh	r3, [r7, #24]
 80064f2:	9302      	str	r3, [sp, #8]
 80064f4:	7d3b      	ldrb	r3, [r7, #20]
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	7c3b      	ldrb	r3, [r7, #16]
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	4603      	mov	r3, r0
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa03 	bl	800690a <USBH_LL_OpenPipe>

  return USBH_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fa22 	bl	8006968 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f835 	bl	80065aa <USBH_GetFreePipe>
 8006540:	4603      	mov	r3, r0
 8006542:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006544:	89fb      	ldrh	r3, [r7, #14]
 8006546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800654a:	4293      	cmp	r3, r2
 800654c:	d00a      	beq.n	8006564 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800654e:	78fa      	ldrb	r2, [r7, #3]
 8006550:	89fb      	ldrh	r3, [r7, #14]
 8006552:	f003 030f 	and.w	r3, r3, #15
 8006556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	33e0      	adds	r3, #224	; 0xe0
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006564:	89fb      	ldrh	r3, [r7, #14]
 8006566:	b2db      	uxtb	r3, r3
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	2b0f      	cmp	r3, #15
 8006580:	d80d      	bhi.n	800659e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	33e0      	adds	r3, #224	; 0xe0
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	33e0      	adds	r3, #224	; 0xe0
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr

080065aa <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b085      	sub	sp, #20
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80065b6:	2300      	movs	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]
 80065ba:	e00f      	b.n	80065dc <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	33e0      	adds	r3, #224	; 0xe0
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d102      	bne.n	80065d6 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	e007      	b.n	80065e6 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	3301      	adds	r3, #1
 80065da:	73fb      	strb	r3, [r7, #15]
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b0f      	cmp	r3, #15
 80065e0:	d9ec      	bls.n	80065bc <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80065e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bc80      	pop	{r7}
 80065ee:	4770      	bx	lr

080065f0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80065f4:	2201      	movs	r2, #1
 80065f6:	490e      	ldr	r1, [pc, #56]	; (8006630 <MX_USB_HOST_Init+0x40>)
 80065f8:	480e      	ldr	r0, [pc, #56]	; (8006634 <MX_USB_HOST_Init+0x44>)
 80065fa:	f7ff fb41 	bl	8005c80 <USBH_Init>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006604:	f7fa faa0 	bl	8000b48 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006608:	490b      	ldr	r1, [pc, #44]	; (8006638 <MX_USB_HOST_Init+0x48>)
 800660a:	480a      	ldr	r0, [pc, #40]	; (8006634 <MX_USB_HOST_Init+0x44>)
 800660c:	f7ff fbc5 	bl	8005d9a <USBH_RegisterClass>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006616:	f7fa fa97 	bl	8000b48 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800661a:	4806      	ldr	r0, [pc, #24]	; (8006634 <MX_USB_HOST_Init+0x44>)
 800661c:	f7ff fc46 	bl	8005eac <USBH_Start>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006626:	f7fa fa8f 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800662a:	bf00      	nop
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	0800663d 	.word	0x0800663d
 8006634:	200001a8 	.word	0x200001a8
 8006638:	2000000c 	.word	0x2000000c

0800663c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	3b01      	subs	r3, #1
 800664c:	2b04      	cmp	r3, #4
 800664e:	d819      	bhi.n	8006684 <USBH_UserProcess+0x48>
 8006650:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <USBH_UserProcess+0x1c>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	08006685 	.word	0x08006685
 800665c:	08006675 	.word	0x08006675
 8006660:	08006685 	.word	0x08006685
 8006664:	0800667d 	.word	0x0800667d
 8006668:	0800666d 	.word	0x0800666d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800666c:	4b08      	ldr	r3, [pc, #32]	; (8006690 <USBH_UserProcess+0x54>)
 800666e:	2203      	movs	r2, #3
 8006670:	701a      	strb	r2, [r3, #0]
  break;
 8006672:	e008      	b.n	8006686 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <USBH_UserProcess+0x54>)
 8006676:	2202      	movs	r2, #2
 8006678:	701a      	strb	r2, [r3, #0]
  break;
 800667a:	e004      	b.n	8006686 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800667c:	4b04      	ldr	r3, [pc, #16]	; (8006690 <USBH_UserProcess+0x54>)
 800667e:	2201      	movs	r2, #1
 8006680:	701a      	strb	r2, [r3, #0]
  break;
 8006682:	e000      	b.n	8006686 <USBH_UserProcess+0x4a>

  default:
  break;
 8006684:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	bc80      	pop	{r7}
 800668e:	4770      	bx	lr
 8006690:	20000580 	.word	0x20000580

08006694 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08a      	sub	sp, #40	; 0x28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800669c:	f107 0314 	add.w	r3, r7, #20
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	605a      	str	r2, [r3, #4]
 80066a6:	609a      	str	r2, [r3, #8]
 80066a8:	60da      	str	r2, [r3, #12]
 80066aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066b4:	d147      	bne.n	8006746 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066b6:	2300      	movs	r3, #0
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	4b25      	ldr	r3, [pc, #148]	; (8006750 <HAL_HCD_MspInit+0xbc>)
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	4a24      	ldr	r2, [pc, #144]	; (8006750 <HAL_HCD_MspInit+0xbc>)
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	6313      	str	r3, [r2, #48]	; 0x30
 80066c6:	4b22      	ldr	r3, [pc, #136]	; (8006750 <HAL_HCD_MspInit+0xbc>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80066d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066d8:	2300      	movs	r3, #0
 80066da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	4619      	mov	r1, r3
 80066e6:	481b      	ldr	r0, [pc, #108]	; (8006754 <HAL_HCD_MspInit+0xc0>)
 80066e8:	f7fa fda4 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80066ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80066f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f2:	2302      	movs	r3, #2
 80066f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066fa:	2300      	movs	r3, #0
 80066fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80066fe:	230a      	movs	r3, #10
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006702:	f107 0314 	add.w	r3, r7, #20
 8006706:	4619      	mov	r1, r3
 8006708:	4812      	ldr	r0, [pc, #72]	; (8006754 <HAL_HCD_MspInit+0xc0>)
 800670a:	f7fa fd93 	bl	8001234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800670e:	4b10      	ldr	r3, [pc, #64]	; (8006750 <HAL_HCD_MspInit+0xbc>)
 8006710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006712:	4a0f      	ldr	r2, [pc, #60]	; (8006750 <HAL_HCD_MspInit+0xbc>)
 8006714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006718:	6353      	str	r3, [r2, #52]	; 0x34
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <HAL_HCD_MspInit+0xbc>)
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	4a0b      	ldr	r2, [pc, #44]	; (8006750 <HAL_HCD_MspInit+0xbc>)
 8006724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006728:	6453      	str	r3, [r2, #68]	; 0x44
 800672a:	4b09      	ldr	r3, [pc, #36]	; (8006750 <HAL_HCD_MspInit+0xbc>)
 800672c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006736:	2200      	movs	r2, #0
 8006738:	2100      	movs	r1, #0
 800673a:	2043      	movs	r0, #67	; 0x43
 800673c:	f7fa fd43 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006740:	2043      	movs	r0, #67	; 0x43
 8006742:	f7fa fd5c 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006746:	bf00      	nop
 8006748:	3728      	adds	r7, #40	; 0x28
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40023800 	.word	0x40023800
 8006754:	40020000 	.word	0x40020000

08006758 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff fbbe 	bl	8005ee8 <USBH_LL_IncTimer>
}
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006782:	4618      	mov	r0, r3
 8006784:	f7ff fbf4 	bl	8005f70 <USBH_LL_Connect>
}
 8006788:	bf00      	nop
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff fbfc 	bl	8005f9c <USBH_LL_Disconnect>
}
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	70fb      	strb	r3, [r7, #3]
 80067b8:	4613      	mov	r3, r2
 80067ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr

080067c6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff fbb1 	bl	8005f3c <USBH_LL_PortEnabled>
}
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff fbb0 	bl	8005f56 <USBH_LL_PortDisabled>
}
 80067f6:	bf00      	nop
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800680e:	2b01      	cmp	r3, #1
 8006810:	d12a      	bne.n	8006868 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006812:	4a18      	ldr	r2, [pc, #96]	; (8006874 <USBH_LL_Init+0x74>)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a15      	ldr	r2, [pc, #84]	; (8006874 <USBH_LL_Init+0x74>)
 800681e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006822:	4b14      	ldr	r3, [pc, #80]	; (8006874 <USBH_LL_Init+0x74>)
 8006824:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006828:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800682a:	4b12      	ldr	r3, [pc, #72]	; (8006874 <USBH_LL_Init+0x74>)
 800682c:	2208      	movs	r2, #8
 800682e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006830:	4b10      	ldr	r3, [pc, #64]	; (8006874 <USBH_LL_Init+0x74>)
 8006832:	2201      	movs	r2, #1
 8006834:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006836:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <USBH_LL_Init+0x74>)
 8006838:	2200      	movs	r2, #0
 800683a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800683c:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <USBH_LL_Init+0x74>)
 800683e:	2202      	movs	r2, #2
 8006840:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006842:	4b0c      	ldr	r3, [pc, #48]	; (8006874 <USBH_LL_Init+0x74>)
 8006844:	2200      	movs	r2, #0
 8006846:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006848:	480a      	ldr	r0, [pc, #40]	; (8006874 <USBH_LL_Init+0x74>)
 800684a:	f7fa febc 	bl	80015c6 <HAL_HCD_Init>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006854:	f7fa f978 	bl	8000b48 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006858:	4806      	ldr	r0, [pc, #24]	; (8006874 <USBH_LL_Init+0x74>)
 800685a:	f7fb fa90 	bl	8001d7e <HAL_HCD_GetCurrentFrame>
 800685e:	4603      	mov	r3, r0
 8006860:	4619      	mov	r1, r3
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff fb32 	bl	8005ecc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20000584 	.word	0x20000584

08006878 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800688e:	4618      	mov	r0, r3
 8006890:	f7fb fa0f 	bl	8001cb2 <HAL_HCD_Start>
 8006894:	4603      	mov	r3, r0
 8006896:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 f90e 	bl	8006abc <USBH_Get_USB_Status>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fb fa17 	bl	8001cf8 <HAL_HCD_Stop>
 80068ca:	4603      	mov	r3, r0
 80068cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 f8f3 	bl	8006abc <USBH_Get_USB_Status>
 80068d6:	4603      	mov	r3, r0
 80068d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068da:	7bbb      	ldrb	r3, [r7, #14]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80068f6:	78fa      	ldrb	r2, [r7, #3]
 80068f8:	4611      	mov	r1, r2
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fb fa2c 	bl	8001d58 <HAL_HCD_HC_GetXferCount>
 8006900:	4603      	mov	r3, r0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800690a:	b590      	push	{r4, r7, lr}
 800690c:	b089      	sub	sp, #36	; 0x24
 800690e:	af04      	add	r7, sp, #16
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	4608      	mov	r0, r1
 8006914:	4611      	mov	r1, r2
 8006916:	461a      	mov	r2, r3
 8006918:	4603      	mov	r3, r0
 800691a:	70fb      	strb	r3, [r7, #3]
 800691c:	460b      	mov	r3, r1
 800691e:	70bb      	strb	r3, [r7, #2]
 8006920:	4613      	mov	r3, r2
 8006922:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006932:	787c      	ldrb	r4, [r7, #1]
 8006934:	78ba      	ldrb	r2, [r7, #2]
 8006936:	78f9      	ldrb	r1, [r7, #3]
 8006938:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800693a:	9302      	str	r3, [sp, #8]
 800693c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	4623      	mov	r3, r4
 800694a:	f7fa fe9e 	bl	800168a <HAL_HCD_HC_Init>
 800694e:	4603      	mov	r3, r0
 8006950:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	4618      	mov	r0, r3
 8006956:	f000 f8b1 	bl	8006abc <USBH_Get_USB_Status>
 800695a:	4603      	mov	r3, r0
 800695c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800695e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	bd90      	pop	{r4, r7, pc}

08006968 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006982:	78fa      	ldrb	r2, [r7, #3]
 8006984:	4611      	mov	r1, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f7fa ff0e 	bl	80017a8 <HAL_HCD_HC_Halt>
 800698c:	4603      	mov	r3, r0
 800698e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	4618      	mov	r0, r3
 8006994:	f000 f892 	bl	8006abc <USBH_Get_USB_Status>
 8006998:	4603      	mov	r3, r0
 800699a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800699c:	7bbb      	ldrb	r3, [r7, #14]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80069a6:	b590      	push	{r4, r7, lr}
 80069a8:	b089      	sub	sp, #36	; 0x24
 80069aa:	af04      	add	r7, sp, #16
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	4608      	mov	r0, r1
 80069b0:	4611      	mov	r1, r2
 80069b2:	461a      	mov	r2, r3
 80069b4:	4603      	mov	r3, r0
 80069b6:	70fb      	strb	r3, [r7, #3]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70bb      	strb	r3, [r7, #2]
 80069bc:	4613      	mov	r3, r2
 80069be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80069ce:	787c      	ldrb	r4, [r7, #1]
 80069d0:	78ba      	ldrb	r2, [r7, #2]
 80069d2:	78f9      	ldrb	r1, [r7, #3]
 80069d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80069d8:	9303      	str	r3, [sp, #12]
 80069da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80069dc:	9302      	str	r3, [sp, #8]
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	4623      	mov	r3, r4
 80069ea:	f7fa ff01 	bl	80017f0 <HAL_HCD_HC_SubmitRequest>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 f861 	bl	8006abc <USBH_Get_USB_Status>
 80069fa:	4603      	mov	r3, r0
 80069fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd90      	pop	{r4, r7, pc}

08006a08 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a1a:	78fa      	ldrb	r2, [r7, #3]
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fb f987 	bl	8001d32 <HAL_HCD_HC_GetURBState>
 8006a24:	4603      	mov	r3, r0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b082      	sub	sp, #8
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	460b      	mov	r3, r1
 8006a38:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d103      	bne.n	8006a4c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006a44:	78fb      	ldrb	r3, [r7, #3]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 f864 	bl	8006b14 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006a4c:	20c8      	movs	r0, #200	; 0xc8
 8006a4e:	f7fa fabf 	bl	8000fd0 <HAL_Delay>
  return USBH_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	70fb      	strb	r3, [r7, #3]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a72:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	212c      	movs	r1, #44	; 0x2c
 8006a7a:	fb01 f303 	mul.w	r3, r1, r3
 8006a7e:	4413      	add	r3, r2
 8006a80:	333b      	adds	r3, #59	; 0x3b
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d009      	beq.n	8006a9c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	212c      	movs	r1, #44	; 0x2c
 8006a8e:	fb01 f303 	mul.w	r3, r1, r3
 8006a92:	4413      	add	r3, r2
 8006a94:	3354      	adds	r3, #84	; 0x54
 8006a96:	78ba      	ldrb	r2, [r7, #2]
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	e008      	b.n	8006aae <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006a9c:	78fb      	ldrb	r3, [r7, #3]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	212c      	movs	r1, #44	; 0x2c
 8006aa2:	fb01 f303 	mul.w	r3, r1, r3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	3355      	adds	r3, #85	; 0x55
 8006aaa:	78ba      	ldrb	r2, [r7, #2]
 8006aac:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr
	...

08006abc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006aca:	79fb      	ldrb	r3, [r7, #7]
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d817      	bhi.n	8006b00 <USBH_Get_USB_Status+0x44>
 8006ad0:	a201      	add	r2, pc, #4	; (adr r2, 8006ad8 <USBH_Get_USB_Status+0x1c>)
 8006ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad6:	bf00      	nop
 8006ad8:	08006ae9 	.word	0x08006ae9
 8006adc:	08006aef 	.word	0x08006aef
 8006ae0:	08006af5 	.word	0x08006af5
 8006ae4:	08006afb 	.word	0x08006afb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73fb      	strb	r3, [r7, #15]
    break;
 8006aec:	e00b      	b.n	8006b06 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006aee:	2302      	movs	r3, #2
 8006af0:	73fb      	strb	r3, [r7, #15]
    break;
 8006af2:	e008      	b.n	8006b06 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006af4:	2301      	movs	r3, #1
 8006af6:	73fb      	strb	r3, [r7, #15]
    break;
 8006af8:	e005      	b.n	8006b06 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006afa:	2302      	movs	r3, #2
 8006afc:	73fb      	strb	r3, [r7, #15]
    break;
 8006afe:	e002      	b.n	8006b06 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006b00:	2302      	movs	r3, #2
 8006b02:	73fb      	strb	r3, [r7, #15]
    break;
 8006b04:	bf00      	nop
  }
  return usb_status;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bc80      	pop	{r7}
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop

08006b14 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d102      	bne.n	8006b2e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73fb      	strb	r3, [r7, #15]
 8006b2c:	e001      	b.n	8006b32 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	461a      	mov	r2, r3
 8006b36:	2101      	movs	r1, #1
 8006b38:	4803      	ldr	r0, [pc, #12]	; (8006b48 <MX_DriverVbusFS+0x34>)
 8006b3a:	f7fa fd2c 	bl	8001596 <HAL_GPIO_WritePin>
}
 8006b3e:	bf00      	nop
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	40020800 	.word	0x40020800

08006b4c <__errno>:
 8006b4c:	4b01      	ldr	r3, [pc, #4]	; (8006b54 <__errno+0x8>)
 8006b4e:	6818      	ldr	r0, [r3, #0]
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	2000002c 	.word	0x2000002c

08006b58 <__libc_init_array>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	4d0d      	ldr	r5, [pc, #52]	; (8006b90 <__libc_init_array+0x38>)
 8006b5c:	4c0d      	ldr	r4, [pc, #52]	; (8006b94 <__libc_init_array+0x3c>)
 8006b5e:	1b64      	subs	r4, r4, r5
 8006b60:	10a4      	asrs	r4, r4, #2
 8006b62:	2600      	movs	r6, #0
 8006b64:	42a6      	cmp	r6, r4
 8006b66:	d109      	bne.n	8006b7c <__libc_init_array+0x24>
 8006b68:	4d0b      	ldr	r5, [pc, #44]	; (8006b98 <__libc_init_array+0x40>)
 8006b6a:	4c0c      	ldr	r4, [pc, #48]	; (8006b9c <__libc_init_array+0x44>)
 8006b6c:	f000 f92c 	bl	8006dc8 <_init>
 8006b70:	1b64      	subs	r4, r4, r5
 8006b72:	10a4      	asrs	r4, r4, #2
 8006b74:	2600      	movs	r6, #0
 8006b76:	42a6      	cmp	r6, r4
 8006b78:	d105      	bne.n	8006b86 <__libc_init_array+0x2e>
 8006b7a:	bd70      	pop	{r4, r5, r6, pc}
 8006b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b80:	4798      	blx	r3
 8006b82:	3601      	adds	r6, #1
 8006b84:	e7ee      	b.n	8006b64 <__libc_init_array+0xc>
 8006b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8a:	4798      	blx	r3
 8006b8c:	3601      	adds	r6, #1
 8006b8e:	e7f2      	b.n	8006b76 <__libc_init_array+0x1e>
 8006b90:	08006e04 	.word	0x08006e04
 8006b94:	08006e04 	.word	0x08006e04
 8006b98:	08006e04 	.word	0x08006e04
 8006b9c:	08006e08 	.word	0x08006e08

08006ba0 <malloc>:
 8006ba0:	4b02      	ldr	r3, [pc, #8]	; (8006bac <malloc+0xc>)
 8006ba2:	4601      	mov	r1, r0
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	f000 b87d 	b.w	8006ca4 <_malloc_r>
 8006baa:	bf00      	nop
 8006bac:	2000002c 	.word	0x2000002c

08006bb0 <free>:
 8006bb0:	4b02      	ldr	r3, [pc, #8]	; (8006bbc <free+0xc>)
 8006bb2:	4601      	mov	r1, r0
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	f000 b80b 	b.w	8006bd0 <_free_r>
 8006bba:	bf00      	nop
 8006bbc:	2000002c 	.word	0x2000002c

08006bc0 <memset>:
 8006bc0:	4402      	add	r2, r0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d100      	bne.n	8006bca <memset+0xa>
 8006bc8:	4770      	bx	lr
 8006bca:	f803 1b01 	strb.w	r1, [r3], #1
 8006bce:	e7f9      	b.n	8006bc4 <memset+0x4>

08006bd0 <_free_r>:
 8006bd0:	b538      	push	{r3, r4, r5, lr}
 8006bd2:	4605      	mov	r5, r0
 8006bd4:	2900      	cmp	r1, #0
 8006bd6:	d041      	beq.n	8006c5c <_free_r+0x8c>
 8006bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bdc:	1f0c      	subs	r4, r1, #4
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	bfb8      	it	lt
 8006be2:	18e4      	addlt	r4, r4, r3
 8006be4:	f000 f8e2 	bl	8006dac <__malloc_lock>
 8006be8:	4a1d      	ldr	r2, [pc, #116]	; (8006c60 <_free_r+0x90>)
 8006bea:	6813      	ldr	r3, [r2, #0]
 8006bec:	b933      	cbnz	r3, 8006bfc <_free_r+0x2c>
 8006bee:	6063      	str	r3, [r4, #4]
 8006bf0:	6014      	str	r4, [r2, #0]
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bf8:	f000 b8de 	b.w	8006db8 <__malloc_unlock>
 8006bfc:	42a3      	cmp	r3, r4
 8006bfe:	d908      	bls.n	8006c12 <_free_r+0x42>
 8006c00:	6820      	ldr	r0, [r4, #0]
 8006c02:	1821      	adds	r1, r4, r0
 8006c04:	428b      	cmp	r3, r1
 8006c06:	bf01      	itttt	eq
 8006c08:	6819      	ldreq	r1, [r3, #0]
 8006c0a:	685b      	ldreq	r3, [r3, #4]
 8006c0c:	1809      	addeq	r1, r1, r0
 8006c0e:	6021      	streq	r1, [r4, #0]
 8006c10:	e7ed      	b.n	8006bee <_free_r+0x1e>
 8006c12:	461a      	mov	r2, r3
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	b10b      	cbz	r3, 8006c1c <_free_r+0x4c>
 8006c18:	42a3      	cmp	r3, r4
 8006c1a:	d9fa      	bls.n	8006c12 <_free_r+0x42>
 8006c1c:	6811      	ldr	r1, [r2, #0]
 8006c1e:	1850      	adds	r0, r2, r1
 8006c20:	42a0      	cmp	r0, r4
 8006c22:	d10b      	bne.n	8006c3c <_free_r+0x6c>
 8006c24:	6820      	ldr	r0, [r4, #0]
 8006c26:	4401      	add	r1, r0
 8006c28:	1850      	adds	r0, r2, r1
 8006c2a:	4283      	cmp	r3, r0
 8006c2c:	6011      	str	r1, [r2, #0]
 8006c2e:	d1e0      	bne.n	8006bf2 <_free_r+0x22>
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	6053      	str	r3, [r2, #4]
 8006c36:	4401      	add	r1, r0
 8006c38:	6011      	str	r1, [r2, #0]
 8006c3a:	e7da      	b.n	8006bf2 <_free_r+0x22>
 8006c3c:	d902      	bls.n	8006c44 <_free_r+0x74>
 8006c3e:	230c      	movs	r3, #12
 8006c40:	602b      	str	r3, [r5, #0]
 8006c42:	e7d6      	b.n	8006bf2 <_free_r+0x22>
 8006c44:	6820      	ldr	r0, [r4, #0]
 8006c46:	1821      	adds	r1, r4, r0
 8006c48:	428b      	cmp	r3, r1
 8006c4a:	bf04      	itt	eq
 8006c4c:	6819      	ldreq	r1, [r3, #0]
 8006c4e:	685b      	ldreq	r3, [r3, #4]
 8006c50:	6063      	str	r3, [r4, #4]
 8006c52:	bf04      	itt	eq
 8006c54:	1809      	addeq	r1, r1, r0
 8006c56:	6021      	streq	r1, [r4, #0]
 8006c58:	6054      	str	r4, [r2, #4]
 8006c5a:	e7ca      	b.n	8006bf2 <_free_r+0x22>
 8006c5c:	bd38      	pop	{r3, r4, r5, pc}
 8006c5e:	bf00      	nop
 8006c60:	20000888 	.word	0x20000888

08006c64 <sbrk_aligned>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	4e0e      	ldr	r6, [pc, #56]	; (8006ca0 <sbrk_aligned+0x3c>)
 8006c68:	460c      	mov	r4, r1
 8006c6a:	6831      	ldr	r1, [r6, #0]
 8006c6c:	4605      	mov	r5, r0
 8006c6e:	b911      	cbnz	r1, 8006c76 <sbrk_aligned+0x12>
 8006c70:	f000 f88c 	bl	8006d8c <_sbrk_r>
 8006c74:	6030      	str	r0, [r6, #0]
 8006c76:	4621      	mov	r1, r4
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f000 f887 	bl	8006d8c <_sbrk_r>
 8006c7e:	1c43      	adds	r3, r0, #1
 8006c80:	d00a      	beq.n	8006c98 <sbrk_aligned+0x34>
 8006c82:	1cc4      	adds	r4, r0, #3
 8006c84:	f024 0403 	bic.w	r4, r4, #3
 8006c88:	42a0      	cmp	r0, r4
 8006c8a:	d007      	beq.n	8006c9c <sbrk_aligned+0x38>
 8006c8c:	1a21      	subs	r1, r4, r0
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f000 f87c 	bl	8006d8c <_sbrk_r>
 8006c94:	3001      	adds	r0, #1
 8006c96:	d101      	bne.n	8006c9c <sbrk_aligned+0x38>
 8006c98:	f04f 34ff 	mov.w	r4, #4294967295
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ca0:	2000088c 	.word	0x2000088c

08006ca4 <_malloc_r>:
 8006ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca8:	1ccd      	adds	r5, r1, #3
 8006caa:	f025 0503 	bic.w	r5, r5, #3
 8006cae:	3508      	adds	r5, #8
 8006cb0:	2d0c      	cmp	r5, #12
 8006cb2:	bf38      	it	cc
 8006cb4:	250c      	movcc	r5, #12
 8006cb6:	2d00      	cmp	r5, #0
 8006cb8:	4607      	mov	r7, r0
 8006cba:	db01      	blt.n	8006cc0 <_malloc_r+0x1c>
 8006cbc:	42a9      	cmp	r1, r5
 8006cbe:	d905      	bls.n	8006ccc <_malloc_r+0x28>
 8006cc0:	230c      	movs	r3, #12
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	2600      	movs	r6, #0
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ccc:	4e2e      	ldr	r6, [pc, #184]	; (8006d88 <_malloc_r+0xe4>)
 8006cce:	f000 f86d 	bl	8006dac <__malloc_lock>
 8006cd2:	6833      	ldr	r3, [r6, #0]
 8006cd4:	461c      	mov	r4, r3
 8006cd6:	bb34      	cbnz	r4, 8006d26 <_malloc_r+0x82>
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4638      	mov	r0, r7
 8006cdc:	f7ff ffc2 	bl	8006c64 <sbrk_aligned>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	d14d      	bne.n	8006d82 <_malloc_r+0xde>
 8006ce6:	6834      	ldr	r4, [r6, #0]
 8006ce8:	4626      	mov	r6, r4
 8006cea:	2e00      	cmp	r6, #0
 8006cec:	d140      	bne.n	8006d70 <_malloc_r+0xcc>
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	eb04 0803 	add.w	r8, r4, r3
 8006cf8:	f000 f848 	bl	8006d8c <_sbrk_r>
 8006cfc:	4580      	cmp	r8, r0
 8006cfe:	d13a      	bne.n	8006d76 <_malloc_r+0xd2>
 8006d00:	6821      	ldr	r1, [r4, #0]
 8006d02:	3503      	adds	r5, #3
 8006d04:	1a6d      	subs	r5, r5, r1
 8006d06:	f025 0503 	bic.w	r5, r5, #3
 8006d0a:	3508      	adds	r5, #8
 8006d0c:	2d0c      	cmp	r5, #12
 8006d0e:	bf38      	it	cc
 8006d10:	250c      	movcc	r5, #12
 8006d12:	4629      	mov	r1, r5
 8006d14:	4638      	mov	r0, r7
 8006d16:	f7ff ffa5 	bl	8006c64 <sbrk_aligned>
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	d02b      	beq.n	8006d76 <_malloc_r+0xd2>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	442b      	add	r3, r5
 8006d22:	6023      	str	r3, [r4, #0]
 8006d24:	e00e      	b.n	8006d44 <_malloc_r+0xa0>
 8006d26:	6822      	ldr	r2, [r4, #0]
 8006d28:	1b52      	subs	r2, r2, r5
 8006d2a:	d41e      	bmi.n	8006d6a <_malloc_r+0xc6>
 8006d2c:	2a0b      	cmp	r2, #11
 8006d2e:	d916      	bls.n	8006d5e <_malloc_r+0xba>
 8006d30:	1961      	adds	r1, r4, r5
 8006d32:	42a3      	cmp	r3, r4
 8006d34:	6025      	str	r5, [r4, #0]
 8006d36:	bf18      	it	ne
 8006d38:	6059      	strne	r1, [r3, #4]
 8006d3a:	6863      	ldr	r3, [r4, #4]
 8006d3c:	bf08      	it	eq
 8006d3e:	6031      	streq	r1, [r6, #0]
 8006d40:	5162      	str	r2, [r4, r5]
 8006d42:	604b      	str	r3, [r1, #4]
 8006d44:	4638      	mov	r0, r7
 8006d46:	f104 060b 	add.w	r6, r4, #11
 8006d4a:	f000 f835 	bl	8006db8 <__malloc_unlock>
 8006d4e:	f026 0607 	bic.w	r6, r6, #7
 8006d52:	1d23      	adds	r3, r4, #4
 8006d54:	1af2      	subs	r2, r6, r3
 8006d56:	d0b6      	beq.n	8006cc6 <_malloc_r+0x22>
 8006d58:	1b9b      	subs	r3, r3, r6
 8006d5a:	50a3      	str	r3, [r4, r2]
 8006d5c:	e7b3      	b.n	8006cc6 <_malloc_r+0x22>
 8006d5e:	6862      	ldr	r2, [r4, #4]
 8006d60:	42a3      	cmp	r3, r4
 8006d62:	bf0c      	ite	eq
 8006d64:	6032      	streq	r2, [r6, #0]
 8006d66:	605a      	strne	r2, [r3, #4]
 8006d68:	e7ec      	b.n	8006d44 <_malloc_r+0xa0>
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	6864      	ldr	r4, [r4, #4]
 8006d6e:	e7b2      	b.n	8006cd6 <_malloc_r+0x32>
 8006d70:	4634      	mov	r4, r6
 8006d72:	6876      	ldr	r6, [r6, #4]
 8006d74:	e7b9      	b.n	8006cea <_malloc_r+0x46>
 8006d76:	230c      	movs	r3, #12
 8006d78:	603b      	str	r3, [r7, #0]
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	f000 f81c 	bl	8006db8 <__malloc_unlock>
 8006d80:	e7a1      	b.n	8006cc6 <_malloc_r+0x22>
 8006d82:	6025      	str	r5, [r4, #0]
 8006d84:	e7de      	b.n	8006d44 <_malloc_r+0xa0>
 8006d86:	bf00      	nop
 8006d88:	20000888 	.word	0x20000888

08006d8c <_sbrk_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4d06      	ldr	r5, [pc, #24]	; (8006da8 <_sbrk_r+0x1c>)
 8006d90:	2300      	movs	r3, #0
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	f7fa f846 	bl	8000e28 <_sbrk>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d102      	bne.n	8006da6 <_sbrk_r+0x1a>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	b103      	cbz	r3, 8006da6 <_sbrk_r+0x1a>
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	20000890 	.word	0x20000890

08006dac <__malloc_lock>:
 8006dac:	4801      	ldr	r0, [pc, #4]	; (8006db4 <__malloc_lock+0x8>)
 8006dae:	f000 b809 	b.w	8006dc4 <__retarget_lock_acquire_recursive>
 8006db2:	bf00      	nop
 8006db4:	20000894 	.word	0x20000894

08006db8 <__malloc_unlock>:
 8006db8:	4801      	ldr	r0, [pc, #4]	; (8006dc0 <__malloc_unlock+0x8>)
 8006dba:	f000 b804 	b.w	8006dc6 <__retarget_lock_release_recursive>
 8006dbe:	bf00      	nop
 8006dc0:	20000894 	.word	0x20000894

08006dc4 <__retarget_lock_acquire_recursive>:
 8006dc4:	4770      	bx	lr

08006dc6 <__retarget_lock_release_recursive>:
 8006dc6:	4770      	bx	lr

08006dc8 <_init>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	bf00      	nop
 8006dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dce:	bc08      	pop	{r3}
 8006dd0:	469e      	mov	lr, r3
 8006dd2:	4770      	bx	lr

08006dd4 <_fini>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	bf00      	nop
 8006dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dda:	bc08      	pop	{r3}
 8006ddc:	469e      	mov	lr, r3
 8006dde:	4770      	bx	lr
