
Button_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006dec  08006dec  00016dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e08  08006e08  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006e08  08006e08  00016e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e10  08006e10  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e10  08006e10  00016e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000808  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00020090  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015689  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036f7  00000000  00000000  00035743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00038e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa0  00000000  00000000  00039f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002368d  00000000  00000000  0003aef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017179  00000000  00000000  0005e57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb530  00000000  00000000  000756f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140c26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048c4  00000000  00000000  00140c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006dd4 	.word	0x08006dd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006dd4 	.word	0x08006dd4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14d      	bne.n	80002a4 <__udivmoddi4+0xac>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d968      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b152      	cbz	r2, 800022a <__udivmoddi4+0x32>
 8000214:	fa01 f302 	lsl.w	r3, r1, r2
 8000218:	f1c2 0120 	rsb	r1, r2, #32
 800021c:	fa20 f101 	lsr.w	r1, r0, r1
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	ea41 0803 	orr.w	r8, r1, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800022e:	0c21      	lsrs	r1, r4, #16
 8000230:	fbb8 fef5 	udiv	lr, r8, r5
 8000234:	fa1f f78c 	uxth.w	r7, ip
 8000238:	fb05 831e 	mls	r3, r5, lr, r8
 800023c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000240:	fb0e f107 	mul.w	r1, lr, r7
 8000244:	4299      	cmp	r1, r3
 8000246:	d90b      	bls.n	8000260 <__udivmoddi4+0x68>
 8000248:	eb1c 0303 	adds.w	r3, ip, r3
 800024c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000250:	f080 811e 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000254:	4299      	cmp	r1, r3
 8000256:	f240 811b 	bls.w	8000490 <__udivmoddi4+0x298>
 800025a:	f1ae 0e02 	sub.w	lr, lr, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f5 	udiv	r0, r3, r5
 8000268:	fb05 3310 	mls	r3, r5, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x96>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 8108 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8105 	bls.w	8000494 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000294:	2100      	movs	r1, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa8>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d908      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a8:	2e00      	cmp	r6, #0
 80002aa:	f000 80ee 	beq.w	800048a <__udivmoddi4+0x292>
 80002ae:	2100      	movs	r1, #0
 80002b0:	e9c6 0500 	strd	r0, r5, [r6]
 80002b4:	4608      	mov	r0, r1
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	42ab      	cmp	r3, r5
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb65 0303 	sbc.w	r3, r5, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e2      	beq.n	80002a0 <__udivmoddi4+0xa8>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7df      	b.n	80002a0 <__udivmoddi4+0xa8>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8091 	bne.w	8000410 <__udivmoddi4+0x218>
 80002ee:	eba1 050c 	sub.w	r5, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000300:	fb07 5013 	mls	r0, r7, r3, r5
 8000304:	0c25      	lsrs	r5, r4, #16
 8000306:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	42a8      	cmp	r0, r5
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0505 	adds.w	r5, ip, r5
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	42a8      	cmp	r0, r5
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a2d      	subs	r5, r5, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb5 f0f7 	udiv	r0, r5, r7
 800032c:	fb07 5510 	mls	r5, r7, r0, r5
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 35ff 	add.w	r5, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4628      	mov	r0, r5
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79e      	b.n	8000296 <__udivmoddi4+0x9e>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa05 f301 	lsl.w	r3, r5, r1
 800036e:	431c      	orrs	r4, r3
 8000370:	40fd      	lsrs	r5, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f301 	lsl.w	r3, r0, r1
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 5518 	mls	r5, r9, r8, r5
 8000388:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	42a8      	cmp	r0, r5
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0505 	adds.w	r5, ip, r5
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	42a8      	cmp	r0, r5
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4465      	add	r5, ip
 80003b0:	1a2d      	subs	r5, r5, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003b8:	fb09 5510 	mls	r5, r9, r0, r5
 80003bc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45ae      	cmp	lr, r5
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0505 	adds.w	r5, ip, r5
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	45ae      	cmp	lr, r5
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4465      	add	r5, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba5 050e 	sub.w	r5, r5, lr
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15e      	cbz	r6, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb65 050e 	sbc.w	r5, r5, lr
 80003fa:	fa05 f707 	lsl.w	r7, r5, r7
 80003fe:	fa22 f301 	lsr.w	r3, r2, r1
 8000402:	40cd      	lsrs	r5, r1
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c6 7500 	strd	r7, r5, [r6]
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f103 	lsr.w	r1, r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa25 f303 	lsr.w	r3, r5, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000430:	fb07 3011 	mls	r0, r7, r1, r3
 8000434:	0c2b      	lsrs	r3, r5, #16
 8000436:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800043a:	fb01 f00e 	mul.w	r0, r1, lr
 800043e:	4298      	cmp	r0, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f101 38ff 	add.w	r8, r1, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	4298      	cmp	r0, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3902      	subs	r1, #2
 8000456:	4463      	add	r3, ip
 8000458:	1a1b      	subs	r3, r3, r0
 800045a:	b2ad      	uxth	r5, r5
 800045c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000460:	fb07 3310 	mls	r3, r7, r0, r3
 8000464:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000468:	fb00 f30e 	mul.w	r3, r0, lr
 800046c:	42ab      	cmp	r3, r5
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0505 	adds.w	r5, ip, r5
 8000474:	f100 38ff 	add.w	r8, r0, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	42ab      	cmp	r3, r5
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3802      	subs	r0, #2
 8000480:	4465      	add	r5, ip
 8000482:	1aed      	subs	r5, r5, r3
 8000484:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e707      	b.n	80002a0 <__udivmoddi4+0xa8>
 8000490:	4686      	mov	lr, r0
 8000492:	e6e5      	b.n	8000260 <__udivmoddi4+0x68>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fa      	b.n	800028e <__udivmoddi4+0x96>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4641      	mov	r1, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4465      	add	r5, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4608      	mov	r0, r1
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  HAL_Init();
 80004d2:	f000 fd15 	bl	8000f00 <HAL_Init>
  SystemClock_Config();
 80004d6:	f000 f943 	bl	8000760 <SystemClock_Config>

  MX_GPIO_Init();
 80004da:	f000 fa3f 	bl	800095c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004de:	f000 f9a9 	bl	8000834 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e2:	f000 f9d5 	bl	8000890 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e6:	f000 fa03 	bl	80008f0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004ea:	f006 f887 	bl	80065fc <MX_USB_HOST_Init>

  uint8_t count = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	71fb      	strb	r3, [r7, #7]
  uint8_t count1 = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	71bb      	strb	r3, [r7, #6]
  uint8_t button_val = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	717b      	strb	r3, [r7, #5]
  while (1)
  {
	button_val = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80004fa:	2101      	movs	r1, #1
 80004fc:	4896      	ldr	r0, [pc, #600]	; (8000758 <main+0x28c>)
 80004fe:	f001 f839 	bl	8001574 <HAL_GPIO_ReadPin>
 8000502:	4603      	mov	r3, r0
 8000504:	717b      	strb	r3, [r7, #5]
	  if(button_val==1)
 8000506:	797b      	ldrb	r3, [r7, #5]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d108      	bne.n	800051e <main+0x52>
	  {
		  HAL_Delay(400);
 800050c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000510:	f000 fd64 	bl	8000fdc <HAL_Delay>
		  count++;
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	3301      	adds	r3, #1
 8000518:	71fb      	strb	r3, [r7, #7]
		  button_val =0;
 800051a:	2300      	movs	r3, #0
 800051c:	717b      	strb	r3, [r7, #5]
	  }
	if(count==1)
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d118      	bne.n	8000556 <main+0x8a>
	{
		while(button_val==1 && count == 1)
 8000524:	e005      	b.n	8000532 <main+0x66>
					{
						count1++;
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	3301      	adds	r3, #1
 800052a:	71bb      	strb	r3, [r7, #6]
						if(count1==200)
 800052c:	79bb      	ldrb	r3, [r7, #6]
 800052e:	2bc8      	cmp	r3, #200	; 0xc8
 8000530:	d006      	beq.n	8000540 <main+0x74>
		while(button_val==1 && count == 1)
 8000532:	797b      	ldrb	r3, [r7, #5]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d104      	bne.n	8000542 <main+0x76>
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d0f3      	beq.n	8000526 <main+0x5a>
 800053e:	e000      	b.n	8000542 <main+0x76>
						{
							break;
 8000540:	bf00      	nop
						}
					}
					if(count==1)
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d1d8      	bne.n	80004fa <main+0x2e>
					{
		          HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,SET);
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054e:	4883      	ldr	r0, [pc, #524]	; (800075c <main+0x290>)
 8000550:	f001 f827 	bl	80015a2 <HAL_GPIO_WritePin>
 8000554:	e7d1      	b.n	80004fa <main+0x2e>
					}
	}
	else if(count>1 && count<5)
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b01      	cmp	r3, #1
 800055a:	f240 80c4 	bls.w	80006e6 <main+0x21a>
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b04      	cmp	r3, #4
 8000562:	f200 80c0 	bhi.w	80006e6 <main+0x21a>
	  {
	if(count==2)
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d13c      	bne.n	80005e6 <main+0x11a>
	  {

		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000572:	487a      	ldr	r0, [pc, #488]	; (800075c <main+0x290>)
 8000574:	f001 f815 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800057e:	4877      	ldr	r0, [pc, #476]	; (800075c <main+0x290>)
 8000580:	f001 f80f 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000584:	2064      	movs	r0, #100	; 0x64
 8000586:	f000 fd29 	bl	8000fdc <HAL_Delay>
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000590:	4872      	ldr	r0, [pc, #456]	; (800075c <main+0x290>)
 8000592:	f001 f806 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059c:	486f      	ldr	r0, [pc, #444]	; (800075c <main+0x290>)
 800059e:	f001 f800 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80005a2:	2064      	movs	r0, #100	; 0x64
 80005a4:	f000 fd1a 	bl	8000fdc <HAL_Delay>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ae:	486b      	ldr	r0, [pc, #428]	; (800075c <main+0x290>)
 80005b0:	f000 fff7 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port,LED_ORANGE_Pin, SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ba:	4868      	ldr	r0, [pc, #416]	; (800075c <main+0x290>)
 80005bc:	f000 fff1 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f000 fd0b 	bl	8000fdc <HAL_Delay>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port,LED_ORANGE_Pin, RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005cc:	4863      	ldr	r0, [pc, #396]	; (800075c <main+0x290>)
 80005ce:	f000 ffe8 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d8:	4860      	ldr	r0, [pc, #384]	; (800075c <main+0x290>)
 80005da:	f000 ffe2 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80005de:	2064      	movs	r0, #100	; 0x64
 80005e0:	f000 fcfc 	bl	8000fdc <HAL_Delay>
	if(count==2)
 80005e4:	e0b5      	b.n	8000752 <main+0x286>
	  }
	  else if(count == 3)
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	d13c      	bne.n	8000666 <main+0x19a>
	  {
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f2:	485a      	ldr	r0, [pc, #360]	; (800075c <main+0x290>)
 80005f4:	f000 ffd5 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fe:	4857      	ldr	r0, [pc, #348]	; (800075c <main+0x290>)
 8000600:	f000 ffcf 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_Delay(25);
 8000604:	2019      	movs	r0, #25
 8000606:	f000 fce9 	bl	8000fdc <HAL_Delay>
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000610:	4852      	ldr	r0, [pc, #328]	; (800075c <main+0x290>)
 8000612:	f000 ffc6 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061c:	484f      	ldr	r0, [pc, #316]	; (800075c <main+0x290>)
 800061e:	f000 ffc0 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_Delay(25);
 8000622:	2019      	movs	r0, #25
 8000624:	f000 fcda 	bl	8000fdc <HAL_Delay>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062e:	484b      	ldr	r0, [pc, #300]	; (800075c <main+0x290>)
 8000630:	f000 ffb7 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port,LED_ORANGE_Pin, SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063a:	4848      	ldr	r0, [pc, #288]	; (800075c <main+0x290>)
 800063c:	f000 ffb1 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_Delay(25);
 8000640:	2019      	movs	r0, #25
 8000642:	f000 fccb 	bl	8000fdc <HAL_Delay>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port,LED_ORANGE_Pin, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064c:	4843      	ldr	r0, [pc, #268]	; (800075c <main+0x290>)
 800064e:	f000 ffa8 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000658:	4840      	ldr	r0, [pc, #256]	; (800075c <main+0x290>)
 800065a:	f000 ffa2 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_Delay(25);
 800065e:	2019      	movs	r0, #25
 8000660:	f000 fcbc 	bl	8000fdc <HAL_Delay>
	if(count==2)
 8000664:	e075      	b.n	8000752 <main+0x286>
	  }
	  else if(count == 4)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b04      	cmp	r3, #4
 800066a:	d172      	bne.n	8000752 <main+0x286>
	  {
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000672:	483a      	ldr	r0, [pc, #232]	; (800075c <main+0x290>)
 8000674:	f000 ff95 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067e:	4837      	ldr	r0, [pc, #220]	; (800075c <main+0x290>)
 8000680:	f000 ff8f 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_Delay(13);
 8000684:	200d      	movs	r0, #13
 8000686:	f000 fca9 	bl	8000fdc <HAL_Delay>
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000690:	4832      	ldr	r0, [pc, #200]	; (800075c <main+0x290>)
 8000692:	f000 ff86 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069c:	482f      	ldr	r0, [pc, #188]	; (800075c <main+0x290>)
 800069e:	f000 ff80 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_Delay(13);
 80006a2:	200d      	movs	r0, #13
 80006a4:	f000 fc9a 	bl	8000fdc <HAL_Delay>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ae:	482b      	ldr	r0, [pc, #172]	; (800075c <main+0x290>)
 80006b0:	f000 ff77 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port,LED_ORANGE_Pin, SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ba:	4828      	ldr	r0, [pc, #160]	; (800075c <main+0x290>)
 80006bc:	f000 ff71 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_Delay(13);
 80006c0:	200d      	movs	r0, #13
 80006c2:	f000 fc8b 	bl	8000fdc <HAL_Delay>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port,LED_ORANGE_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006cc:	4823      	ldr	r0, [pc, #140]	; (800075c <main+0x290>)
 80006ce:	f000 ff68 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d8:	4820      	ldr	r0, [pc, #128]	; (800075c <main+0x290>)
 80006da:	f000 ff62 	bl	80015a2 <HAL_GPIO_WritePin>
		  HAL_Delay(13);
 80006de:	200d      	movs	r0, #13
 80006e0:	f000 fc7c 	bl	8000fdc <HAL_Delay>
	if(count==2)
 80006e4:	e035      	b.n	8000752 <main+0x286>
	  }
	  }
	  else if(count == 5)
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b05      	cmp	r3, #5
 80006ea:	d112      	bne.n	8000712 <main+0x246>
	  {
			  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port,LED_ORANGE_Pin,RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f2:	481a      	ldr	r0, [pc, #104]	; (800075c <main+0x290>)
 80006f4:	f000 ff55 	bl	80015a2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fe:	4817      	ldr	r0, [pc, #92]	; (800075c <main+0x290>)
 8000700:	f000 ff4f 	bl	80015a2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800070a:	4814      	ldr	r0, [pc, #80]	; (800075c <main+0x290>)
 800070c:	f000 ff49 	bl	80015a2 <HAL_GPIO_WritePin>
 8000710:	e6f3      	b.n	80004fa <main+0x2e>
	  }
	  else if(count==6)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b06      	cmp	r3, #6
 8000716:	f47f aef0 	bne.w	80004fa <main+0x2e>
	  {
			while(button_val==1 && count == 6)
 800071a:	e005      	b.n	8000728 <main+0x25c>
			{
				count1++;
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	3301      	adds	r3, #1
 8000720:	71bb      	strb	r3, [r7, #6]
				if(count1==200)
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	2bc8      	cmp	r3, #200	; 0xc8
 8000726:	d006      	beq.n	8000736 <main+0x26a>
			while(button_val==1 && count == 6)
 8000728:	797b      	ldrb	r3, [r7, #5]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d104      	bne.n	8000738 <main+0x26c>
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b06      	cmp	r3, #6
 8000732:	d0f3      	beq.n	800071c <main+0x250>
 8000734:	e000      	b.n	8000738 <main+0x26c>
				{
					break;
 8000736:	bf00      	nop
				}
			}
			if(count==6)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b06      	cmp	r3, #6
 800073c:	f47f aedd 	bne.w	80004fa <main+0x2e>
			{
          HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <main+0x290>)
 8000748:	f000 ff2b 	bl	80015a2 <HAL_GPIO_WritePin>
		  count=0;
 800074c:	2300      	movs	r3, #0
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	e6d3      	b.n	80004fa <main+0x2e>
	if(count==2)
 8000752:	bf00      	nop
	button_val = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8000754:	e6d1      	b.n	80004fa <main+0x2e>
 8000756:	bf00      	nop
 8000758:	40020000 	.word	0x40020000
 800075c:	40020c00 	.word	0x40020c00

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	; 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f006 fa2c 	bl	8006bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <SystemClock_Config+0xcc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a27      	ldr	r2, [pc, #156]	; (800082c <SystemClock_Config+0xcc>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b25      	ldr	r3, [pc, #148]	; (800082c <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <SystemClock_Config+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <SystemClock_Config+0xd0>)
 80007aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d0:	2308      	movs	r3, #8
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007de:	2307      	movs	r3, #7
 80007e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	f107 0320 	add.w	r3, r7, #32
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 f8be 	bl	8003968 <HAL_RCC_OscConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007f2:	f000 f9af 	bl	8000b54 <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	230f      	movs	r3, #15
 80007f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fa:	2302      	movs	r3, #2
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000802:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000806:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2105      	movs	r1, #5
 8000814:	4618      	mov	r0, r3
 8000816:	f003 fb1f 	bl	8003e58 <HAL_RCC_ClockConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000820:	f000 f998 	bl	8000b54 <Error_Handler>
  }
}
 8000824:	bf00      	nop
 8000826:	3750      	adds	r7, #80	; 0x50
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_I2C1_Init+0x50>)
 800083a:	4a13      	ldr	r2, [pc, #76]	; (8000888 <MX_I2C1_Init+0x54>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_I2C1_Init+0x50>)
 8000840:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_I2C1_Init+0x58>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_I2C1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_I2C1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_I2C1_Init+0x50>)
 8000852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000856:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_I2C1_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_I2C1_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_I2C1_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_I2C1_Init+0x50>)
 8000872:	f002 fa9b 	bl	8002dac <HAL_I2C_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800087c:	f000 f96a 	bl	8000b54 <Error_Handler>
  }

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200000ac 	.word	0x200000ac
 8000888:	40005400 	.word	0x40005400
 800088c:	000186a0 	.word	0x000186a0

08000890 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  hi2s3.Instance = SPI3;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_I2S3_Init+0x54>)
 8000896:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <MX_I2S3_Init+0x58>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2S3_Init+0x54>)
 800089c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008b8:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <MX_I2S3_Init+0x5c>)
 80008ba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008d0:	f002 fbb0 	bl	8003034 <HAL_I2S_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008da:	f000 f93b 	bl	8000b54 <Error_Handler>
  }

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000100 	.word	0x20000100
 80008e8:	40003c00 	.word	0x40003c00
 80008ec:	00017700 	.word	0x00017700

080008f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_SPI1_Init+0x64>)
 80008f6:	4a18      	ldr	r2, [pc, #96]	; (8000958 <MX_SPI1_Init+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_SPI1_Init+0x64>)
 80008fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000900:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_SPI1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_SPI1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_SPI1_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_SPI1_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_SPI1_Init+0x64>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_SPI1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_SPI1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_SPI1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_SPI1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SPI1_Init+0x64>)
 800093c:	220a      	movs	r2, #10
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_SPI1_Init+0x64>)
 8000942:	f003 fdd7 	bl	80044f4 <HAL_SPI_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800094c:	f000 f902 	bl	8000b54 <Error_Handler>
  }

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000148 	.word	0x20000148
 8000958:	40013000 	.word	0x40013000

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	; 0x30
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	4b71      	ldr	r3, [pc, #452]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a70      	ldr	r2, [pc, #448]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 800097c:	f043 0310 	orr.w	r3, r3, #16
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b6e      	ldr	r3, [pc, #440]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0310 	and.w	r3, r3, #16
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	4b6a      	ldr	r3, [pc, #424]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a69      	ldr	r2, [pc, #420]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b67      	ldr	r3, [pc, #412]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b63      	ldr	r3, [pc, #396]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a62      	ldr	r2, [pc, #392]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b60      	ldr	r3, [pc, #384]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b5c      	ldr	r3, [pc, #368]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a5b      	ldr	r2, [pc, #364]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b59      	ldr	r3, [pc, #356]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	4b55      	ldr	r3, [pc, #340]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a54      	ldr	r2, [pc, #336]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b52      	ldr	r3, [pc, #328]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b4e      	ldr	r3, [pc, #312]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a4d      	ldr	r2, [pc, #308]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <MX_GPIO_Init+0x1e0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2108      	movs	r1, #8
 8000a1e:	4848      	ldr	r0, [pc, #288]	; (8000b40 <MX_GPIO_Init+0x1e4>)
 8000a20:	f000 fdbf 	bl	80015a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2101      	movs	r1, #1
 8000a28:	4846      	ldr	r0, [pc, #280]	; (8000b44 <MX_GPIO_Init+0x1e8>)
 8000a2a:	f000 fdba 	bl	80015a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a34:	4844      	ldr	r0, [pc, #272]	; (8000b48 <MX_GPIO_Init+0x1ec>)
 8000a36:	f000 fdb4 	bl	80015a2 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	483b      	ldr	r0, [pc, #236]	; (8000b40 <MX_GPIO_Init+0x1e4>)
 8000a52:	f000 fbf5 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a56:	2301      	movs	r3, #1
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4835      	ldr	r0, [pc, #212]	; (8000b44 <MX_GPIO_Init+0x1e8>)
 8000a6e:	f000 fbe7 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a72:	2308      	movs	r3, #8
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a82:	2305      	movs	r3, #5
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	482d      	ldr	r0, [pc, #180]	; (8000b44 <MX_GPIO_Init+0x1e8>)
 8000a8e:	f000 fbd7 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4829      	ldr	r0, [pc, #164]	; (8000b4c <MX_GPIO_Init+0x1f0>)
 8000aa6:	f000 fbcb 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4824      	ldr	r0, [pc, #144]	; (8000b50 <MX_GPIO_Init+0x1f4>)
 8000abe:	f000 fbbf 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad4:	2305      	movs	r3, #5
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	481c      	ldr	r0, [pc, #112]	; (8000b50 <MX_GPIO_Init+0x1f4>)
 8000ae0:	f000 fbae 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000ae4:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ae8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4812      	ldr	r0, [pc, #72]	; (8000b48 <MX_GPIO_Init+0x1ec>)
 8000afe:	f000 fb9f 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b02:	2320      	movs	r3, #32
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_GPIO_Init+0x1ec>)
 8000b16:	f000 fb93 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b1e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_GPIO_Init+0x1e4>)
 8000b30:	f000 fb86 	bl	8001240 <HAL_GPIO_Init>

}
 8000b34:	bf00      	nop
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	40020400 	.word	0x40020400

08000b54 <Error_Handler>:
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  __disable_irq();
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <HAL_MspInit+0x4c>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x4c>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b9e:	2007      	movs	r0, #7
 8000ba0:	f000 fb0c 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <HAL_I2C_MspInit+0x84>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12c      	bne.n	8000c2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_I2C_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_I2C_MspInit+0x88>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_I2C_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bee:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf4:	2312      	movs	r3, #18
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c00:	2304      	movs	r3, #4
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <HAL_I2C_MspInit+0x8c>)
 8000c0c:	f000 fb18 	bl	8001240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_I2C_MspInit+0x88>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_I2C_MspInit+0x88>)
 8000c1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_I2C_MspInit+0x88>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40005400 	.word	0x40005400
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400

08000c40 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a31      	ldr	r2, [pc, #196]	; (8000d30 <HAL_I2S_MspInit+0xf0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d15a      	bne.n	8000d26 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c70:	2301      	movs	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c74:	23c0      	movs	r3, #192	; 0xc0
 8000c76:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4618      	mov	r0, r3
 8000c82:	f003 faf9 	bl	8004278 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c8c:	f7ff ff62 	bl	8000b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	4a26      	ldr	r2, [pc, #152]	; (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca0:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cf4:	2306      	movs	r3, #6
 8000cf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480e      	ldr	r0, [pc, #56]	; (8000d38 <HAL_I2S_MspInit+0xf8>)
 8000d00:	f000 fa9e 	bl	8001240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d04:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d16:	2306      	movs	r3, #6
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4806      	ldr	r0, [pc, #24]	; (8000d3c <HAL_I2S_MspInit+0xfc>)
 8000d22:	f000 fa8d 	bl	8001240 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3738      	adds	r7, #56	; 0x38
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40003c00 	.word	0x40003c00
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	40020800 	.word	0x40020800

08000d40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <HAL_SPI_MspInit+0x84>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d12b      	bne.n	8000dba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_SPI_MspInit+0x88>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <HAL_SPI_MspInit+0x88>)
 8000d6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_SPI_MspInit+0x88>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_SPI_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_SPI_MspInit+0x88>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_SPI_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d9a:	23e0      	movs	r3, #224	; 0xe0
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000daa:	2305      	movs	r3, #5
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <HAL_SPI_MspInit+0x8c>)
 8000db6:	f000 fa43 	bl	8001240 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40013000 	.word	0x40013000
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e16:	f000 f8c5 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <OTG_FS_IRQHandler+0x10>)
 8000e26:	f000 fe3f 	bl	8001aa8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000584 	.word	0x20000584

08000e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <_sbrk+0x5c>)
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <_sbrk+0x60>)
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <_sbrk+0x64>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <_sbrk+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d207      	bcs.n	8000e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e64:	f005 fe78 	bl	8006b58 <__errno>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	e009      	b.n	8000e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <_sbrk+0x64>)
 8000e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20020000 	.word	0x20020000
 8000e94:	00000400 	.word	0x00000400
 8000e98:	200001a0 	.word	0x200001a0
 8000e9c:	20000898 	.word	0x20000898

08000ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eb2:	490e      	ldr	r1, [pc, #56]	; (8000eec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec8:	4c0b      	ldr	r4, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ed6:	f7ff ffe3 	bl	8000ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eda:	f005 fe43 	bl	8006b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ede:	f7ff faf5 	bl	80004cc <main>
  bx  lr    
 8000ee2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ef0:	08006e18 	.word	0x08006e18
  ldr r2, =_sbss
 8000ef4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ef8:	20000898 	.word	0x20000898

08000efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <HAL_Init+0x40>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_Init+0x40>)
 8000f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_Init+0x40>)
 8000f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f947 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f808 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fe14 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023c00 	.word	0x40023c00

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x54>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x58>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f95f 	bl	8001226 <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00e      	b.n	8000f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d80a      	bhi.n	8000f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f000 f927 	bl	80011d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_InitTick+0x5c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_IncTick+0x1c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <HAL_IncTick+0x20>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <HAL_IncTick+0x20>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	200001a4 	.word	0x200001a4

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b02      	ldr	r3, [pc, #8]	; (8000fd8 <HAL_GetTick+0x10>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	200001a4 	.word	0x200001a4

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff fff0 	bl	8000fc8 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_Delay+0x44>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffe0 	bl	8000fc8 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0b      	blt.n	80010b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4906      	ldr	r1, [pc, #24]	; (80010bc <__NVIC_EnableIRQ+0x34>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	; (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	; (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff90 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff2d 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff42 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff90 	bl	8001114 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff5f 	bl	80010c0 <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff35 	bl	8001088 <__NVIC_EnableIRQ>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ffa2 	bl	8001178 <SysTick_Config>
 8001234:	4603      	mov	r3, r0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	e16b      	b.n	8001534 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	429a      	cmp	r2, r3
 8001276:	f040 815a 	bne.w	800152e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b01      	cmp	r3, #1
 8001284:	d005      	beq.n	8001292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128e:	2b02      	cmp	r3, #2
 8001290:	d130      	bne.n	80012f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 0201 	and.w	r2, r3, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d017      	beq.n	8001330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d123      	bne.n	8001384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	69b9      	ldr	r1, [r7, #24]
 8001380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80b4 	beq.w	800152e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b5f      	ldr	r3, [pc, #380]	; (8001548 <HAL_GPIO_Init+0x308>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a5e      	ldr	r2, [pc, #376]	; (8001548 <HAL_GPIO_Init+0x308>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b5c      	ldr	r3, [pc, #368]	; (8001548 <HAL_GPIO_Init+0x308>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013e2:	4a5a      	ldr	r2, [pc, #360]	; (800154c <HAL_GPIO_Init+0x30c>)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3302      	adds	r3, #2
 80013ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	220f      	movs	r2, #15
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a51      	ldr	r2, [pc, #324]	; (8001550 <HAL_GPIO_Init+0x310>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d02b      	beq.n	8001466 <HAL_GPIO_Init+0x226>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a50      	ldr	r2, [pc, #320]	; (8001554 <HAL_GPIO_Init+0x314>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d025      	beq.n	8001462 <HAL_GPIO_Init+0x222>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4f      	ldr	r2, [pc, #316]	; (8001558 <HAL_GPIO_Init+0x318>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d01f      	beq.n	800145e <HAL_GPIO_Init+0x21e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4e      	ldr	r2, [pc, #312]	; (800155c <HAL_GPIO_Init+0x31c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d019      	beq.n	800145a <HAL_GPIO_Init+0x21a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4d      	ldr	r2, [pc, #308]	; (8001560 <HAL_GPIO_Init+0x320>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d013      	beq.n	8001456 <HAL_GPIO_Init+0x216>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4c      	ldr	r2, [pc, #304]	; (8001564 <HAL_GPIO_Init+0x324>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d00d      	beq.n	8001452 <HAL_GPIO_Init+0x212>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4b      	ldr	r2, [pc, #300]	; (8001568 <HAL_GPIO_Init+0x328>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d007      	beq.n	800144e <HAL_GPIO_Init+0x20e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4a      	ldr	r2, [pc, #296]	; (800156c <HAL_GPIO_Init+0x32c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <HAL_GPIO_Init+0x20a>
 8001446:	2307      	movs	r3, #7
 8001448:	e00e      	b.n	8001468 <HAL_GPIO_Init+0x228>
 800144a:	2308      	movs	r3, #8
 800144c:	e00c      	b.n	8001468 <HAL_GPIO_Init+0x228>
 800144e:	2306      	movs	r3, #6
 8001450:	e00a      	b.n	8001468 <HAL_GPIO_Init+0x228>
 8001452:	2305      	movs	r3, #5
 8001454:	e008      	b.n	8001468 <HAL_GPIO_Init+0x228>
 8001456:	2304      	movs	r3, #4
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x228>
 800145a:	2303      	movs	r3, #3
 800145c:	e004      	b.n	8001468 <HAL_GPIO_Init+0x228>
 800145e:	2302      	movs	r3, #2
 8001460:	e002      	b.n	8001468 <HAL_GPIO_Init+0x228>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_GPIO_Init+0x228>
 8001466:	2300      	movs	r3, #0
 8001468:	69fa      	ldr	r2, [r7, #28]
 800146a:	f002 0203 	and.w	r2, r2, #3
 800146e:	0092      	lsls	r2, r2, #2
 8001470:	4093      	lsls	r3, r2
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001478:	4934      	ldr	r1, [pc, #208]	; (800154c <HAL_GPIO_Init+0x30c>)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3302      	adds	r3, #2
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001486:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <HAL_GPIO_Init+0x330>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014aa:	4a31      	ldr	r2, [pc, #196]	; (8001570 <HAL_GPIO_Init+0x330>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <HAL_GPIO_Init+0x330>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <HAL_GPIO_Init+0x330>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014da:	4b25      	ldr	r3, [pc, #148]	; (8001570 <HAL_GPIO_Init+0x330>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <HAL_GPIO_Init+0x330>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_GPIO_Init+0x330>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001528:	4a11      	ldr	r2, [pc, #68]	; (8001570 <HAL_GPIO_Init+0x330>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3301      	adds	r3, #1
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	f67f ae90 	bls.w	800125c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	40023800 	.word	0x40023800
 800154c:	40013800 	.word	0x40013800
 8001550:	40020000 	.word	0x40020000
 8001554:	40020400 	.word	0x40020400
 8001558:	40020800 	.word	0x40020800
 800155c:	40020c00 	.word	0x40020c00
 8001560:	40021000 	.word	0x40021000
 8001564:	40021400 	.word	0x40021400
 8001568:	40021800 	.word	0x40021800
 800156c:	40021c00 	.word	0x40021c00
 8001570:	40013c00 	.word	0x40013c00

08001574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	887b      	ldrh	r3, [r7, #2]
 8001586:	4013      	ands	r3, r2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e001      	b.n	8001596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	460b      	mov	r3, r1
 80015ac:	807b      	strh	r3, [r7, #2]
 80015ae:	4613      	mov	r3, r2
 80015b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b2:	787b      	ldrb	r3, [r7, #1]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b8:	887a      	ldrh	r2, [r7, #2]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015be:	e003      	b.n	80015c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c0:	887b      	ldrh	r3, [r7, #2]
 80015c2:	041a      	lsls	r2, r3, #16
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	619a      	str	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d4:	b08f      	sub	sp, #60	; 0x3c
 80015d6:	af0a      	add	r7, sp, #40	; 0x28
 80015d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e054      	b.n	800168e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d106      	bne.n	8001604 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f005 f84e 	bl	80066a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2203      	movs	r2, #3
 8001608:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f003 f860 	bl	80046e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	687e      	ldr	r6, [r7, #4]
 8001630:	466d      	mov	r5, sp
 8001632:	f106 0410 	add.w	r4, r6, #16
 8001636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001642:	e885 0003 	stmia.w	r5, {r0, r1}
 8001646:	1d33      	adds	r3, r6, #4
 8001648:	cb0e      	ldmia	r3, {r1, r2, r3}
 800164a:	6838      	ldr	r0, [r7, #0]
 800164c:	f002 ffdb 	bl	8004606 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2101      	movs	r1, #1
 8001656:	4618      	mov	r0, r3
 8001658:	f003 f856 	bl	8004708 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	687e      	ldr	r6, [r7, #4]
 8001664:	466d      	mov	r5, sp
 8001666:	f106 0410 	add.w	r4, r6, #16
 800166a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800166c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800166e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001672:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001676:	e885 0003 	stmia.w	r5, {r0, r1}
 800167a:	1d33      	adds	r3, r6, #4
 800167c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800167e:	6838      	ldr	r0, [r7, #0]
 8001680:	f003 f9d8 	bl	8004a34 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001696 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001696:	b590      	push	{r4, r7, lr}
 8001698:	b089      	sub	sp, #36	; 0x24
 800169a:	af04      	add	r7, sp, #16
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	4608      	mov	r0, r1
 80016a0:	4611      	mov	r1, r2
 80016a2:	461a      	mov	r2, r3
 80016a4:	4603      	mov	r3, r0
 80016a6:	70fb      	strb	r3, [r7, #3]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70bb      	strb	r3, [r7, #2]
 80016ac:	4613      	mov	r3, r2
 80016ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_HCD_HC_Init+0x28>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e076      	b.n	80017ac <HAL_HCD_HC_Init+0x116>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	212c      	movs	r1, #44	; 0x2c
 80016cc:	fb01 f303 	mul.w	r3, r1, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	333d      	adds	r3, #61	; 0x3d
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	212c      	movs	r1, #44	; 0x2c
 80016de:	fb01 f303 	mul.w	r3, r1, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	3338      	adds	r3, #56	; 0x38
 80016e6:	787a      	ldrb	r2, [r7, #1]
 80016e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	212c      	movs	r1, #44	; 0x2c
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	3340      	adds	r3, #64	; 0x40
 80016f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016fa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	212c      	movs	r1, #44	; 0x2c
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4413      	add	r3, r2
 8001708:	3339      	adds	r3, #57	; 0x39
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	212c      	movs	r1, #44	; 0x2c
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	333f      	adds	r3, #63	; 0x3f
 800171c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001720:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	78ba      	ldrb	r2, [r7, #2]
 8001726:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800172a:	b2d0      	uxtb	r0, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	212c      	movs	r1, #44	; 0x2c
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	333a      	adds	r3, #58	; 0x3a
 8001738:	4602      	mov	r2, r0
 800173a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800173c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001740:	2b00      	cmp	r3, #0
 8001742:	da09      	bge.n	8001758 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	212c      	movs	r1, #44	; 0x2c
 800174a:	fb01 f303 	mul.w	r3, r1, r3
 800174e:	4413      	add	r3, r2
 8001750:	333b      	adds	r3, #59	; 0x3b
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	e008      	b.n	800176a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	212c      	movs	r1, #44	; 0x2c
 800175e:	fb01 f303 	mul.w	r3, r1, r3
 8001762:	4413      	add	r3, r2
 8001764:	333b      	adds	r3, #59	; 0x3b
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	212c      	movs	r1, #44	; 0x2c
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	333c      	adds	r3, #60	; 0x3c
 8001778:	f897 2020 	ldrb.w	r2, [r7, #32]
 800177c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	787c      	ldrb	r4, [r7, #1]
 8001784:	78ba      	ldrb	r2, [r7, #2]
 8001786:	78f9      	ldrb	r1, [r7, #3]
 8001788:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800178a:	9302      	str	r3, [sp, #8]
 800178c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	4623      	mov	r3, r4
 800179a:	f003 faa3 	bl	8004ce4 <USB_HC_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}

080017b4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_HCD_HC_Halt+0x1e>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e00f      	b.n	80017f2 <HAL_HCD_HC_Halt+0x3e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 fcf2 	bl	80051cc <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	4608      	mov	r0, r1
 8001806:	4611      	mov	r1, r2
 8001808:	461a      	mov	r2, r3
 800180a:	4603      	mov	r3, r0
 800180c:	70fb      	strb	r3, [r7, #3]
 800180e:	460b      	mov	r3, r1
 8001810:	70bb      	strb	r3, [r7, #2]
 8001812:	4613      	mov	r3, r2
 8001814:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	212c      	movs	r1, #44	; 0x2c
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	333b      	adds	r3, #59	; 0x3b
 8001824:	78ba      	ldrb	r2, [r7, #2]
 8001826:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	212c      	movs	r1, #44	; 0x2c
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	333f      	adds	r3, #63	; 0x3f
 8001836:	787a      	ldrb	r2, [r7, #1]
 8001838:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800183a:	7c3b      	ldrb	r3, [r7, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d112      	bne.n	8001866 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	3342      	adds	r3, #66	; 0x42
 800184e:	2203      	movs	r2, #3
 8001850:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	212c      	movs	r1, #44	; 0x2c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	333d      	adds	r3, #61	; 0x3d
 8001860:	7f3a      	ldrb	r2, [r7, #28]
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e008      	b.n	8001878 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	212c      	movs	r1, #44	; 0x2c
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	4413      	add	r3, r2
 8001872:	3342      	adds	r3, #66	; 0x42
 8001874:	2202      	movs	r2, #2
 8001876:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001878:	787b      	ldrb	r3, [r7, #1]
 800187a:	2b03      	cmp	r3, #3
 800187c:	f200 80c6 	bhi.w	8001a0c <HAL_HCD_HC_SubmitRequest+0x210>
 8001880:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001886:	bf00      	nop
 8001888:	08001899 	.word	0x08001899
 800188c:	080019f9 	.word	0x080019f9
 8001890:	080018fd 	.word	0x080018fd
 8001894:	0800197b 	.word	0x0800197b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001898:	7c3b      	ldrb	r3, [r7, #16]
 800189a:	2b01      	cmp	r3, #1
 800189c:	f040 80b8 	bne.w	8001a10 <HAL_HCD_HC_SubmitRequest+0x214>
 80018a0:	78bb      	ldrb	r3, [r7, #2]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 80b4 	bne.w	8001a10 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80018a8:	8b3b      	ldrh	r3, [r7, #24]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d108      	bne.n	80018c0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	212c      	movs	r1, #44	; 0x2c
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	3355      	adds	r3, #85	; 0x55
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	212c      	movs	r1, #44	; 0x2c
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	3355      	adds	r3, #85	; 0x55
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d109      	bne.n	80018e8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	212c      	movs	r1, #44	; 0x2c
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	3342      	adds	r3, #66	; 0x42
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018e6:	e093      	b.n	8001a10 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	212c      	movs	r1, #44	; 0x2c
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	3342      	adds	r3, #66	; 0x42
 80018f6:	2202      	movs	r2, #2
 80018f8:	701a      	strb	r2, [r3, #0]
      break;
 80018fa:	e089      	b.n	8001a10 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018fc:	78bb      	ldrb	r3, [r7, #2]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11d      	bne.n	800193e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	212c      	movs	r1, #44	; 0x2c
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	3355      	adds	r3, #85	; 0x55
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d109      	bne.n	800192a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	212c      	movs	r1, #44	; 0x2c
 800191c:	fb01 f303 	mul.w	r3, r1, r3
 8001920:	4413      	add	r3, r2
 8001922:	3342      	adds	r3, #66	; 0x42
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001928:	e073      	b.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	3342      	adds	r3, #66	; 0x42
 8001938:	2202      	movs	r2, #2
 800193a:	701a      	strb	r2, [r3, #0]
      break;
 800193c:	e069      	b.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	212c      	movs	r1, #44	; 0x2c
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	3354      	adds	r3, #84	; 0x54
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	212c      	movs	r1, #44	; 0x2c
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	4413      	add	r3, r2
 800195e:	3342      	adds	r3, #66	; 0x42
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
      break;
 8001964:	e055      	b.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	212c      	movs	r1, #44	; 0x2c
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4413      	add	r3, r2
 8001972:	3342      	adds	r3, #66	; 0x42
 8001974:	2202      	movs	r2, #2
 8001976:	701a      	strb	r2, [r3, #0]
      break;
 8001978:	e04b      	b.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800197a:	78bb      	ldrb	r3, [r7, #2]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d11d      	bne.n	80019bc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	212c      	movs	r1, #44	; 0x2c
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4413      	add	r3, r2
 800198c:	3355      	adds	r3, #85	; 0x55
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d109      	bne.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	212c      	movs	r1, #44	; 0x2c
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	3342      	adds	r3, #66	; 0x42
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019a6:	e034      	b.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	3342      	adds	r3, #66	; 0x42
 80019b6:	2202      	movs	r2, #2
 80019b8:	701a      	strb	r2, [r3, #0]
      break;
 80019ba:	e02a      	b.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	3354      	adds	r3, #84	; 0x54
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	212c      	movs	r1, #44	; 0x2c
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	3342      	adds	r3, #66	; 0x42
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
      break;
 80019e2:	e016      	b.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	212c      	movs	r1, #44	; 0x2c
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	3342      	adds	r3, #66	; 0x42
 80019f2:	2202      	movs	r2, #2
 80019f4:	701a      	strb	r2, [r3, #0]
      break;
 80019f6:	e00c      	b.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	3342      	adds	r3, #66	; 0x42
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
      break;
 8001a0a:	e002      	b.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a0c:	bf00      	nop
 8001a0e:	e000      	b.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a10:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	212c      	movs	r1, #44	; 0x2c
 8001a18:	fb01 f303 	mul.w	r3, r1, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3344      	adds	r3, #68	; 0x44
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	8b3a      	ldrh	r2, [r7, #24]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	202c      	movs	r0, #44	; 0x2c
 8001a2c:	fb00 f303 	mul.w	r3, r0, r3
 8001a30:	440b      	add	r3, r1
 8001a32:	334c      	adds	r3, #76	; 0x4c
 8001a34:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	212c      	movs	r1, #44	; 0x2c
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	3360      	adds	r3, #96	; 0x60
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	212c      	movs	r1, #44	; 0x2c
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	3350      	adds	r3, #80	; 0x50
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	212c      	movs	r1, #44	; 0x2c
 8001a60:	fb01 f303 	mul.w	r3, r1, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	3339      	adds	r3, #57	; 0x39
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	212c      	movs	r1, #44	; 0x2c
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	3361      	adds	r3, #97	; 0x61
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	222c      	movs	r2, #44	; 0x2c
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	3338      	adds	r3, #56	; 0x38
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	18d1      	adds	r1, r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	f003 fa46 	bl	8004f28 <USB_HC_StartXfer>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop

08001aa8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 ff78 	bl	80049b4 <USB_GetMode>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	f040 80f6 	bne.w	8001cb8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 ff5d 	bl	8004990 <USB_ReadInterrupts>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80ec 	beq.w	8001cb6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 ff54 	bl	8004990 <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001af2:	d104      	bne.n	8001afe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001afc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 ff44 	bl	8004990 <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b12:	d104      	bne.n	8001b1e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 ff34 	bl	8004990 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b32:	d104      	bne.n	8001b3e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 ff24 	bl	8004990 <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d103      	bne.n	8001b5a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2202      	movs	r2, #2
 8001b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 ff16 	bl	8004990 <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b6e:	d11c      	bne.n	8001baa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b78:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10f      	bne.n	8001baa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	6938      	ldr	r0, [r7, #16]
 8001b8e:	f002 fe07 	bl	80047a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b92:	6938      	ldr	r0, [r7, #16]
 8001b94:	f002 fe38 	bl	8004808 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 f808 	bl	8004bb4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f004 fdf9 	bl	800679c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 feee 	bl	8004990 <USB_ReadInterrupts>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bbe:	d102      	bne.n	8001bc6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f001 f880 	bl	8002cc6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 fee0 	bl	8004990 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d106      	bne.n	8001be8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f004 fdc2 	bl	8006764 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2208      	movs	r2, #8
 8001be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 fecf 	bl	8004990 <USB_ReadInterrupts>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d101      	bne.n	8001c00 <HAL_HCD_IRQHandler+0x158>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <HAL_HCD_IRQHandler+0x15a>
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d012      	beq.n	8001c2c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	699a      	ldr	r2, [r3, #24]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0210 	bic.w	r2, r2, #16
 8001c14:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 ff83 	bl	8002b22 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0210 	orr.w	r2, r2, #16
 8001c2a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fead 	bl	8004990 <USB_ReadInterrupts>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c40:	d13a      	bne.n	8001cb8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 fab0 	bl	80051ac <USB_HC_ReadInterrupt>
 8001c4c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e025      	b.n	8001ca0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d018      	beq.n	8001c9a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c7e:	d106      	bne.n	8001c8e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4619      	mov	r1, r3
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f88d 	bl	8001da6 <HCD_HC_IN_IRQHandler>
 8001c8c:	e005      	b.n	8001c9a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fbdb 	bl	8002450 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d3d4      	bcc.n	8001c54 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb2:	615a      	str	r2, [r3, #20]
 8001cb4:	e000      	b.n	8001cb8 <HAL_HCD_IRQHandler+0x210>
      return;
 8001cb6:	bf00      	nop
    }
  }
}
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_HCD_Start+0x16>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e013      	b.n	8001cfc <HAL_HCD_Start+0x3e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 ff9f 	bl	8004c26 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f002 fceb 	bl	80046c8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_HCD_Stop+0x16>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e00d      	b.n	8001d36 <HAL_HCD_Stop+0x32>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 fb86 	bl	8005438 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	212c      	movs	r1, #44	; 0x2c
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	3360      	adds	r3, #96	; 0x60
 8001d58:	781b      	ldrb	r3, [r3, #0]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	212c      	movs	r1, #44	; 0x2c
 8001d76:	fb01 f303 	mul.w	r3, r1, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3350      	adds	r3, #80	; 0x50
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f002 ff93 	bl	8004cc2 <USB_GetCurrentFrame>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	015a      	lsls	r2, r3, #5
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d11a      	bne.n	8001e0c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	015a      	lsls	r2, r3, #5
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de2:	461a      	mov	r2, r3
 8001de4:	2304      	movs	r3, #4
 8001de6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	212c      	movs	r1, #44	; 0x2c
 8001dee:	fb01 f303 	mul.w	r3, r1, r3
 8001df2:	4413      	add	r3, r2
 8001df4:	3361      	adds	r3, #97	; 0x61
 8001df6:	2206      	movs	r2, #6
 8001df8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 f9e1 	bl	80051cc <USB_HC_Halt>
 8001e0a:	e0af      	b.n	8001f6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e22:	d11b      	bne.n	8001e5c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e30:	461a      	mov	r2, r3
 8001e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	212c      	movs	r1, #44	; 0x2c
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	3361      	adds	r3, #97	; 0x61
 8001e46:	2207      	movs	r2, #7
 8001e48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 f9b9 	bl	80051cc <USB_HC_Halt>
 8001e5a:	e087      	b.n	8001f6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d109      	bne.n	8001e86 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2320      	movs	r3, #32
 8001e82:	6093      	str	r3, [r2, #8]
 8001e84:	e072      	b.n	8001f6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d11a      	bne.n	8001ed2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2308      	movs	r3, #8
 8001eac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	212c      	movs	r1, #44	; 0x2c
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	3361      	adds	r3, #97	; 0x61
 8001ebc:	2205      	movs	r2, #5
 8001ebe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 f97e 	bl	80051cc <USB_HC_Halt>
 8001ed0:	e04c      	b.n	8001f6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee8:	d11b      	bne.n	8001f22 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	212c      	movs	r1, #44	; 0x2c
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	4413      	add	r3, r2
 8001f0a:	3361      	adds	r3, #97	; 0x61
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 f956 	bl	80051cc <USB_HC_Halt>
 8001f20:	e024      	b.n	8001f6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f34:	2b80      	cmp	r3, #128	; 0x80
 8001f36:	d119      	bne.n	8001f6c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	461a      	mov	r2, r3
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	212c      	movs	r1, #44	; 0x2c
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	3361      	adds	r3, #97	; 0x61
 8001f58:	2206      	movs	r2, #6
 8001f5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 f930 	bl	80051cc <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f82:	d112      	bne.n	8001faa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 f91c 	bl	80051cc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fa8:	e24e      	b.n	8002448 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	f040 80df 	bne.w	8002180 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d019      	beq.n	8001ffe <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	212c      	movs	r1, #44	; 0x2c
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3348      	adds	r3, #72	; 0x48
 8001fd8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	0159      	lsls	r1, r3, #5
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fec:	1ad2      	subs	r2, r2, r3
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	202c      	movs	r0, #44	; 0x2c
 8001ff4:	fb00 f303 	mul.w	r3, r0, r3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3350      	adds	r3, #80	; 0x50
 8001ffc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	3361      	adds	r3, #97	; 0x61
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	335c      	adds	r3, #92	; 0x5c
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202e:	461a      	mov	r2, r3
 8002030:	2301      	movs	r3, #1
 8002032:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	212c      	movs	r1, #44	; 0x2c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	333f      	adds	r3, #63	; 0x3f
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d009      	beq.n	800205c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	212c      	movs	r1, #44	; 0x2c
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4413      	add	r3, r2
 8002054:	333f      	adds	r3, #63	; 0x3f
 8002056:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002058:	2b02      	cmp	r3, #2
 800205a:	d111      	bne.n	8002080 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f003 f8b0 	bl	80051cc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002078:	461a      	mov	r2, r3
 800207a:	2310      	movs	r3, #16
 800207c:	6093      	str	r3, [r2, #8]
 800207e:	e03a      	b.n	80020f6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	333f      	adds	r3, #63	; 0x3f
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d009      	beq.n	80020a8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	333f      	adds	r3, #63	; 0x3f
 80020a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d126      	bne.n	80020f6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	0151      	lsls	r1, r2, #5
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	440a      	add	r2, r1
 80020be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020c6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3360      	adds	r3, #96	; 0x60
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	b2d9      	uxtb	r1, r3
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	202c      	movs	r0, #44	; 0x2c
 80020e4:	fb00 f303 	mul.w	r3, r0, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	3360      	adds	r3, #96	; 0x60
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f004 fb61 	bl	80067b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d12b      	bne.n	8002156 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	3348      	adds	r3, #72	; 0x48
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	202c      	movs	r0, #44	; 0x2c
 8002114:	fb00 f202 	mul.w	r2, r0, r2
 8002118:	440a      	add	r2, r1
 800211a:	3240      	adds	r2, #64	; 0x40
 800211c:	8812      	ldrh	r2, [r2, #0]
 800211e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 818e 	beq.w	8002448 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	212c      	movs	r1, #44	; 0x2c
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	3354      	adds	r3, #84	; 0x54
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	f083 0301 	eor.w	r3, r3, #1
 8002140:	b2d8      	uxtb	r0, r3
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	212c      	movs	r1, #44	; 0x2c
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	3354      	adds	r3, #84	; 0x54
 8002150:	4602      	mov	r2, r0
 8002152:	701a      	strb	r2, [r3, #0]
}
 8002154:	e178      	b.n	8002448 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3354      	adds	r3, #84	; 0x54
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	f083 0301 	eor.w	r3, r3, #1
 800216a:	b2d8      	uxtb	r0, r3
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	212c      	movs	r1, #44	; 0x2c
 8002172:	fb01 f303 	mul.w	r3, r1, r3
 8002176:	4413      	add	r3, r2
 8002178:	3354      	adds	r3, #84	; 0x54
 800217a:	4602      	mov	r2, r0
 800217c:	701a      	strb	r2, [r3, #0]
}
 800217e:	e163      	b.n	8002448 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b02      	cmp	r3, #2
 8002194:	f040 80f6 	bne.w	8002384 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3361      	adds	r3, #97	; 0x61
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d109      	bne.n	80021c0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	212c      	movs	r1, #44	; 0x2c
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	3360      	adds	r3, #96	; 0x60
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	e0c9      	b.n	8002354 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	212c      	movs	r1, #44	; 0x2c
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	4413      	add	r3, r2
 80021cc:	3361      	adds	r3, #97	; 0x61
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d109      	bne.n	80021e8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3360      	adds	r3, #96	; 0x60
 80021e2:	2205      	movs	r2, #5
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	e0b5      	b.n	8002354 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3361      	adds	r3, #97	; 0x61
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b06      	cmp	r3, #6
 80021fa:	d009      	beq.n	8002210 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	3361      	adds	r3, #97	; 0x61
 800220a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800220c:	2b08      	cmp	r3, #8
 800220e:	d150      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	335c      	adds	r3, #92	; 0x5c
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	202c      	movs	r0, #44	; 0x2c
 8002228:	fb00 f303 	mul.w	r3, r0, r3
 800222c:	440b      	add	r3, r1
 800222e:	335c      	adds	r3, #92	; 0x5c
 8002230:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	335c      	adds	r3, #92	; 0x5c
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d912      	bls.n	800226c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	335c      	adds	r3, #92	; 0x5c
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	3360      	adds	r3, #96	; 0x60
 8002266:	2204      	movs	r2, #4
 8002268:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800226a:	e073      	b.n	8002354 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3360      	adds	r3, #96	; 0x60
 800227a:	2202      	movs	r2, #2
 800227c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002294:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800229c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	461a      	mov	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022b0:	e050      	b.n	8002354 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3361      	adds	r3, #97	; 0x61
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d122      	bne.n	800230c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	3360      	adds	r3, #96	; 0x60
 80022d4:	2202      	movs	r2, #2
 80022d6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022ee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022f6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	461a      	mov	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e023      	b.n	8002354 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	3361      	adds	r3, #97	; 0x61
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b07      	cmp	r3, #7
 800231e:	d119      	bne.n	8002354 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	335c      	adds	r3, #92	; 0x5c
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	202c      	movs	r0, #44	; 0x2c
 8002338:	fb00 f303 	mul.w	r3, r0, r3
 800233c:	440b      	add	r3, r1
 800233e:	335c      	adds	r3, #92	; 0x5c
 8002340:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	3360      	adds	r3, #96	; 0x60
 8002350:	2204      	movs	r2, #4
 8002352:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	461a      	mov	r2, r3
 8002362:	2302      	movs	r3, #2
 8002364:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	b2d9      	uxtb	r1, r3
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	202c      	movs	r0, #44	; 0x2c
 8002370:	fb00 f303 	mul.w	r3, r0, r3
 8002374:	4413      	add	r3, r2
 8002376:	3360      	adds	r3, #96	; 0x60
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f004 fa1b 	bl	80067b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002382:	e061      	b.n	8002448 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4413      	add	r3, r2
 800238c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b10      	cmp	r3, #16
 8002398:	d156      	bne.n	8002448 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	333f      	adds	r3, #63	; 0x3f
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d111      	bne.n	80023d2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	212c      	movs	r1, #44	; 0x2c
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	335c      	adds	r3, #92	; 0x5c
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f002 fefe 	bl	80051cc <USB_HC_Halt>
 80023d0:	e031      	b.n	8002436 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	333f      	adds	r3, #63	; 0x3f
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	333f      	adds	r3, #63	; 0x3f
 80023f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d11d      	bne.n	8002436 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	335c      	adds	r3, #92	; 0x5c
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d110      	bne.n	8002436 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	212c      	movs	r1, #44	; 0x2c
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	3361      	adds	r3, #97	; 0x61
 8002422:	2203      	movs	r2, #3
 8002424:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f002 fecb 	bl	80051cc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	461a      	mov	r2, r3
 8002444:	2310      	movs	r3, #16
 8002446:	6093      	str	r3, [r2, #8]
}
 8002448:	bf00      	nop
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4413      	add	r3, r2
 8002472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d11a      	bne.n	80024b6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248c:	461a      	mov	r2, r3
 800248e:	2304      	movs	r3, #4
 8002490:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3361      	adds	r3, #97	; 0x61
 80024a0:	2206      	movs	r2, #6
 80024a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 fe8c 	bl	80051cc <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80024b4:	e331      	b.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d12e      	bne.n	800252a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	461a      	mov	r2, r3
 80024da:	2320      	movs	r3, #32
 80024dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	212c      	movs	r1, #44	; 0x2c
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	333d      	adds	r3, #61	; 0x3d
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	f040 8313 	bne.w	8002b1a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	333d      	adds	r3, #61	; 0x3d
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	3360      	adds	r3, #96	; 0x60
 8002514:	2202      	movs	r2, #2
 8002516:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f002 fe52 	bl	80051cc <USB_HC_Halt>
}
 8002528:	e2f7      	b.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800253c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002540:	d112      	bne.n	8002568 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	461a      	mov	r2, r3
 8002550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002554:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f002 fe33 	bl	80051cc <USB_HC_Halt>
}
 8002566:	e2d8      	b.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b01      	cmp	r3, #1
 800257c:	d140      	bne.n	8002600 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	335c      	adds	r3, #92	; 0x5c
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	4413      	add	r3, r2
 8002598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d111      	bne.n	80025ca <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	333d      	adds	r3, #61	; 0x3d
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	461a      	mov	r2, r3
 80025c6:	2340      	movs	r3, #64	; 0x40
 80025c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d6:	461a      	mov	r2, r3
 80025d8:	2301      	movs	r3, #1
 80025da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3361      	adds	r3, #97	; 0x61
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f002 fde7 	bl	80051cc <USB_HC_Halt>
}
 80025fe:	e28c      	b.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	2b40      	cmp	r3, #64	; 0x40
 8002614:	d12c      	bne.n	8002670 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3361      	adds	r3, #97	; 0x61
 8002624:	2204      	movs	r2, #4
 8002626:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	333d      	adds	r3, #61	; 0x3d
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	335c      	adds	r3, #92	; 0x5c
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f002 fdb8 	bl	80051cc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	461a      	mov	r2, r3
 800266a:	2340      	movs	r3, #64	; 0x40
 800266c:	6093      	str	r3, [r2, #8]
}
 800266e:	e254      	b.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b08      	cmp	r3, #8
 8002684:	d11a      	bne.n	80026bc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	461a      	mov	r2, r3
 8002694:	2308      	movs	r3, #8
 8002696:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	3361      	adds	r3, #97	; 0x61
 80026a6:	2205      	movs	r2, #5
 80026a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f002 fd89 	bl	80051cc <USB_HC_Halt>
}
 80026ba:	e22e      	b.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d140      	bne.n	8002754 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	335c      	adds	r3, #92	; 0x5c
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	212c      	movs	r1, #44	; 0x2c
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	3361      	adds	r3, #97	; 0x61
 80026f2:	2203      	movs	r2, #3
 80026f4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	333d      	adds	r3, #61	; 0x3d
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d112      	bne.n	8002730 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	333c      	adds	r3, #60	; 0x3c
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d108      	bne.n	8002730 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	333d      	adds	r3, #61	; 0x3d
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f002 fd46 	bl	80051cc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	461a      	mov	r2, r3
 800274e:	2310      	movs	r3, #16
 8002750:	6093      	str	r3, [r2, #8]
}
 8002752:	e1e2      	b.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	2b80      	cmp	r3, #128	; 0x80
 8002768:	d164      	bne.n	8002834 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d111      	bne.n	8002796 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	3361      	adds	r3, #97	; 0x61
 8002780:	2206      	movs	r2, #6
 8002782:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f002 fd1c 	bl	80051cc <USB_HC_Halt>
 8002794:	e044      	b.n	8002820 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	335c      	adds	r3, #92	; 0x5c
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	202c      	movs	r0, #44	; 0x2c
 80027ae:	fb00 f303 	mul.w	r3, r0, r3
 80027b2:	440b      	add	r3, r1
 80027b4:	335c      	adds	r3, #92	; 0x5c
 80027b6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	212c      	movs	r1, #44	; 0x2c
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	335c      	adds	r3, #92	; 0x5c
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d920      	bls.n	800280e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	335c      	adds	r3, #92	; 0x5c
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	3360      	adds	r3, #96	; 0x60
 80027ec:	2204      	movs	r2, #4
 80027ee:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	b2d9      	uxtb	r1, r3
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	202c      	movs	r0, #44	; 0x2c
 80027fa:	fb00 f303 	mul.w	r3, r0, r3
 80027fe:	4413      	add	r3, r2
 8002800:	3360      	adds	r3, #96	; 0x60
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f003 ffd6 	bl	80067b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800280c:	e008      	b.n	8002820 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3360      	adds	r3, #96	; 0x60
 800281c:	2202      	movs	r2, #2
 800281e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4413      	add	r3, r2
 8002828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282c:	461a      	mov	r2, r3
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	6093      	str	r3, [r2, #8]
}
 8002832:	e172      	b.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284a:	d11b      	bne.n	8002884 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	3361      	adds	r3, #97	; 0x61
 800285a:	2208      	movs	r2, #8
 800285c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f002 fcaf 	bl	80051cc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	4413      	add	r3, r2
 8002876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287a:	461a      	mov	r2, r3
 800287c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002880:	6093      	str	r3, [r2, #8]
}
 8002882:	e14a      	b.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b02      	cmp	r3, #2
 8002898:	f040 813f 	bne.w	8002b1a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	3361      	adds	r3, #97	; 0x61
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d17d      	bne.n	80029ac <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3360      	adds	r3, #96	; 0x60
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	333f      	adds	r3, #63	; 0x3f
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d00a      	beq.n	80028ec <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	333f      	adds	r3, #63	; 0x3f
 80028e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	f040 8100 	bne.w	8002aec <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d113      	bne.n	800291c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	3355      	adds	r3, #85	; 0x55
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	f083 0301 	eor.w	r3, r3, #1
 8002908:	b2d8      	uxtb	r0, r3
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	3355      	adds	r3, #85	; 0x55
 8002918:	4602      	mov	r2, r0
 800291a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b01      	cmp	r3, #1
 8002922:	f040 80e3 	bne.w	8002aec <HCD_HC_OUT_IRQHandler+0x69c>
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	334c      	adds	r3, #76	; 0x4c
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 80d8 	beq.w	8002aec <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	334c      	adds	r3, #76	; 0x4c
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	202c      	movs	r0, #44	; 0x2c
 8002952:	fb00 f202 	mul.w	r2, r0, r2
 8002956:	440a      	add	r2, r1
 8002958:	3240      	adds	r2, #64	; 0x40
 800295a:	8812      	ldrh	r2, [r2, #0]
 800295c:	4413      	add	r3, r2
 800295e:	3b01      	subs	r3, #1
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	202c      	movs	r0, #44	; 0x2c
 8002966:	fb00 f202 	mul.w	r2, r0, r2
 800296a:	440a      	add	r2, r1
 800296c:	3240      	adds	r2, #64	; 0x40
 800296e:	8812      	ldrh	r2, [r2, #0]
 8002970:	fbb3 f3f2 	udiv	r3, r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80b5 	beq.w	8002aec <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	3355      	adds	r3, #85	; 0x55
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	f083 0301 	eor.w	r3, r3, #1
 8002996:	b2d8      	uxtb	r0, r3
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3355      	adds	r3, #85	; 0x55
 80029a6:	4602      	mov	r2, r0
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	e09f      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3361      	adds	r3, #97	; 0x61
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d109      	bne.n	80029d4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	3360      	adds	r3, #96	; 0x60
 80029ce:	2202      	movs	r2, #2
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e08b      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3361      	adds	r3, #97	; 0x61
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d109      	bne.n	80029fc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3360      	adds	r3, #96	; 0x60
 80029f6:	2202      	movs	r2, #2
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	e077      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3361      	adds	r3, #97	; 0x61
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d109      	bne.n	8002a24 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3360      	adds	r3, #96	; 0x60
 8002a1e:	2205      	movs	r2, #5
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	e063      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3361      	adds	r3, #97	; 0x61
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b06      	cmp	r3, #6
 8002a36:	d009      	beq.n	8002a4c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3361      	adds	r3, #97	; 0x61
 8002a46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d14f      	bne.n	8002aec <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	335c      	adds	r3, #92	; 0x5c
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	202c      	movs	r0, #44	; 0x2c
 8002a64:	fb00 f303 	mul.w	r3, r0, r3
 8002a68:	440b      	add	r3, r1
 8002a6a:	335c      	adds	r3, #92	; 0x5c
 8002a6c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	335c      	adds	r3, #92	; 0x5c
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d912      	bls.n	8002aa8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	335c      	adds	r3, #92	; 0x5c
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3360      	adds	r3, #96	; 0x60
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e021      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3360      	adds	r3, #96	; 0x60
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ad0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ad8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	2302      	movs	r3, #2
 8002afc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	b2d9      	uxtb	r1, r3
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	202c      	movs	r0, #44	; 0x2c
 8002b08:	fb00 f303 	mul.w	r3, r0, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3360      	adds	r3, #96	; 0x60
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f003 fe4f 	bl	80067b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b1a:	bf00      	nop
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b08a      	sub	sp, #40	; 0x28
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	0c5b      	lsrs	r3, r3, #17
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b56:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d004      	beq.n	8002b68 <HCD_RXQLVL_IRQHandler+0x46>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	f000 80a9 	beq.w	8002cb8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b66:	e0aa      	b.n	8002cbe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80a6 	beq.w	8002cbc <HCD_RXQLVL_IRQHandler+0x19a>
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3344      	adds	r3, #68	; 0x44
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 809b 	beq.w	8002cbc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	212c      	movs	r1, #44	; 0x2c
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	3350      	adds	r3, #80	; 0x50
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	441a      	add	r2, r3
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	202c      	movs	r0, #44	; 0x2c
 8002ba0:	fb00 f303 	mul.w	r3, r0, r3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	334c      	adds	r3, #76	; 0x4c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d87a      	bhi.n	8002ca4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3344      	adds	r3, #68	; 0x44
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	b292      	uxth	r2, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f001 fe8b 	bl	80048e2 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3344      	adds	r3, #68	; 0x44
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	441a      	add	r2, r3
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	202c      	movs	r0, #44	; 0x2c
 8002be6:	fb00 f303 	mul.w	r3, r0, r3
 8002bea:	440b      	add	r3, r1
 8002bec:	3344      	adds	r3, #68	; 0x44
 8002bee:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3350      	adds	r3, #80	; 0x50
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	441a      	add	r2, r3
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	202c      	movs	r0, #44	; 0x2c
 8002c0a:	fb00 f303 	mul.w	r3, r0, r3
 8002c0e:	440b      	add	r3, r1
 8002c10:	3350      	adds	r3, #80	; 0x50
 8002c12:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	0cdb      	lsrs	r3, r3, #19
 8002c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c28:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	3340      	adds	r3, #64	; 0x40
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d13c      	bne.n	8002cbc <HCD_RXQLVL_IRQHandler+0x19a>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d039      	beq.n	8002cbc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c5e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c66:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	461a      	mov	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	3354      	adds	r3, #84	; 0x54
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	f083 0301 	eor.w	r3, r3, #1
 8002c8e:	b2d8      	uxtb	r0, r3
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	212c      	movs	r1, #44	; 0x2c
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3354      	adds	r3, #84	; 0x54
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	701a      	strb	r2, [r3, #0]
      break;
 8002ca2:	e00b      	b.n	8002cbc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3360      	adds	r3, #96	; 0x60
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	701a      	strb	r2, [r3, #0]
      break;
 8002cb6:	e001      	b.n	8002cbc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002cbc:	bf00      	nop
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	3728      	adds	r7, #40	; 0x28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cf2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d10b      	bne.n	8002d16 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d102      	bne.n	8002d0e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f003 fd39 	bl	8006780 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d132      	bne.n	8002d86 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f043 0308 	orr.w	r3, r3, #8
 8002d26:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d126      	bne.n	8002d80 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d113      	bne.n	8002d62 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d44:	d106      	bne.n	8002d54 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f001 ff31 	bl	8004bb4 <USB_InitFSLSPClkSel>
 8002d52:	e011      	b.n	8002d78 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2101      	movs	r1, #1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 ff2a 	bl	8004bb4 <USB_InitFSLSPClkSel>
 8002d60:	e00a      	b.n	8002d78 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d106      	bne.n	8002d78 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d70:	461a      	mov	r2, r3
 8002d72:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d76:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f003 fd2a 	bl	80067d2 <HAL_HCD_PortEnabled_Callback>
 8002d7e:	e002      	b.n	8002d86 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f003 fd34 	bl	80067ee <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d103      	bne.n	8002d98 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f043 0320 	orr.w	r3, r3, #32
 8002d96:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e12b      	b.n	8003016 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fd feec 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2224      	movs	r2, #36	; 0x24
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e10:	f001 fa1e 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
 8002e14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4a81      	ldr	r2, [pc, #516]	; (8003020 <HAL_I2C_Init+0x274>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d807      	bhi.n	8002e30 <HAL_I2C_Init+0x84>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4a80      	ldr	r2, [pc, #512]	; (8003024 <HAL_I2C_Init+0x278>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	bf94      	ite	ls
 8002e28:	2301      	movls	r3, #1
 8002e2a:	2300      	movhi	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e006      	b.n	8002e3e <HAL_I2C_Init+0x92>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4a7d      	ldr	r2, [pc, #500]	; (8003028 <HAL_I2C_Init+0x27c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	bf94      	ite	ls
 8002e38:	2301      	movls	r3, #1
 8002e3a:	2300      	movhi	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0e7      	b.n	8003016 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4a78      	ldr	r2, [pc, #480]	; (800302c <HAL_I2C_Init+0x280>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	0c9b      	lsrs	r3, r3, #18
 8002e50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4a6a      	ldr	r2, [pc, #424]	; (8003020 <HAL_I2C_Init+0x274>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d802      	bhi.n	8002e80 <HAL_I2C_Init+0xd4>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	e009      	b.n	8002e94 <HAL_I2C_Init+0xe8>
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	4a69      	ldr	r2, [pc, #420]	; (8003030 <HAL_I2C_Init+0x284>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	3301      	adds	r3, #1
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ea6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	495c      	ldr	r1, [pc, #368]	; (8003020 <HAL_I2C_Init+0x274>)
 8002eb0:	428b      	cmp	r3, r1
 8002eb2:	d819      	bhi.n	8002ee8 <HAL_I2C_Init+0x13c>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1e59      	subs	r1, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec2:	1c59      	adds	r1, r3, #1
 8002ec4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ec8:	400b      	ands	r3, r1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_I2C_Init+0x138>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1e59      	subs	r1, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002edc:	3301      	adds	r3, #1
 8002ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee2:	e051      	b.n	8002f88 <HAL_I2C_Init+0x1dc>
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	e04f      	b.n	8002f88 <HAL_I2C_Init+0x1dc>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d111      	bne.n	8002f14 <HAL_I2C_Init+0x168>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1e58      	subs	r0, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	440b      	add	r3, r1
 8002efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	e012      	b.n	8002f3a <HAL_I2C_Init+0x18e>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1e58      	subs	r0, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6859      	ldr	r1, [r3, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	0099      	lsls	r1, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_I2C_Init+0x196>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e022      	b.n	8002f88 <HAL_I2C_Init+0x1dc>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10e      	bne.n	8002f68 <HAL_I2C_Init+0x1bc>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1e58      	subs	r0, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6859      	ldr	r1, [r3, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	440b      	add	r3, r1
 8002f58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f66:	e00f      	b.n	8002f88 <HAL_I2C_Init+0x1dc>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1e58      	subs	r0, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	0099      	lsls	r1, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	6809      	ldr	r1, [r1, #0]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6911      	ldr	r1, [r2, #16]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68d2      	ldr	r2, [r2, #12]
 8002fc2:	4311      	orrs	r1, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	000186a0 	.word	0x000186a0
 8003024:	001e847f 	.word	0x001e847f
 8003028:	003d08ff 	.word	0x003d08ff
 800302c:	431bde83 	.word	0x431bde83
 8003030:	10624dd3 	.word	0x10624dd3

08003034 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e128      	b.n	8003298 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a90      	ldr	r2, [pc, #576]	; (80032a0 <HAL_I2S_Init+0x26c>)
 800305e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7fd fded 	bl	8000c40 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2202      	movs	r2, #2
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800307c:	f023 030f 	bic.w	r3, r3, #15
 8003080:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2202      	movs	r2, #2
 8003088:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d060      	beq.n	8003154 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800309a:	2310      	movs	r3, #16
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	e001      	b.n	80030a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030a0:	2320      	movs	r3, #32
 80030a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d802      	bhi.n	80030b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80030b2:	2001      	movs	r0, #1
 80030b4:	f001 f9c2 	bl	800443c <HAL_RCCEx_GetPeriphCLKFreq>
 80030b8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c2:	d125      	bne.n	8003110 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d010      	beq.n	80030ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	461a      	mov	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	3305      	adds	r3, #5
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	e01f      	b.n	800312e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	461a      	mov	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	3305      	adds	r3, #5
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	e00e      	b.n	800312e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	fbb2 f2f3 	udiv	r2, r2, r3
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	461a      	mov	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	3305      	adds	r3, #5
 800312c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4a5c      	ldr	r2, [pc, #368]	; (80032a4 <HAL_I2S_Init+0x270>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	08db      	lsrs	r3, r3, #3
 8003138:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	e003      	b.n	800315c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003154:	2302      	movs	r3, #2
 8003156:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d902      	bls.n	8003168 <HAL_I2S_Init+0x134>
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	2bff      	cmp	r3, #255	; 0xff
 8003166:	d907      	bls.n	8003178 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	f043 0210 	orr.w	r2, r3, #16
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e08f      	b.n	8003298 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	ea42 0103 	orr.w	r1, r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	430a      	orrs	r2, r1
 800318a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003196:	f023 030f 	bic.w	r3, r3, #15
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6851      	ldr	r1, [r2, #4]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6892      	ldr	r2, [r2, #8]
 80031a2:	4311      	orrs	r1, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	68d2      	ldr	r2, [r2, #12]
 80031a8:	4311      	orrs	r1, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6992      	ldr	r2, [r2, #24]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d161      	bne.n	8003288 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a38      	ldr	r2, [pc, #224]	; (80032a8 <HAL_I2S_Init+0x274>)
 80031c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a37      	ldr	r2, [pc, #220]	; (80032ac <HAL_I2S_Init+0x278>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_I2S_Init+0x1a4>
 80031d4:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <HAL_I2S_Init+0x27c>)
 80031d6:	e001      	b.n	80031dc <HAL_I2S_Init+0x1a8>
 80031d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	4932      	ldr	r1, [pc, #200]	; (80032ac <HAL_I2S_Init+0x278>)
 80031e4:	428a      	cmp	r2, r1
 80031e6:	d101      	bne.n	80031ec <HAL_I2S_Init+0x1b8>
 80031e8:	4a31      	ldr	r2, [pc, #196]	; (80032b0 <HAL_I2S_Init+0x27c>)
 80031ea:	e001      	b.n	80031f0 <HAL_I2S_Init+0x1bc>
 80031ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80031f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031f4:	f023 030f 	bic.w	r3, r3, #15
 80031f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a2b      	ldr	r2, [pc, #172]	; (80032ac <HAL_I2S_Init+0x278>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d101      	bne.n	8003208 <HAL_I2S_Init+0x1d4>
 8003204:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <HAL_I2S_Init+0x27c>)
 8003206:	e001      	b.n	800320c <HAL_I2S_Init+0x1d8>
 8003208:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800320c:	2202      	movs	r2, #2
 800320e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a25      	ldr	r2, [pc, #148]	; (80032ac <HAL_I2S_Init+0x278>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_I2S_Init+0x1ea>
 800321a:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <HAL_I2S_Init+0x27c>)
 800321c:	e001      	b.n	8003222 <HAL_I2S_Init+0x1ee>
 800321e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800322e:	d003      	beq.n	8003238 <HAL_I2S_Init+0x204>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	e001      	b.n	8003244 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003240:	2300      	movs	r3, #0
 8003242:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800324e:	4313      	orrs	r3, r2
 8003250:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003258:	4313      	orrs	r3, r2
 800325a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003262:	4313      	orrs	r3, r2
 8003264:	b29a      	uxth	r2, r3
 8003266:	897b      	ldrh	r3, [r7, #10]
 8003268:	4313      	orrs	r3, r2
 800326a:	b29b      	uxth	r3, r3
 800326c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003270:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <HAL_I2S_Init+0x278>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d101      	bne.n	8003280 <HAL_I2S_Init+0x24c>
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <HAL_I2S_Init+0x27c>)
 800327e:	e001      	b.n	8003284 <HAL_I2S_Init+0x250>
 8003280:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003284:	897a      	ldrh	r2, [r7, #10]
 8003286:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	080033a5 	.word	0x080033a5
 80032a4:	cccccccd 	.word	0xcccccccd
 80032a8:	080034b9 	.word	0x080034b9
 80032ac:	40003800 	.word	0x40003800
 80032b0:	40003400 	.word	0x40003400

080032b4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	881a      	ldrh	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	1c9a      	adds	r2, r3, #2
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10e      	bne.n	800333e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800332e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ffbb 	bl	80032b4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	b292      	uxth	r2, r2
 800335a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	1c9a      	adds	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10e      	bne.n	800339c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800338c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff ff95 	bl	80032c6 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d13a      	bne.n	8003436 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d109      	bne.n	80033de <I2S_IRQHandler+0x3a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	d102      	bne.n	80033de <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff ffb4 	bl	8003346 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e4:	2b40      	cmp	r3, #64	; 0x40
 80033e6:	d126      	bne.n	8003436 <I2S_IRQHandler+0x92>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d11f      	bne.n	8003436 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003404:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	f043 0202 	orr.w	r2, r3, #2
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ff51 	bl	80032d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b03      	cmp	r3, #3
 8003440:	d136      	bne.n	80034b0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b02      	cmp	r3, #2
 800344a:	d109      	bne.n	8003460 <I2S_IRQHandler+0xbc>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003456:	2b80      	cmp	r3, #128	; 0x80
 8003458:	d102      	bne.n	8003460 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff ff45 	bl	80032ea <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b08      	cmp	r3, #8
 8003468:	d122      	bne.n	80034b0 <I2S_IRQHandler+0x10c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b20      	cmp	r3, #32
 8003476:	d11b      	bne.n	80034b0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003486:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f043 0204 	orr.w	r2, r3, #4
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ff14 	bl	80032d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034b0:	bf00      	nop
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a92      	ldr	r2, [pc, #584]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034d2:	4b92      	ldr	r3, [pc, #584]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034d4:	e001      	b.n	80034da <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a8b      	ldr	r2, [pc, #556]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d101      	bne.n	80034f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80034f0:	4b8a      	ldr	r3, [pc, #552]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034f2:	e001      	b.n	80034f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80034f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003504:	d004      	beq.n	8003510 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f040 8099 	bne.w	8003642 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b02      	cmp	r3, #2
 8003518:	d107      	bne.n	800352a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f924 	bl	8003772 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d107      	bne.n	8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f9c6 	bl	80038d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d13a      	bne.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b00      	cmp	r3, #0
 8003556:	d035      	beq.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a6e      	ldr	r2, [pc, #440]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d101      	bne.n	8003566 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003562:	4b6e      	ldr	r3, [pc, #440]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003564:	e001      	b.n	800356a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003566:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4969      	ldr	r1, [pc, #420]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003572:	428b      	cmp	r3, r1
 8003574:	d101      	bne.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003576:	4b69      	ldr	r3, [pc, #420]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003578:	e001      	b.n	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800357a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003582:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003592:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f043 0202 	orr.w	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff fe8a 	bl	80032d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	f040 80c3 	bne.w	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 80bd 	beq.w	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a49      	ldr	r2, [pc, #292]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d101      	bne.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80035f6:	4b49      	ldr	r3, [pc, #292]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035f8:	e001      	b.n	80035fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80035fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4944      	ldr	r1, [pc, #272]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003606:	428b      	cmp	r3, r1
 8003608:	d101      	bne.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800360a:	4b44      	ldr	r3, [pc, #272]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800360c:	e001      	b.n	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800360e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003612:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003616:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f043 0204 	orr.w	r2, r3, #4
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fe4c 	bl	80032d8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003640:	e089      	b.n	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b02      	cmp	r3, #2
 800364a:	d107      	bne.n	800365c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f8bc 	bl	80037d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d107      	bne.n	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f8fb 	bl	800386c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d12f      	bne.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d02a      	beq.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003698:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d101      	bne.n	80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036a6:	e001      	b.n	80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80036a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4919      	ldr	r1, [pc, #100]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036b4:	428b      	cmp	r3, r1
 80036b6:	d101      	bne.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80036b8:	4b18      	ldr	r3, [pc, #96]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ba:	e001      	b.n	80036c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80036bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f043 0202 	orr.w	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff fdfc 	bl	80032d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d136      	bne.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d031      	beq.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a07      	ldr	r2, [pc, #28]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003700:	e001      	b.n	8003706 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003702:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4902      	ldr	r1, [pc, #8]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800370e:	428b      	cmp	r3, r1
 8003710:	d106      	bne.n	8003720 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003712:	4b02      	ldr	r3, [pc, #8]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003714:	e006      	b.n	8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003716:	bf00      	nop
 8003718:	40003800 	.word	0x40003800
 800371c:	40003400 	.word	0x40003400
 8003720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003724:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003728:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003738:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f043 0204 	orr.w	r2, r3, #4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fdc2 	bl	80032d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003754:	e000      	b.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003756:	bf00      	nop
}
 8003758:	bf00      	nop
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	1c99      	adds	r1, r3, #2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6251      	str	r1, [r2, #36]	; 0x24
 8003784:	881a      	ldrh	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d113      	bne.n	80037cc <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037b2:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff ffca 	bl	8003760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	1c99      	adds	r1, r3, #2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6251      	str	r1, [r2, #36]	; 0x24
 80037e6:	8819      	ldrh	r1, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <I2SEx_TxISR_I2SExt+0x90>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <I2SEx_TxISR_I2SExt+0x22>
 80037f2:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <I2SEx_TxISR_I2SExt+0x94>)
 80037f4:	e001      	b.n	80037fa <I2SEx_TxISR_I2SExt+0x26>
 80037f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fa:	460a      	mov	r2, r1
 80037fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d121      	bne.n	800385a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a12      	ldr	r2, [pc, #72]	; (8003864 <I2SEx_TxISR_I2SExt+0x90>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d101      	bne.n	8003824 <I2SEx_TxISR_I2SExt+0x50>
 8003820:	4b11      	ldr	r3, [pc, #68]	; (8003868 <I2SEx_TxISR_I2SExt+0x94>)
 8003822:	e001      	b.n	8003828 <I2SEx_TxISR_I2SExt+0x54>
 8003824:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	490d      	ldr	r1, [pc, #52]	; (8003864 <I2SEx_TxISR_I2SExt+0x90>)
 8003830:	428b      	cmp	r3, r1
 8003832:	d101      	bne.n	8003838 <I2SEx_TxISR_I2SExt+0x64>
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <I2SEx_TxISR_I2SExt+0x94>)
 8003836:	e001      	b.n	800383c <I2SEx_TxISR_I2SExt+0x68>
 8003838:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800383c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003840:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ff83 	bl	8003760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40003800 	.word	0x40003800
 8003868:	40003400 	.word	0x40003400

0800386c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68d8      	ldr	r0, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	1c99      	adds	r1, r3, #2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003884:	b282      	uxth	r2, r0
 8003886:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d113      	bne.n	80038c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ff4c 	bl	8003760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a20      	ldr	r2, [pc, #128]	; (8003960 <I2SEx_RxISR_I2SExt+0x90>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d101      	bne.n	80038e6 <I2SEx_RxISR_I2SExt+0x16>
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <I2SEx_RxISR_I2SExt+0x94>)
 80038e4:	e001      	b.n	80038ea <I2SEx_RxISR_I2SExt+0x1a>
 80038e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ea:	68d8      	ldr	r0, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	1c99      	adds	r1, r3, #2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038f6:	b282      	uxth	r2, r0
 80038f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d121      	bne.n	8003956 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a12      	ldr	r2, [pc, #72]	; (8003960 <I2SEx_RxISR_I2SExt+0x90>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d101      	bne.n	8003920 <I2SEx_RxISR_I2SExt+0x50>
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <I2SEx_RxISR_I2SExt+0x94>)
 800391e:	e001      	b.n	8003924 <I2SEx_RxISR_I2SExt+0x54>
 8003920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	490d      	ldr	r1, [pc, #52]	; (8003960 <I2SEx_RxISR_I2SExt+0x90>)
 800392c:	428b      	cmp	r3, r1
 800392e:	d101      	bne.n	8003934 <I2SEx_RxISR_I2SExt+0x64>
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <I2SEx_RxISR_I2SExt+0x94>)
 8003932:	e001      	b.n	8003938 <I2SEx_RxISR_I2SExt+0x68>
 8003934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003938:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800393c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d106      	bne.n	8003956 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff05 	bl	8003760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40003800 	.word	0x40003800
 8003964:	40003400 	.word	0x40003400

08003968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e267      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d075      	beq.n	8003a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003986:	4b88      	ldr	r3, [pc, #544]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b04      	cmp	r3, #4
 8003990:	d00c      	beq.n	80039ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003992:	4b85      	ldr	r3, [pc, #532]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800399a:	2b08      	cmp	r3, #8
 800399c:	d112      	bne.n	80039c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399e:	4b82      	ldr	r3, [pc, #520]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039aa:	d10b      	bne.n	80039c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	4b7e      	ldr	r3, [pc, #504]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05b      	beq.n	8003a70 <HAL_RCC_OscConfig+0x108>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d157      	bne.n	8003a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e242      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039cc:	d106      	bne.n	80039dc <HAL_RCC_OscConfig+0x74>
 80039ce:	4b76      	ldr	r3, [pc, #472]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a75      	ldr	r2, [pc, #468]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e01d      	b.n	8003a18 <HAL_RCC_OscConfig+0xb0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x98>
 80039e6:	4b70      	ldr	r3, [pc, #448]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6f      	ldr	r2, [pc, #444]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b6d      	ldr	r3, [pc, #436]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6c      	ldr	r2, [pc, #432]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0xb0>
 8003a00:	4b69      	ldr	r3, [pc, #420]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a68      	ldr	r2, [pc, #416]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b66      	ldr	r3, [pc, #408]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a65      	ldr	r2, [pc, #404]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fd fad2 	bl	8000fc8 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fd face 	bl	8000fc8 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e207      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0xc0>
 8003a46:	e014      	b.n	8003a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fd fabe 	bl	8000fc8 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fd faba 	bl	8000fc8 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e1f3      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	4b51      	ldr	r3, [pc, #324]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0xe8>
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d063      	beq.n	8003b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8a:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d11c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a96:	4b44      	ldr	r3, [pc, #272]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d116      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	4b41      	ldr	r3, [pc, #260]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_RCC_OscConfig+0x152>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e1c7      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4937      	ldr	r1, [pc, #220]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	e03a      	b.n	8003b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d020      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad8:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_RCC_OscConfig+0x244>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fd fa73 	bl	8000fc8 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae6:	f7fd fa6f 	bl	8000fc8 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e1a8      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af8:	4b2b      	ldr	r3, [pc, #172]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b04:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4925      	ldr	r1, [pc, #148]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	600b      	str	r3, [r1, #0]
 8003b18:	e015      	b.n	8003b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1a:	4b24      	ldr	r3, [pc, #144]	; (8003bac <HAL_RCC_OscConfig+0x244>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd fa52 	bl	8000fc8 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b28:	f7fd fa4e 	bl	8000fc8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e187      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d036      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d016      	beq.n	8003b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5a:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <HAL_RCC_OscConfig+0x248>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b60:	f7fd fa32 	bl	8000fc8 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b68:	f7fd fa2e 	bl	8000fc8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e167      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0x200>
 8003b86:	e01b      	b.n	8003bc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b88:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCC_OscConfig+0x248>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8e:	f7fd fa1b 	bl	8000fc8 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	e00e      	b.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b96:	f7fd fa17 	bl	8000fc8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d907      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e150      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	42470000 	.word	0x42470000
 8003bb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb4:	4b88      	ldr	r3, [pc, #544]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1ea      	bne.n	8003b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8097 	beq.w	8003cfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd2:	4b81      	ldr	r3, [pc, #516]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10f      	bne.n	8003bfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	4b7d      	ldr	r3, [pc, #500]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	4a7c      	ldr	r2, [pc, #496]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6413      	str	r3, [r2, #64]	; 0x40
 8003bee:	4b7a      	ldr	r3, [pc, #488]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfe:	4b77      	ldr	r3, [pc, #476]	; (8003ddc <HAL_RCC_OscConfig+0x474>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d118      	bne.n	8003c3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0a:	4b74      	ldr	r3, [pc, #464]	; (8003ddc <HAL_RCC_OscConfig+0x474>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a73      	ldr	r2, [pc, #460]	; (8003ddc <HAL_RCC_OscConfig+0x474>)
 8003c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c16:	f7fd f9d7 	bl	8000fc8 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1e:	f7fd f9d3 	bl	8000fc8 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e10c      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c30:	4b6a      	ldr	r3, [pc, #424]	; (8003ddc <HAL_RCC_OscConfig+0x474>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d106      	bne.n	8003c52 <HAL_RCC_OscConfig+0x2ea>
 8003c44:	4b64      	ldr	r3, [pc, #400]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	4a63      	ldr	r2, [pc, #396]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c50:	e01c      	b.n	8003c8c <HAL_RCC_OscConfig+0x324>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x30c>
 8003c5a:	4b5f      	ldr	r3, [pc, #380]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	4a5e      	ldr	r2, [pc, #376]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c60:	f043 0304 	orr.w	r3, r3, #4
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70
 8003c66:	4b5c      	ldr	r3, [pc, #368]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	4a5b      	ldr	r2, [pc, #364]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	6713      	str	r3, [r2, #112]	; 0x70
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0x324>
 8003c74:	4b58      	ldr	r3, [pc, #352]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	4a57      	ldr	r2, [pc, #348]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c7a:	f023 0301 	bic.w	r3, r3, #1
 8003c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c80:	4b55      	ldr	r3, [pc, #340]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	4a54      	ldr	r2, [pc, #336]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c86:	f023 0304 	bic.w	r3, r3, #4
 8003c8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d015      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fd f998 	bl	8000fc8 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7fd f994 	bl	8000fc8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e0cb      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb2:	4b49      	ldr	r3, [pc, #292]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0ee      	beq.n	8003c9c <HAL_RCC_OscConfig+0x334>
 8003cbe:	e014      	b.n	8003cea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc0:	f7fd f982 	bl	8000fc8 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fd f97e 	bl	8000fc8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e0b5      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cde:	4b3e      	ldr	r3, [pc, #248]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1ee      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d105      	bne.n	8003cfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf0:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	4a38      	ldr	r2, [pc, #224]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80a1 	beq.w	8003e48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d06:	4b34      	ldr	r3, [pc, #208]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d05c      	beq.n	8003dcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d141      	bne.n	8003d9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1a:	4b31      	ldr	r3, [pc, #196]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d20:	f7fd f952 	bl	8000fc8 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d28:	f7fd f94e 	bl	8000fc8 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e087      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3a:	4b27      	ldr	r3, [pc, #156]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	019b      	lsls	r3, r3, #6
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	491b      	ldr	r1, [pc, #108]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d70:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d76:	f7fd f927 	bl	8000fc8 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fd f923 	bl	8000fc8 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e05c      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x416>
 8003d9c:	e054      	b.n	8003e48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9e:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fd f910 	bl	8000fc8 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fd f90c 	bl	8000fc8 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e045      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x444>
 8003dca:	e03d      	b.n	8003e48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e038      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003de4:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <HAL_RCC_OscConfig+0x4ec>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d028      	beq.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d121      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d11a      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e14:	4013      	ands	r3, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d111      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d107      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800

08003e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0cc      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b68      	ldr	r3, [pc, #416]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d90c      	bls.n	8003e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b65      	ldr	r3, [pc, #404]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b63      	ldr	r3, [pc, #396]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0b8      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d020      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eac:	4b59      	ldr	r3, [pc, #356]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a58      	ldr	r2, [pc, #352]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec4:	4b53      	ldr	r3, [pc, #332]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4a52      	ldr	r2, [pc, #328]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed0:	4b50      	ldr	r3, [pc, #320]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	494d      	ldr	r1, [pc, #308]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d044      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d107      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	4b47      	ldr	r3, [pc, #284]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d119      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e07f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d107      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f16:	4b3f      	ldr	r3, [pc, #252]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e06f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f26:	4b3b      	ldr	r3, [pc, #236]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e067      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f36:	4b37      	ldr	r3, [pc, #220]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f023 0203 	bic.w	r2, r3, #3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4934      	ldr	r1, [pc, #208]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f48:	f7fd f83e 	bl	8000fc8 <HAL_GetTick>
 8003f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f50:	f7fd f83a 	bl	8000fc8 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e04f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f66:	4b2b      	ldr	r3, [pc, #172]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 020c 	and.w	r2, r3, #12
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d1eb      	bne.n	8003f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f78:	4b25      	ldr	r3, [pc, #148]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d20c      	bcs.n	8003fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b22      	ldr	r3, [pc, #136]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8e:	4b20      	ldr	r3, [pc, #128]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e032      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4916      	ldr	r1, [pc, #88]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	490e      	ldr	r1, [pc, #56]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fde:	f000 f821 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	490a      	ldr	r1, [pc, #40]	; (8004018 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	5ccb      	ldrb	r3, [r1, r3]
 8003ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff6:	4a09      	ldr	r2, [pc, #36]	; (800401c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fc ffa0 	bl	8000f44 <HAL_InitTick>

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023c00 	.word	0x40023c00
 8004014:	40023800 	.word	0x40023800
 8004018:	08006df0 	.word	0x08006df0
 800401c:	20000000 	.word	0x20000000
 8004020:	20000004 	.word	0x20000004

08004024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004028:	b094      	sub	sp, #80	; 0x50
 800402a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	647b      	str	r3, [r7, #68]	; 0x44
 8004030:	2300      	movs	r3, #0
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004034:	2300      	movs	r3, #0
 8004036:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800403c:	4b7c      	ldr	r3, [pc, #496]	; (8004230 <HAL_RCC_GetSysClockFreq+0x20c>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 030c 	and.w	r3, r3, #12
 8004044:	2b08      	cmp	r3, #8
 8004046:	d00d      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x40>
 8004048:	2b08      	cmp	r3, #8
 800404a:	f200 80e7 	bhi.w	800421c <HAL_RCC_GetSysClockFreq+0x1f8>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_RCC_GetSysClockFreq+0x34>
 8004052:	2b04      	cmp	r3, #4
 8004054:	d003      	beq.n	800405e <HAL_RCC_GetSysClockFreq+0x3a>
 8004056:	e0e1      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004058:	4b76      	ldr	r3, [pc, #472]	; (8004234 <HAL_RCC_GetSysClockFreq+0x210>)
 800405a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800405c:	e0e1      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800405e:	4b76      	ldr	r3, [pc, #472]	; (8004238 <HAL_RCC_GetSysClockFreq+0x214>)
 8004060:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004062:	e0de      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004064:	4b72      	ldr	r3, [pc, #456]	; (8004230 <HAL_RCC_GetSysClockFreq+0x20c>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800406c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800406e:	4b70      	ldr	r3, [pc, #448]	; (8004230 <HAL_RCC_GetSysClockFreq+0x20c>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d065      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407a:	4b6d      	ldr	r3, [pc, #436]	; (8004230 <HAL_RCC_GetSysClockFreq+0x20c>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	099b      	lsrs	r3, r3, #6
 8004080:	2200      	movs	r2, #0
 8004082:	63bb      	str	r3, [r7, #56]	; 0x38
 8004084:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408c:	633b      	str	r3, [r7, #48]	; 0x30
 800408e:	2300      	movs	r3, #0
 8004090:	637b      	str	r3, [r7, #52]	; 0x34
 8004092:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004096:	4622      	mov	r2, r4
 8004098:	462b      	mov	r3, r5
 800409a:	f04f 0000 	mov.w	r0, #0
 800409e:	f04f 0100 	mov.w	r1, #0
 80040a2:	0159      	lsls	r1, r3, #5
 80040a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040a8:	0150      	lsls	r0, r2, #5
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4621      	mov	r1, r4
 80040b0:	1a51      	subs	r1, r2, r1
 80040b2:	6139      	str	r1, [r7, #16]
 80040b4:	4629      	mov	r1, r5
 80040b6:	eb63 0301 	sbc.w	r3, r3, r1
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040c8:	4659      	mov	r1, fp
 80040ca:	018b      	lsls	r3, r1, #6
 80040cc:	4651      	mov	r1, sl
 80040ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040d2:	4651      	mov	r1, sl
 80040d4:	018a      	lsls	r2, r1, #6
 80040d6:	46d4      	mov	ip, sl
 80040d8:	ebb2 080c 	subs.w	r8, r2, ip
 80040dc:	4659      	mov	r1, fp
 80040de:	eb63 0901 	sbc.w	r9, r3, r1
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040f6:	4690      	mov	r8, r2
 80040f8:	4699      	mov	r9, r3
 80040fa:	4623      	mov	r3, r4
 80040fc:	eb18 0303 	adds.w	r3, r8, r3
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	462b      	mov	r3, r5
 8004104:	eb49 0303 	adc.w	r3, r9, r3
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004116:	4629      	mov	r1, r5
 8004118:	024b      	lsls	r3, r1, #9
 800411a:	4620      	mov	r0, r4
 800411c:	4629      	mov	r1, r5
 800411e:	4604      	mov	r4, r0
 8004120:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004124:	4601      	mov	r1, r0
 8004126:	024a      	lsls	r2, r1, #9
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800412e:	2200      	movs	r2, #0
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
 8004132:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004134:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004138:	f7fc f846 	bl	80001c8 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4613      	mov	r3, r2
 8004142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004144:	e05c      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004146:	4b3a      	ldr	r3, [pc, #232]	; (8004230 <HAL_RCC_GetSysClockFreq+0x20c>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	099b      	lsrs	r3, r3, #6
 800414c:	2200      	movs	r2, #0
 800414e:	4618      	mov	r0, r3
 8004150:	4611      	mov	r1, r2
 8004152:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	2300      	movs	r3, #0
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
 800415c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004160:	4642      	mov	r2, r8
 8004162:	464b      	mov	r3, r9
 8004164:	f04f 0000 	mov.w	r0, #0
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	0159      	lsls	r1, r3, #5
 800416e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004172:	0150      	lsls	r0, r2, #5
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	46c4      	mov	ip, r8
 800417a:	ebb2 0a0c 	subs.w	sl, r2, ip
 800417e:	4640      	mov	r0, r8
 8004180:	4649      	mov	r1, r9
 8004182:	468c      	mov	ip, r1
 8004184:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004194:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004198:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800419c:	ebb2 040a 	subs.w	r4, r2, sl
 80041a0:	eb63 050b 	sbc.w	r5, r3, fp
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	00eb      	lsls	r3, r5, #3
 80041ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041b2:	00e2      	lsls	r2, r4, #3
 80041b4:	4614      	mov	r4, r2
 80041b6:	461d      	mov	r5, r3
 80041b8:	4603      	mov	r3, r0
 80041ba:	18e3      	adds	r3, r4, r3
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	460b      	mov	r3, r1
 80041c0:	eb45 0303 	adc.w	r3, r5, r3
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041d2:	4629      	mov	r1, r5
 80041d4:	028b      	lsls	r3, r1, #10
 80041d6:	4620      	mov	r0, r4
 80041d8:	4629      	mov	r1, r5
 80041da:	4604      	mov	r4, r0
 80041dc:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80041e0:	4601      	mov	r1, r0
 80041e2:	028a      	lsls	r2, r1, #10
 80041e4:	4610      	mov	r0, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ea:	2200      	movs	r2, #0
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	61fa      	str	r2, [r7, #28]
 80041f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f4:	f7fb ffe8 	bl	80001c8 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4613      	mov	r3, r2
 80041fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_GetSysClockFreq+0x20c>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	3301      	adds	r3, #1
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004210:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004214:	fbb2 f3f3 	udiv	r3, r2, r3
 8004218:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800421a:	e002      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <HAL_RCC_GetSysClockFreq+0x210>)
 800421e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004224:	4618      	mov	r0, r3
 8004226:	3750      	adds	r7, #80	; 0x50
 8004228:	46bd      	mov	sp, r7
 800422a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800422e:	bf00      	nop
 8004230:	40023800 	.word	0x40023800
 8004234:	00f42400 	.word	0x00f42400
 8004238:	007a1200 	.word	0x007a1200

0800423c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004240:	4b02      	ldr	r3, [pc, #8]	; (800424c <HAL_RCC_GetHCLKFreq+0x10>)
 8004242:	681b      	ldr	r3, [r3, #0]
}
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr
 800424c:	20000000 	.word	0x20000000

08004250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004254:	f7ff fff2 	bl	800423c <HAL_RCC_GetHCLKFreq>
 8004258:	4602      	mov	r2, r0
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	0a9b      	lsrs	r3, r3, #10
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	4903      	ldr	r1, [pc, #12]	; (8004274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40023800 	.word	0x40023800
 8004274:	08006e00 	.word	0x08006e00

08004278 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800429c:	2b00      	cmp	r3, #0
 800429e:	d035      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042a0:	4b62      	ldr	r3, [pc, #392]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042a6:	f7fc fe8f 	bl	8000fc8 <HAL_GetTick>
 80042aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042ae:	f7fc fe8b 	bl	8000fc8 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e0b0      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042c0:	4b5b      	ldr	r3, [pc, #364]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f0      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	019a      	lsls	r2, r3, #6
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	071b      	lsls	r3, r3, #28
 80042d8:	4955      	ldr	r1, [pc, #340]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042e0:	4b52      	ldr	r3, [pc, #328]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042e6:	f7fc fe6f 	bl	8000fc8 <HAL_GetTick>
 80042ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042ec:	e008      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042ee:	f7fc fe6b 	bl	8000fc8 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e090      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004300:	4b4b      	ldr	r3, [pc, #300]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8083 	beq.w	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	4b44      	ldr	r3, [pc, #272]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a43      	ldr	r2, [pc, #268]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
 800432a:	4b41      	ldr	r3, [pc, #260]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004336:	4b3f      	ldr	r3, [pc, #252]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a3e      	ldr	r2, [pc, #248]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800433c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004340:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004342:	f7fc fe41 	bl	8000fc8 <HAL_GetTick>
 8004346:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800434a:	f7fc fe3d 	bl	8000fc8 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e062      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800435c:	4b35      	ldr	r3, [pc, #212]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004368:	4b31      	ldr	r3, [pc, #196]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004370:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02f      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	429a      	cmp	r2, r3
 8004384:	d028      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004386:	4b2a      	ldr	r3, [pc, #168]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004390:	4b29      	ldr	r3, [pc, #164]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004396:	4b28      	ldr	r3, [pc, #160]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800439c:	4a24      	ldr	r2, [pc, #144]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043a2:	4b23      	ldr	r3, [pc, #140]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d114      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043ae:	f7fc fe0b 	bl	8000fc8 <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b4:	e00a      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fc fe07 	bl	8000fc8 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e02a      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	4b18      	ldr	r3, [pc, #96]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ee      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e4:	d10d      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fa:	490d      	ldr	r1, [pc, #52]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	608b      	str	r3, [r1, #8]
 8004400:	e005      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	4a0a      	ldr	r2, [pc, #40]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004408:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800440c:	6093      	str	r3, [r2, #8]
 800440e:	4b08      	ldr	r3, [pc, #32]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004410:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441a:	4905      	ldr	r1, [pc, #20]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800441c:	4313      	orrs	r3, r2
 800441e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	42470068 	.word	0x42470068
 8004430:	40023800 	.word	0x40023800
 8004434:	40007000 	.word	0x40007000
 8004438:	42470e40 	.word	0x42470e40

0800443c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d13e      	bne.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800445a:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d12f      	bne.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004470:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004472:	617b      	str	r3, [r7, #20]
          break;
 8004474:	e02f      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004476:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004482:	d108      	bne.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004484:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800448c:	4a17      	ldr	r2, [pc, #92]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800448e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	e007      	b.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004496:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800449e:	4a14      	ldr	r2, [pc, #80]	; (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ac:	099b      	lsrs	r3, r3, #6
 80044ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c0:	0f1b      	lsrs	r3, r3, #28
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	617b      	str	r3, [r7, #20]
          break;
 80044ce:	e002      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
          break;
 80044d4:	bf00      	nop
        }
      }
      break;
 80044d6:	bf00      	nop
    }
  }
  return frequency;
 80044d8:	697b      	ldr	r3, [r7, #20]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	40023800 	.word	0x40023800
 80044e8:	00bb8000 	.word	0x00bb8000
 80044ec:	007a1200 	.word	0x007a1200
 80044f0:	00f42400 	.word	0x00f42400

080044f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e07b      	b.n	80045fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	d108      	bne.n	8004520 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004516:	d009      	beq.n	800452c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	61da      	str	r2, [r3, #28]
 800451e:	e005      	b.n	800452c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc fbfa 	bl	8000d40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004562:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	ea42 0103 	orr.w	r1, r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	f003 0104 	and.w	r1, r3, #4
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	f003 0210 	and.w	r2, r3, #16
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004606:	b084      	sub	sp, #16
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	f107 001c 	add.w	r0, r7, #28
 8004614:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	2b01      	cmp	r3, #1
 800461c:	d122      	bne.n	8004664 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d105      	bne.n	8004658 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f9b9 	bl	80049d0 <USB_CoreReset>
 800465e:	4603      	mov	r3, r0
 8004660:	73fb      	strb	r3, [r7, #15]
 8004662:	e01a      	b.n	800469a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f9ad 	bl	80049d0 <USB_CoreReset>
 8004676:	4603      	mov	r3, r0
 8004678:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800467a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d106      	bne.n	800468e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
 800468c:	e005      	b.n	800469a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	2b01      	cmp	r3, #1
 800469e:	d10b      	bne.n	80046b8 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f043 0206 	orr.w	r2, r3, #6
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f043 0220 	orr.w	r2, r3, #32
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046c4:	b004      	add	sp, #16
 80046c6:	4770      	bx	lr

080046c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f043 0201 	orr.w	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f023 0201 	bic.w	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d115      	bne.n	8004756 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004736:	2001      	movs	r0, #1
 8004738:	f7fc fc50 	bl	8000fdc <HAL_Delay>
      ms++;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3301      	adds	r3, #1
 8004740:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f936 	bl	80049b4 <USB_GetMode>
 8004748:	4603      	mov	r3, r0
 800474a:	2b01      	cmp	r3, #1
 800474c:	d01e      	beq.n	800478c <USB_SetCurrentMode+0x84>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b31      	cmp	r3, #49	; 0x31
 8004752:	d9f0      	bls.n	8004736 <USB_SetCurrentMode+0x2e>
 8004754:	e01a      	b.n	800478c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d115      	bne.n	8004788 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004768:	2001      	movs	r0, #1
 800476a:	f7fc fc37 	bl	8000fdc <HAL_Delay>
      ms++;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3301      	adds	r3, #1
 8004772:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f91d 	bl	80049b4 <USB_GetMode>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <USB_SetCurrentMode+0x84>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b31      	cmp	r3, #49	; 0x31
 8004784:	d9f0      	bls.n	8004768 <USB_SetCurrentMode+0x60>
 8004786:	e001      	b.n	800478c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e005      	b.n	8004798 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b32      	cmp	r3, #50	; 0x32
 8004790:	d101      	bne.n	8004796 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3301      	adds	r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a13      	ldr	r2, [pc, #76]	; (8004804 <USB_FlushTxFifo+0x64>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e01b      	b.n	80047f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	daf2      	bge.n	80047ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	019b      	lsls	r3, r3, #6
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a08      	ldr	r2, [pc, #32]	; (8004804 <USB_FlushTxFifo+0x64>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e006      	b.n	80047f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d0f0      	beq.n	80047d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	00030d40 	.word	0x00030d40

08004808 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3301      	adds	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a11      	ldr	r2, [pc, #68]	; (8004864 <USB_FlushRxFifo+0x5c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e018      	b.n	8004858 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	daf2      	bge.n	8004814 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2210      	movs	r2, #16
 8004836:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3301      	adds	r3, #1
 800483c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4a08      	ldr	r2, [pc, #32]	; (8004864 <USB_FlushRxFifo+0x5c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e006      	b.n	8004858 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b10      	cmp	r3, #16
 8004854:	d0f0      	beq.n	8004838 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	bc80      	pop	{r7}
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	00030d40 	.word	0x00030d40

08004868 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004868:	b480      	push	{r7}
 800486a:	b089      	sub	sp, #36	; 0x24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	4611      	mov	r1, r2
 8004874:	461a      	mov	r2, r3
 8004876:	460b      	mov	r3, r1
 8004878:	71fb      	strb	r3, [r7, #7]
 800487a:	4613      	mov	r3, r2
 800487c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004886:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800488a:	2b00      	cmp	r3, #0
 800488c:	d123      	bne.n	80048d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800488e:	88bb      	ldrh	r3, [r7, #4]
 8004890:	3303      	adds	r3, #3
 8004892:	089b      	lsrs	r3, r3, #2
 8004894:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004896:	2300      	movs	r3, #0
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	e018      	b.n	80048ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	031a      	lsls	r2, r3, #12
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a8:	461a      	mov	r2, r3
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	3301      	adds	r3, #1
 80048b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3301      	adds	r3, #1
 80048ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	3301      	adds	r3, #1
 80048c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	3301      	adds	r3, #1
 80048c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	3301      	adds	r3, #1
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d3e2      	bcc.n	800489c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3724      	adds	r7, #36	; 0x24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b08b      	sub	sp, #44	; 0x2c
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	4613      	mov	r3, r2
 80048ee:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80048f8:	88fb      	ldrh	r3, [r7, #6]
 80048fa:	089b      	lsrs	r3, r3, #2
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004900:	88fb      	ldrh	r3, [r7, #6]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004908:	2300      	movs	r3, #0
 800490a:	623b      	str	r3, [r7, #32]
 800490c:	e014      	b.n	8004938 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	601a      	str	r2, [r3, #0]
    pDest++;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	3301      	adds	r3, #1
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	3301      	adds	r3, #1
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	3301      	adds	r3, #1
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	3301      	adds	r3, #1
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	3301      	adds	r3, #1
 8004936:	623b      	str	r3, [r7, #32]
 8004938:	6a3a      	ldr	r2, [r7, #32]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	429a      	cmp	r2, r3
 800493e:	d3e6      	bcc.n	800490e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004940:	8bfb      	ldrh	r3, [r7, #30]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d01e      	beq.n	8004984 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004950:	461a      	mov	r2, r3
 8004952:	f107 0310 	add.w	r3, r7, #16
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	fa22 f303 	lsr.w	r3, r2, r3
 8004966:	b2da      	uxtb	r2, r3
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	701a      	strb	r2, [r3, #0]
      i++;
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	3301      	adds	r3, #1
 8004970:	623b      	str	r3, [r7, #32]
      pDest++;
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	3301      	adds	r3, #1
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004978:	8bfb      	ldrh	r3, [r7, #30]
 800497a:	3b01      	subs	r3, #1
 800497c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800497e:	8bfb      	ldrh	r3, [r7, #30]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ea      	bne.n	800495a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004986:	4618      	mov	r0, r3
 8004988:	372c      	adds	r7, #44	; 0x2c
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr

08004990 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4013      	ands	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049a8:	68fb      	ldr	r3, [r7, #12]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr

080049b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	f003 0301 	and.w	r3, r3, #1
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr
	...

080049d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3301      	adds	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4a12      	ldr	r2, [pc, #72]	; (8004a30 <USB_CoreReset+0x60>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e01b      	b.n	8004a26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	daf2      	bge.n	80049dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f043 0201 	orr.w	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4a08      	ldr	r2, [pc, #32]	; (8004a30 <USB_CoreReset+0x60>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d901      	bls.n	8004a18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e006      	b.n	8004a26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d0f0      	beq.n	8004a06 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	00030d40 	.word	0x00030d40

08004a34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a34:	b084      	sub	sp, #16
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b086      	sub	sp, #24
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a54:	461a      	mov	r2, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d018      	beq.n	8004abc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d10a      	bne.n	8004aa6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a9e:	f043 0304 	orr.w	r3, r3, #4
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	e014      	b.n	8004ad0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ab4:	f023 0304 	bic.w	r3, r3, #4
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e009      	b.n	8004ad0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004aca:	f023 0304 	bic.w	r3, r3, #4
 8004ace:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ad0:	2110      	movs	r1, #16
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff fe64 	bl	80047a0 <USB_FlushTxFifo>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff fe90 	bl	8004808 <USB_FlushRxFifo>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	e015      	b.n	8004b24 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b04:	461a      	mov	r2, r3
 8004b06:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b18:	461a      	mov	r2, r3
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	3301      	adds	r3, #1
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d3e5      	bcc.n	8004af8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f04f 32ff 	mov.w	r2, #4294967295
 8004b38:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <USB_HostInit+0x16c>)
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <USB_HostInit+0x170>)
 8004b58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b5c:	e009      	b.n	8004b72 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2280      	movs	r2, #128	; 0x80
 8004b62:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a10      	ldr	r2, [pc, #64]	; (8004ba8 <USB_HostInit+0x174>)
 8004b68:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a0f      	ldr	r2, [pc, #60]	; (8004bac <USB_HostInit+0x178>)
 8004b6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d105      	bne.n	8004b84 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f043 0210 	orr.w	r2, r3, #16
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699a      	ldr	r2, [r3, #24]
 8004b88:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <USB_HostInit+0x17c>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b9c:	b004      	add	sp, #16
 8004b9e:	4770      	bx	lr
 8004ba0:	01000200 	.word	0x01000200
 8004ba4:	00e00300 	.word	0x00e00300
 8004ba8:	00600080 	.word	0x00600080
 8004bac:	004000e0 	.word	0x004000e0
 8004bb0:	a3200008 	.word	0xa3200008

08004bb4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	68f9      	ldr	r1, [r7, #12]
 8004be8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004bec:	4313      	orrs	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d107      	bne.n	8004c06 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c02:	6053      	str	r3, [r2, #4]
 8004c04:	e009      	b.n	8004c1a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d106      	bne.n	8004c1a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c12:	461a      	mov	r2, r3
 8004c14:	f241 7370 	movw	r3, #6000	; 0x1770
 8004c18:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c4a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <USB_DriveVbus+0x44>
 8004c56:	78fb      	ldrb	r3, [r7, #3]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d106      	bne.n	8004c6a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c68:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c74:	d109      	bne.n	8004c8a <USB_DriveVbus+0x64>
 8004c76:	78fb      	ldrb	r3, [r7, #3]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c88:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b085      	sub	sp, #20
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	0c5b      	lsrs	r3, r3, #17
 8004cb4:	f003 0303 	and.w	r3, r3, #3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr

08004cc2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	b29b      	uxth	r3, r3
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr
	...

08004ce4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	4608      	mov	r0, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	70fb      	strb	r3, [r7, #3]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	70bb      	strb	r3, [r7, #2]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d12:	461a      	mov	r2, r3
 8004d14:	f04f 33ff 	mov.w	r3, #4294967295
 8004d18:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d87e      	bhi.n	8004e20 <USB_HC_Init+0x13c>
 8004d22:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <USB_HC_Init+0x44>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d39 	.word	0x08004d39
 8004d2c:	08004de3 	.word	0x08004de3
 8004d30:	08004d39 	.word	0x08004d39
 8004d34:	08004da5 	.word	0x08004da5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d44:	461a      	mov	r2, r3
 8004d46:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	da10      	bge.n	8004d76 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d72:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004d74:	e057      	b.n	8004e26 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d051      	beq.n	8004e26 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	78fa      	ldrb	r2, [r7, #3]
 8004d92:	0151      	lsls	r1, r2, #5
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	440a      	add	r2, r1
 8004d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004da0:	60d3      	str	r3, [r2, #12]
      break;
 8004da2:	e040      	b.n	8004e26 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db0:	461a      	mov	r2, r3
 8004db2:	f240 639d 	movw	r3, #1693	; 0x69d
 8004db6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004db8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	da34      	bge.n	8004e2a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	0151      	lsls	r1, r2, #5
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dde:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004de0:	e023      	b.n	8004e2a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dee:	461a      	mov	r2, r3
 8004df0:	f240 2325 	movw	r3, #549	; 0x225
 8004df4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004df6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	da17      	bge.n	8004e2e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	78fa      	ldrb	r2, [r7, #3]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e18:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e1c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e1e:	e006      	b.n	8004e2e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	77fb      	strb	r3, [r7, #31]
      break;
 8004e24:	e004      	b.n	8004e30 <USB_HC_Init+0x14c>
      break;
 8004e26:	bf00      	nop
 8004e28:	e002      	b.n	8004e30 <USB_HC_Init+0x14c>
      break;
 8004e2a:	bf00      	nop
 8004e2c:	e000      	b.n	8004e30 <USB_HC_Init+0x14c>
      break;
 8004e2e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e4a:	f043 0302 	orr.w	r3, r3, #2
 8004e4e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	2101      	movs	r1, #1
 8004e60:	fa01 f303 	lsl.w	r3, r1, r3
 8004e64:	6939      	ldr	r1, [r7, #16]
 8004e66:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da03      	bge.n	8004e8a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e86:	61bb      	str	r3, [r7, #24]
 8004e88:	e001      	b.n	8004e8e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ff01 	bl	8004c96 <USB_GetHostSpeed>
 8004e94:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004e96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d106      	bne.n	8004eac <USB_HC_Init+0x1c8>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d003      	beq.n	8004eac <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	e001      	b.n	8004eb0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004eb0:	787b      	ldrb	r3, [r7, #1]
 8004eb2:	059b      	lsls	r3, r3, #22
 8004eb4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004eb8:	78bb      	ldrb	r3, [r7, #2]
 8004eba:	02db      	lsls	r3, r3, #11
 8004ebc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ec0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ec2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ec6:	049b      	lsls	r3, r3, #18
 8004ec8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ecc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ece:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ed4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	0159      	lsls	r1, r3, #5
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	440b      	add	r3, r1
 8004ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004eec:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004eee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d003      	beq.n	8004efe <USB_HC_Init+0x21a>
 8004ef6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d10f      	bne.n	8004f1e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f1c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3720      	adds	r7, #32
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08c      	sub	sp, #48	; 0x30
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	4613      	mov	r3, r2
 8004f34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	785b      	ldrb	r3, [r3, #1]
 8004f3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f44:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d02d      	beq.n	8004fae <USB_HC_StartXfer+0x86>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	791b      	ldrb	r3, [r3, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d129      	bne.n	8004fae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d117      	bne.n	8004f90 <USB_HC_StartXfer+0x68>
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	79db      	ldrb	r3, [r3, #7]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <USB_HC_StartXfer+0x48>
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	79db      	ldrb	r3, [r3, #7]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d10f      	bne.n	8004f90 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	0151      	lsls	r1, r2, #5
 8004f82:	6a3a      	ldr	r2, [r7, #32]
 8004f84:	440a      	add	r2, r1
 8004f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <USB_HC_StartXfer+0x86>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	795b      	ldrb	r3, [r3, #5]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d107      	bne.n	8004fae <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	785b      	ldrb	r3, [r3, #1]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fa0d 	bl	80053c4 <USB_DoPing>
      return HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e0f8      	b.n	80051a0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d018      	beq.n	8004fe8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	8912      	ldrh	r2, [r2, #8]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	8912      	ldrh	r2, [r2, #8]
 8004fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fca:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004fcc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004fce:	8b7b      	ldrh	r3, [r7, #26]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d90b      	bls.n	8004fec <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004fd4:	8b7b      	ldrh	r3, [r7, #26]
 8004fd6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004fd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	8912      	ldrh	r2, [r2, #8]
 8004fde:	fb03 f202 	mul.w	r2, r3, r2
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	611a      	str	r2, [r3, #16]
 8004fe6:	e001      	b.n	8004fec <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	78db      	ldrb	r3, [r3, #3]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ff4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	8912      	ldrh	r2, [r2, #8]
 8004ffa:	fb03 f202 	mul.w	r2, r3, r2
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	611a      	str	r2, [r3, #16]
 8005002:	e003      	b.n	800500c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	695a      	ldr	r2, [r3, #20]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005014:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005016:	04d9      	lsls	r1, r3, #19
 8005018:	4b63      	ldr	r3, [pc, #396]	; (80051a8 <USB_HC_StartXfer+0x280>)
 800501a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800501c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	7a9b      	ldrb	r3, [r3, #10]
 8005022:	075b      	lsls	r3, r3, #29
 8005024:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005028:	69f9      	ldr	r1, [r7, #28]
 800502a:	0148      	lsls	r0, r1, #5
 800502c:	6a39      	ldr	r1, [r7, #32]
 800502e:	4401      	add	r1, r0
 8005030:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005034:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005036:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	68d9      	ldr	r1, [r3, #12]
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	4413      	add	r3, r2
 800504a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800504e:	460a      	mov	r2, r1
 8005050:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	bf0c      	ite	eq
 8005062:	2301      	moveq	r3, #1
 8005064:	2300      	movne	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	4413      	add	r3, r2
 8005072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	0151      	lsls	r1, r2, #5
 800507c:	6a3a      	ldr	r2, [r7, #32]
 800507e:	440a      	add	r2, r1
 8005080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005084:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005088:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	7e7b      	ldrb	r3, [r7, #25]
 800509a:	075b      	lsls	r3, r3, #29
 800509c:	69f9      	ldr	r1, [r7, #28]
 800509e:	0148      	lsls	r0, r1, #5
 80050a0:	6a39      	ldr	r1, [r7, #32]
 80050a2:	4401      	add	r1, r0
 80050a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80050a8:	4313      	orrs	r3, r2
 80050aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050c2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	78db      	ldrb	r3, [r3, #3]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d004      	beq.n	80050d6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	e003      	b.n	80050de <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050dc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050e4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f2:	461a      	mov	r2, r3
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e04e      	b.n	80051a0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	78db      	ldrb	r3, [r3, #3]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d149      	bne.n	800519e <USB_HC_StartXfer+0x276>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d045      	beq.n	800519e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	79db      	ldrb	r3, [r3, #7]
 8005116:	2b03      	cmp	r3, #3
 8005118:	d830      	bhi.n	800517c <USB_HC_StartXfer+0x254>
 800511a:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <USB_HC_StartXfer+0x1f8>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	08005131 	.word	0x08005131
 8005124:	08005155 	.word	0x08005155
 8005128:	08005131 	.word	0x08005131
 800512c:	08005155 	.word	0x08005155
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	3303      	adds	r3, #3
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800513a:	8afa      	ldrh	r2, [r7, #22]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	b29b      	uxth	r3, r3
 8005142:	429a      	cmp	r2, r3
 8005144:	d91c      	bls.n	8005180 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f043 0220 	orr.w	r2, r3, #32
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	619a      	str	r2, [r3, #24]
        }
        break;
 8005152:	e015      	b.n	8005180 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	3303      	adds	r3, #3
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800515e:	8afa      	ldrh	r2, [r7, #22]
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	b29b      	uxth	r3, r3
 800516a:	429a      	cmp	r2, r3
 800516c:	d90a      	bls.n	8005184 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	619a      	str	r2, [r3, #24]
        }
        break;
 800517a:	e003      	b.n	8005184 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800517c:	bf00      	nop
 800517e:	e002      	b.n	8005186 <USB_HC_StartXfer+0x25e>
        break;
 8005180:	bf00      	nop
 8005182:	e000      	b.n	8005186 <USB_HC_StartXfer+0x25e>
        break;
 8005184:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	68d9      	ldr	r1, [r3, #12]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	785a      	ldrb	r2, [r3, #1]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	b29b      	uxth	r3, r3
 8005194:	2000      	movs	r0, #0
 8005196:	9000      	str	r0, [sp, #0]
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f7ff fb65 	bl	8004868 <USB_WritePacket>
  }

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3728      	adds	r7, #40	; 0x28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	1ff80000 	.word	0x1ff80000

080051ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	b29b      	uxth	r3, r3
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b089      	sub	sp, #36	; 0x24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	0c9b      	lsrs	r3, r3, #18
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	0fdb      	lsrs	r3, r3, #31
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b20      	cmp	r3, #32
 800521a:	d104      	bne.n	8005226 <USB_HC_Halt+0x5a>
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	e0c8      	b.n	80053b8 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <USB_HC_Halt+0x66>
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d163      	bne.n	80052fa <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	440a      	add	r2, r1
 8005248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800524c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005250:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	f040 80ab 	bne.w	80053b6 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d133      	bne.n	80052d4 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	0151      	lsls	r1, r2, #5
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	440a      	add	r2, r1
 8005282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005286:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800528a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	0151      	lsls	r1, r2, #5
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	440a      	add	r2, r1
 80052a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052aa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052b8:	d81d      	bhi.n	80052f6 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d0:	d0ec      	beq.n	80052ac <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052d2:	e070      	b.n	80053b6 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052f2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052f4:	e05f      	b.n	80053b6 <USB_HC_Halt+0x1ea>
            break;
 80052f6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052f8:	e05d      	b.n	80053b6 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4413      	add	r3, r2
 8005302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	440a      	add	r2, r1
 8005310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005318:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d133      	bne.n	8005392 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	440a      	add	r2, r1
 8005340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005348:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	440a      	add	r2, r1
 8005360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005368:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3301      	adds	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005376:	d81d      	bhi.n	80053b4 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800538a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800538e:	d0ec      	beq.n	800536a <USB_HC_Halt+0x19e>
 8005390:	e011      	b.n	80053b6 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	e000      	b.n	80053b6 <USB_HC_Halt+0x1ea>
          break;
 80053b4:	bf00      	nop
    }
  }

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3724      	adds	r7, #36	; 0x24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
	...

080053c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80053d8:	2301      	movs	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	04da      	lsls	r2, r3, #19
 80053e0:	4b14      	ldr	r3, [pc, #80]	; (8005434 <USB_DoPing+0x70>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800540c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005414:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4413      	add	r3, r2
 800541e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005422:	461a      	mov	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr
 8005434:	1ff80000 	.word	0x1ff80000

08005438 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff f94b 	bl	80046e8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005452:	2110      	movs	r1, #16
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff f9a3 	bl	80047a0 <USB_FlushTxFifo>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff f9cf 	bl	8004808 <USB_FlushRxFifo>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005474:	2300      	movs	r3, #0
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	e01f      	b.n	80054ba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005490:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005498:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ae:	461a      	mov	r2, r3
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	3301      	adds	r3, #1
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	2b0f      	cmp	r3, #15
 80054be:	d9dc      	bls.n	800547a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80054c0:	2300      	movs	r3, #0
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	e034      	b.n	8005530 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fa:	461a      	mov	r2, r3
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3301      	adds	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800550c:	d80c      	bhi.n	8005528 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	4413      	add	r3, r2
 8005516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005524:	d0ec      	beq.n	8005500 <USB_StopHost+0xc8>
 8005526:	e000      	b.n	800552a <USB_StopHost+0xf2>
        break;
 8005528:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	3301      	adds	r3, #1
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b0f      	cmp	r3, #15
 8005534:	d9c7      	bls.n	80054c6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800553c:	461a      	mov	r2, r3
 800553e:	f04f 33ff 	mov.w	r3, #4294967295
 8005542:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f04f 32ff 	mov.w	r2, #4294967295
 800554a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff f8bb 	bl	80046c8 <USB_EnableGlobalInt>

  return ret;
 8005552:	7ffb      	ldrb	r3, [r7, #31]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3720      	adds	r7, #32
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800555c:	b590      	push	{r4, r7, lr}
 800555e:	b089      	sub	sp, #36	; 0x24
 8005560:	af04      	add	r7, sp, #16
 8005562:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005564:	2301      	movs	r3, #1
 8005566:	2202      	movs	r2, #2
 8005568:	2102      	movs	r1, #2
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fc5f 	bl	8005e2e <USBH_FindInterface>
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	2bff      	cmp	r3, #255	; 0xff
 8005578:	d002      	beq.n	8005580 <USBH_CDC_InterfaceInit+0x24>
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d901      	bls.n	8005584 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005580:	2302      	movs	r3, #2
 8005582:	e13d      	b.n	8005800 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fc35 	bl	8005df8 <USBH_SelectInterface>
 800558e:	4603      	mov	r3, r0
 8005590:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005592:	7bbb      	ldrb	r3, [r7, #14]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005598:	2302      	movs	r3, #2
 800559a:	e131      	b.n	8005800 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80055a2:	2050      	movs	r0, #80	; 0x50
 80055a4:	f001 fb02 	bl	8006bac <malloc>
 80055a8:	4603      	mov	r3, r0
 80055aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80055bc:	2302      	movs	r3, #2
 80055be:	e11f      	b.n	8005800 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80055c0:	2250      	movs	r2, #80	; 0x50
 80055c2:	2100      	movs	r1, #0
 80055c4:	68b8      	ldr	r0, [r7, #8]
 80055c6:	f001 fb01 	bl	8006bcc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	211a      	movs	r1, #26
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	4413      	add	r3, r2
 80055d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	b25b      	sxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	da15      	bge.n	800560e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	211a      	movs	r1, #26
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	4413      	add	r3, r2
 80055ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055f2:	781a      	ldrb	r2, [r3, #0]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	211a      	movs	r1, #26
 80055fe:	fb01 f303 	mul.w	r3, r1, r3
 8005602:	4413      	add	r3, r2
 8005604:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005608:	881a      	ldrh	r2, [r3, #0]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	785b      	ldrb	r3, [r3, #1]
 8005612:	4619      	mov	r1, r3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 ff90 	bl	800653a <USBH_AllocPipe>
 800561a:	4603      	mov	r3, r0
 800561c:	461a      	mov	r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	7819      	ldrb	r1, [r3, #0]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	7858      	ldrb	r0, [r3, #1]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	8952      	ldrh	r2, [r2, #10]
 800563a:	9202      	str	r2, [sp, #8]
 800563c:	2203      	movs	r2, #3
 800563e:	9201      	str	r2, [sp, #4]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	4623      	mov	r3, r4
 8005644:	4602      	mov	r2, r0
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 ff48 	bl	80064dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2200      	movs	r2, #0
 8005652:	4619      	mov	r1, r3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 fa07 	bl	8006a68 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800565a:	2300      	movs	r3, #0
 800565c:	2200      	movs	r2, #0
 800565e:	210a      	movs	r1, #10
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fbe4 	bl	8005e2e <USBH_FindInterface>
 8005666:	4603      	mov	r3, r0
 8005668:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	2bff      	cmp	r3, #255	; 0xff
 800566e:	d002      	beq.n	8005676 <USBH_CDC_InterfaceInit+0x11a>
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d901      	bls.n	800567a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005676:	2302      	movs	r3, #2
 8005678:	e0c2      	b.n	8005800 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	211a      	movs	r1, #26
 8005680:	fb01 f303 	mul.w	r3, r1, r3
 8005684:	4413      	add	r3, r2
 8005686:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	b25b      	sxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	da16      	bge.n	80056c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	211a      	movs	r1, #26
 8005698:	fb01 f303 	mul.w	r3, r1, r3
 800569c:	4413      	add	r3, r2
 800569e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	211a      	movs	r1, #26
 80056ae:	fb01 f303 	mul.w	r3, r1, r3
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056b8:	881a      	ldrh	r2, [r3, #0]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	835a      	strh	r2, [r3, #26]
 80056be:	e015      	b.n	80056ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	211a      	movs	r1, #26
 80056c6:	fb01 f303 	mul.w	r3, r1, r3
 80056ca:	4413      	add	r3, r2
 80056cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	211a      	movs	r1, #26
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056e6:	881a      	ldrh	r2, [r3, #0]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	211a      	movs	r1, #26
 80056f2:	fb01 f303 	mul.w	r3, r1, r3
 80056f6:	4413      	add	r3, r2
 80056f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	b25b      	sxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	da16      	bge.n	8005732 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005704:	7bfb      	ldrb	r3, [r7, #15]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	211a      	movs	r1, #26
 800570a:	fb01 f303 	mul.w	r3, r1, r3
 800570e:	4413      	add	r3, r2
 8005710:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005714:	781a      	ldrb	r2, [r3, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800571a:	7bfb      	ldrb	r3, [r7, #15]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	211a      	movs	r1, #26
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	4413      	add	r3, r2
 8005726:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800572a:	881a      	ldrh	r2, [r3, #0]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	835a      	strh	r2, [r3, #26]
 8005730:	e015      	b.n	800575e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	211a      	movs	r1, #26
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	4413      	add	r3, r2
 800573e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005742:	781a      	ldrb	r2, [r3, #0]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	211a      	movs	r1, #26
 800574e:	fb01 f303 	mul.w	r3, r1, r3
 8005752:	4413      	add	r3, r2
 8005754:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005758:	881a      	ldrh	r2, [r3, #0]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	7b9b      	ldrb	r3, [r3, #14]
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fee8 	bl	800653a <USBH_AllocPipe>
 800576a:	4603      	mov	r3, r0
 800576c:	461a      	mov	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	7bdb      	ldrb	r3, [r3, #15]
 8005776:	4619      	mov	r1, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fede 	bl	800653a <USBH_AllocPipe>
 800577e:	4603      	mov	r3, r0
 8005780:	461a      	mov	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	7b59      	ldrb	r1, [r3, #13]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	7b98      	ldrb	r0, [r3, #14]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	8b12      	ldrh	r2, [r2, #24]
 800579e:	9202      	str	r2, [sp, #8]
 80057a0:	2202      	movs	r2, #2
 80057a2:	9201      	str	r2, [sp, #4]
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	4623      	mov	r3, r4
 80057a8:	4602      	mov	r2, r0
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fe96 	bl	80064dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	7b19      	ldrb	r1, [r3, #12]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	7bd8      	ldrb	r0, [r3, #15]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	8b52      	ldrh	r2, [r2, #26]
 80057c8:	9202      	str	r2, [sp, #8]
 80057ca:	2202      	movs	r2, #2
 80057cc:	9201      	str	r2, [sp, #4]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	4623      	mov	r3, r4
 80057d2:	4602      	mov	r2, r0
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fe81 	bl	80064dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	7b5b      	ldrb	r3, [r3, #13]
 80057e6:	2200      	movs	r2, #0
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 f93c 	bl	8006a68 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	7b1b      	ldrb	r3, [r3, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f001 f935 	bl	8006a68 <USBH_LL_SetToggle>

  return USBH_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	bd90      	pop	{r4, r7, pc}

08005808 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00e      	beq.n	8005840 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fe76 	bl	800651a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fea1 	bl	800657c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	7b1b      	ldrb	r3, [r3, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00e      	beq.n	8005866 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	7b1b      	ldrb	r3, [r3, #12]
 800584c:	4619      	mov	r1, r3
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fe63 	bl	800651a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	7b1b      	ldrb	r3, [r3, #12]
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fe8e 	bl	800657c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	7b5b      	ldrb	r3, [r3, #13]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00e      	beq.n	800588c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	7b5b      	ldrb	r3, [r3, #13]
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fe50 	bl	800651a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	7b5b      	ldrb	r3, [r3, #13]
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fe7b 	bl	800657c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00b      	beq.n	80058b0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 f98b 	bl	8006bbc <free>
    phost->pActiveClass->pData = 0U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058ac:	2200      	movs	r2, #0
 80058ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3340      	adds	r3, #64	; 0x40
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f8b0 	bl	8005a38 <GetLineCoding>
 80058d8:	4603      	mov	r3, r0
 80058da:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80058dc:	7afb      	ldrb	r3, [r7, #11]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d105      	bne.n	80058ee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80058e8:	2102      	movs	r1, #2
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80058ee:	7afb      	ldrb	r3, [r7, #11]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005918:	2b04      	cmp	r3, #4
 800591a:	d877      	bhi.n	8005a0c <USBH_CDC_Process+0x114>
 800591c:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <USBH_CDC_Process+0x2c>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005939 	.word	0x08005939
 8005928:	0800593f 	.word	0x0800593f
 800592c:	0800596f 	.word	0x0800596f
 8005930:	080059e3 	.word	0x080059e3
 8005934:	080059f1 	.word	0x080059f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	73fb      	strb	r3, [r7, #15]
      break;
 800593c:	e06d      	b.n	8005a1a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f896 	bl	8005a76 <SetLineCoding>
 800594a:	4603      	mov	r3, r0
 800594c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800594e:	7bbb      	ldrb	r3, [r7, #14]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d104      	bne.n	800595e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800595c:	e058      	b.n	8005a10 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800595e:	7bbb      	ldrb	r3, [r7, #14]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d055      	beq.n	8005a10 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2204      	movs	r2, #4
 8005968:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800596c:	e050      	b.n	8005a10 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	3340      	adds	r3, #64	; 0x40
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f85f 	bl	8005a38 <GetLineCoding>
 800597a:	4603      	mov	r3, r0
 800597c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800597e:	7bbb      	ldrb	r3, [r7, #14]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d126      	bne.n	80059d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005996:	791b      	ldrb	r3, [r3, #4]
 8005998:	429a      	cmp	r2, r3
 800599a:	d13b      	bne.n	8005a14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d133      	bne.n	8005a14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d12b      	bne.n	8005a14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d124      	bne.n	8005a14 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f955 	bl	8005c7a <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80059d0:	e020      	b.n	8005a14 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80059d2:	7bbb      	ldrb	r3, [r7, #14]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d01d      	beq.n	8005a14 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2204      	movs	r2, #4
 80059dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80059e0:	e018      	b.n	8005a14 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f866 	bl	8005ab4 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f8d9 	bl	8005ba0 <CDC_ProcessReception>
      break;
 80059ee:	e014      	b.n	8005a1a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80059f0:	2100      	movs	r1, #0
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fafc 	bl	8005ff0 <USBH_ClrFeature>
 80059f8:	4603      	mov	r3, r0
 80059fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059fc:	7bbb      	ldrb	r3, [r7, #14]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005a0a:	e005      	b.n	8005a18 <USBH_CDC_Process+0x120>

    default:
      break;
 8005a0c:	bf00      	nop
 8005a0e:	e004      	b.n	8005a1a <USBH_CDC_Process+0x122>
      break;
 8005a10:	bf00      	nop
 8005a12:	e002      	b.n	8005a1a <USBH_CDC_Process+0x122>
      break;
 8005a14:	bf00      	nop
 8005a16:	e000      	b.n	8005a1a <USBH_CDC_Process+0x122>
      break;
 8005a18:	bf00      	nop

  }

  return status;
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	22a1      	movs	r2, #161	; 0xa1
 8005a46:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2221      	movs	r2, #33	; 0x21
 8005a4c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2207      	movs	r2, #7
 8005a5e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2207      	movs	r2, #7
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fae6 	bl	8006038 <USBH_CtlReq>
 8005a6c:	4603      	mov	r3, r0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2221      	movs	r2, #33	; 0x21
 8005a84:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2207      	movs	r2, #7
 8005a9c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fac7 	bl	8006038 <USBH_CtlReq>
 8005aaa:	4603      	mov	r3, r0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d002      	beq.n	8005ada <CDC_ProcessTransmission+0x26>
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d023      	beq.n	8005b20 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005ad8:	e05e      	b.n	8005b98 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	8b12      	ldrh	r2, [r2, #24]
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d90b      	bls.n	8005afe <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	69d9      	ldr	r1, [r3, #28]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8b1a      	ldrh	r2, [r3, #24]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	7b5b      	ldrb	r3, [r3, #13]
 8005af2:	2001      	movs	r0, #1
 8005af4:	9000      	str	r0, [sp, #0]
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fcad 	bl	8006456 <USBH_BulkSendData>
 8005afc:	e00b      	b.n	8005b16 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	7b5b      	ldrb	r3, [r3, #13]
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	9000      	str	r0, [sp, #0]
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fca0 	bl	8006456 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b1e:	e03b      	b.n	8005b98 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	7b5b      	ldrb	r3, [r3, #13]
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 ff74 	bl	8006a14 <USBH_LL_GetURBState>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005b30:	7afb      	ldrb	r3, [r7, #11]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d128      	bne.n	8005b88 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	8b12      	ldrh	r2, [r2, #24]
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d90e      	bls.n	8005b60 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	8b12      	ldrh	r2, [r2, #24]
 8005b4a:	1a9a      	subs	r2, r3, r2
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	8b12      	ldrh	r2, [r2, #24]
 8005b58:	441a      	add	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	61da      	str	r2, [r3, #28]
 8005b5e:	e002      	b.n	8005b66 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b76:	e00e      	b.n	8005b96 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f868 	bl	8005c56 <USBH_CDC_TransmitCallback>
      break;
 8005b86:	e006      	b.n	8005b96 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005b88:	7afb      	ldrb	r3, [r7, #11]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d103      	bne.n	8005b96 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b96:	bf00      	nop
  }
}
 8005b98:	bf00      	nop
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d002      	beq.n	8005bc6 <CDC_ProcessReception+0x26>
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d00e      	beq.n	8005be2 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005bc4:	e043      	b.n	8005c4e <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	6a19      	ldr	r1, [r3, #32]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	8b5a      	ldrh	r2, [r3, #26]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	7b1b      	ldrb	r3, [r3, #12]
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fc64 	bl	80064a0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2204      	movs	r2, #4
 8005bdc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005be0:	e035      	b.n	8005c4e <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	7b1b      	ldrb	r3, [r3, #12]
 8005be6:	4619      	mov	r1, r3
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 ff13 	bl	8006a14 <USBH_LL_GetURBState>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005bf2:	7cfb      	ldrb	r3, [r7, #19]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d129      	bne.n	8005c4c <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	7b1b      	ldrb	r3, [r3, #12]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fe76 	bl	80068f0 <USBH_LL_GetLastXferSize>
 8005c04:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d016      	beq.n	8005c3e <CDC_ProcessReception+0x9e>
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	8b5b      	ldrh	r3, [r3, #26]
 8005c14:	461a      	mov	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d910      	bls.n	8005c3e <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1ad2      	subs	r2, r2, r3
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	6a1a      	ldr	r2, [r3, #32]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	441a      	add	r2, r3
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2203      	movs	r2, #3
 8005c38:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c3c:	e006      	b.n	8005c4c <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f80e 	bl	8005c68 <USBH_CDC_ReceiveCallback>
      break;
 8005c4c:	bf00      	nop
  }
}
 8005c4e:	bf00      	nop
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr

08005c68 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr

08005c7a <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4613      	mov	r3, r2
 8005c98:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e029      	b.n	8005cf8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	79fa      	ldrb	r2, [r7, #7]
 8005ca8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 f81f 	bl	8005d00 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fd8b 	bl	800680c <USBH_LL_Init>

  return USBH_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	e009      	b.n	8005d26 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	33e0      	adds	r3, #224	; 0xe0
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b0f      	cmp	r3, #15
 8005d2a:	d9f2      	bls.n	8005d12 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e009      	b.n	8005d46 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	3301      	adds	r3, #1
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4c:	d3f1      	bcc.n	8005d32 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2240      	movs	r2, #64	; 0x40
 8005d72:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr

08005da6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b085      	sub	sp, #20
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d016      	beq.n	8005de8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10e      	bne.n	8005de2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005dca:	1c59      	adds	r1, r3, #1
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	33de      	adds	r3, #222	; 0xde
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	73fb      	strb	r3, [r7, #15]
 8005de0:	e004      	b.n	8005dec <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005de2:	2302      	movs	r3, #2
 8005de4:	73fb      	strb	r3, [r7, #15]
 8005de6:	e001      	b.n	8005dec <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005de8:	2302      	movs	r3, #2
 8005dea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr

08005df8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005e0e:	78fa      	ldrb	r2, [r7, #3]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d204      	bcs.n	8005e1e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	78fa      	ldrb	r2, [r7, #3]
 8005e18:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005e1c:	e001      	b.n	8005e22 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005e1e:	2302      	movs	r3, #2
 8005e20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bc80      	pop	{r7}
 8005e2c:	4770      	bx	lr

08005e2e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b087      	sub	sp, #28
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	4608      	mov	r0, r1
 8005e38:	4611      	mov	r1, r2
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	70fb      	strb	r3, [r7, #3]
 8005e40:	460b      	mov	r3, r1
 8005e42:	70bb      	strb	r3, [r7, #2]
 8005e44:	4613      	mov	r3, r2
 8005e46:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005e56:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e58:	e025      	b.n	8005ea6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	221a      	movs	r2, #26
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
 8005e62:	3308      	adds	r3, #8
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	3302      	adds	r3, #2
 8005e6a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	795b      	ldrb	r3, [r3, #5]
 8005e70:	78fa      	ldrb	r2, [r7, #3]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d002      	beq.n	8005e7c <USBH_FindInterface+0x4e>
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	2bff      	cmp	r3, #255	; 0xff
 8005e7a:	d111      	bne.n	8005ea0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e80:	78ba      	ldrb	r2, [r7, #2]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d002      	beq.n	8005e8c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e86:	78bb      	ldrb	r3, [r7, #2]
 8005e88:	2bff      	cmp	r3, #255	; 0xff
 8005e8a:	d109      	bne.n	8005ea0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e90:	787a      	ldrb	r2, [r7, #1]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d002      	beq.n	8005e9c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e96:	787b      	ldrb	r3, [r7, #1]
 8005e98:	2bff      	cmp	r3, #255	; 0xff
 8005e9a:	d101      	bne.n	8005ea0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
 8005e9e:	e006      	b.n	8005eae <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d9d6      	bls.n	8005e5a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005eac:	23ff      	movs	r3, #255	; 0xff
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr

08005eb8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fcdf 	bl	8006884 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fdb6 	bl	8006a3a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr

08005ef4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f804 	bl	8005f18 <USBH_HandleSof>
}
 8005f10:	bf00      	nop
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b0b      	cmp	r3, #11
 8005f28:	d10a      	bne.n	8005f40 <USBH_HandleSof+0x28>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
  }
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005f58:	bf00      	nop
}
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr

08005f62 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005f72:	bf00      	nop
}
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr

08005f7c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr

08005fa8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fc76 	bl	80068ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	791b      	ldrb	r3, [r3, #4]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fad1 	bl	800657c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	795b      	ldrb	r3, [r3, #5]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 facb 	bl	800657c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	789b      	ldrb	r3, [r3, #2]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d10f      	bne.n	8006024 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	b29a      	uxth	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006024:	2200      	movs	r2, #0
 8006026:	2100      	movs	r1, #0
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f805 	bl	8006038 <USBH_CtlReq>
 800602e:	4603      	mov	r3, r0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	4613      	mov	r3, r2
 8006044:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006046:	2301      	movs	r3, #1
 8006048:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	789b      	ldrb	r3, [r3, #2]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d002      	beq.n	8006058 <USBH_CtlReq+0x20>
 8006052:	2b02      	cmp	r3, #2
 8006054:	d00f      	beq.n	8006076 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006056:	e027      	b.n	80060a8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	88fa      	ldrh	r2, [r7, #6]
 8006062:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2202      	movs	r2, #2
 800606e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006070:	2301      	movs	r3, #1
 8006072:	75fb      	strb	r3, [r7, #23]
      break;
 8006074:	e018      	b.n	80060a8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f81c 	bl	80060b4 <USBH_HandleControl>
 800607c:	4603      	mov	r3, r0
 800607e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006080:	7dfb      	ldrb	r3, [r7, #23]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <USBH_CtlReq+0x54>
 8006086:	7dfb      	ldrb	r3, [r7, #23]
 8006088:	2b03      	cmp	r3, #3
 800608a:	d106      	bne.n	800609a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	761a      	strb	r2, [r3, #24]
      break;
 8006098:	e005      	b.n	80060a6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d102      	bne.n	80060a6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	709a      	strb	r2, [r3, #2]
      break;
 80060a6:	bf00      	nop
  }
  return status;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80060bc:	2301      	movs	r3, #1
 80060be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80060c0:	2300      	movs	r3, #0
 80060c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	7e1b      	ldrb	r3, [r3, #24]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	2b0a      	cmp	r3, #10
 80060cc:	f200 8156 	bhi.w	800637c <USBH_HandleControl+0x2c8>
 80060d0:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <USBH_HandleControl+0x24>)
 80060d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d6:	bf00      	nop
 80060d8:	08006105 	.word	0x08006105
 80060dc:	0800611f 	.word	0x0800611f
 80060e0:	08006189 	.word	0x08006189
 80060e4:	080061af 	.word	0x080061af
 80060e8:	080061e7 	.word	0x080061e7
 80060ec:	08006211 	.word	0x08006211
 80060f0:	08006263 	.word	0x08006263
 80060f4:	08006285 	.word	0x08006285
 80060f8:	080062c1 	.word	0x080062c1
 80060fc:	080062e7 	.word	0x080062e7
 8006100:	08006325 	.word	0x08006325
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f103 0110 	add.w	r1, r3, #16
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	795b      	ldrb	r3, [r3, #5]
 800610e:	461a      	mov	r2, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f943 	bl	800639c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2202      	movs	r2, #2
 800611a:	761a      	strb	r2, [r3, #24]
      break;
 800611c:	e139      	b.n	8006392 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	795b      	ldrb	r3, [r3, #5]
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fc75 	bl	8006a14 <USBH_LL_GetURBState>
 800612a:	4603      	mov	r3, r0
 800612c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d11e      	bne.n	8006172 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	7c1b      	ldrb	r3, [r3, #16]
 8006138:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800613c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8adb      	ldrh	r3, [r3, #22]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006146:	7b7b      	ldrb	r3, [r7, #13]
 8006148:	2b80      	cmp	r3, #128	; 0x80
 800614a:	d103      	bne.n	8006154 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2203      	movs	r2, #3
 8006150:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006152:	e115      	b.n	8006380 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2205      	movs	r2, #5
 8006158:	761a      	strb	r2, [r3, #24]
      break;
 800615a:	e111      	b.n	8006380 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800615c:	7b7b      	ldrb	r3, [r7, #13]
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d103      	bne.n	800616a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2209      	movs	r2, #9
 8006166:	761a      	strb	r2, [r3, #24]
      break;
 8006168:	e10a      	b.n	8006380 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2207      	movs	r2, #7
 800616e:	761a      	strb	r2, [r3, #24]
      break;
 8006170:	e106      	b.n	8006380 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006172:	7bbb      	ldrb	r3, [r7, #14]
 8006174:	2b04      	cmp	r3, #4
 8006176:	d003      	beq.n	8006180 <USBH_HandleControl+0xcc>
 8006178:	7bbb      	ldrb	r3, [r7, #14]
 800617a:	2b02      	cmp	r3, #2
 800617c:	f040 8100 	bne.w	8006380 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	220b      	movs	r2, #11
 8006184:	761a      	strb	r2, [r3, #24]
      break;
 8006186:	e0fb      	b.n	8006380 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800618e:	b29a      	uxth	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6899      	ldr	r1, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	899a      	ldrh	r2, [r3, #12]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	791b      	ldrb	r3, [r3, #4]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f93a 	bl	800641a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2204      	movs	r2, #4
 80061aa:	761a      	strb	r2, [r3, #24]
      break;
 80061ac:	e0f1      	b.n	8006392 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	791b      	ldrb	r3, [r3, #4]
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fc2d 	bl	8006a14 <USBH_LL_GetURBState>
 80061ba:	4603      	mov	r3, r0
 80061bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d102      	bne.n	80061ca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2209      	movs	r2, #9
 80061c8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	2b05      	cmp	r3, #5
 80061ce:	d102      	bne.n	80061d6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80061d0:	2303      	movs	r3, #3
 80061d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80061d4:	e0d6      	b.n	8006384 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80061d6:	7bbb      	ldrb	r3, [r7, #14]
 80061d8:	2b04      	cmp	r3, #4
 80061da:	f040 80d3 	bne.w	8006384 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	220b      	movs	r2, #11
 80061e2:	761a      	strb	r2, [r3, #24]
      break;
 80061e4:	e0ce      	b.n	8006384 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6899      	ldr	r1, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	899a      	ldrh	r2, [r3, #12]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	795b      	ldrb	r3, [r3, #5]
 80061f2:	2001      	movs	r0, #1
 80061f4:	9000      	str	r0, [sp, #0]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f8ea 	bl	80063d0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006202:	b29a      	uxth	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2206      	movs	r2, #6
 800620c:	761a      	strb	r2, [r3, #24]
      break;
 800620e:	e0c0      	b.n	8006392 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	795b      	ldrb	r3, [r3, #5]
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fbfc 	bl	8006a14 <USBH_LL_GetURBState>
 800621c:	4603      	mov	r3, r0
 800621e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006220:	7bbb      	ldrb	r3, [r7, #14]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d103      	bne.n	800622e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2207      	movs	r2, #7
 800622a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800622c:	e0ac      	b.n	8006388 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	2b05      	cmp	r3, #5
 8006232:	d105      	bne.n	8006240 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	220c      	movs	r2, #12
 8006238:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800623a:	2303      	movs	r3, #3
 800623c:	73fb      	strb	r3, [r7, #15]
      break;
 800623e:	e0a3      	b.n	8006388 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006240:	7bbb      	ldrb	r3, [r7, #14]
 8006242:	2b02      	cmp	r3, #2
 8006244:	d103      	bne.n	800624e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2205      	movs	r2, #5
 800624a:	761a      	strb	r2, [r3, #24]
      break;
 800624c:	e09c      	b.n	8006388 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800624e:	7bbb      	ldrb	r3, [r7, #14]
 8006250:	2b04      	cmp	r3, #4
 8006252:	f040 8099 	bne.w	8006388 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	220b      	movs	r2, #11
 800625a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800625c:	2302      	movs	r3, #2
 800625e:	73fb      	strb	r3, [r7, #15]
      break;
 8006260:	e092      	b.n	8006388 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	791b      	ldrb	r3, [r3, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	2100      	movs	r1, #0
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f8d5 	bl	800641a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006276:	b29a      	uxth	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2208      	movs	r2, #8
 8006280:	761a      	strb	r2, [r3, #24]

      break;
 8006282:	e086      	b.n	8006392 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	791b      	ldrb	r3, [r3, #4]
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fbc2 	bl	8006a14 <USBH_LL_GetURBState>
 8006290:	4603      	mov	r3, r0
 8006292:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006294:	7bbb      	ldrb	r3, [r7, #14]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d105      	bne.n	80062a6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	220d      	movs	r2, #13
 800629e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80062a4:	e072      	b.n	800638c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d103      	bne.n	80062b4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	220b      	movs	r2, #11
 80062b0:	761a      	strb	r2, [r3, #24]
      break;
 80062b2:	e06b      	b.n	800638c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80062b4:	7bbb      	ldrb	r3, [r7, #14]
 80062b6:	2b05      	cmp	r3, #5
 80062b8:	d168      	bne.n	800638c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80062ba:	2303      	movs	r3, #3
 80062bc:	73fb      	strb	r3, [r7, #15]
      break;
 80062be:	e065      	b.n	800638c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	795b      	ldrb	r3, [r3, #5]
 80062c4:	2201      	movs	r2, #1
 80062c6:	9200      	str	r2, [sp, #0]
 80062c8:	2200      	movs	r2, #0
 80062ca:	2100      	movs	r1, #0
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f87f 	bl	80063d0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80062d8:	b29a      	uxth	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	220a      	movs	r2, #10
 80062e2:	761a      	strb	r2, [r3, #24]
      break;
 80062e4:	e055      	b.n	8006392 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	795b      	ldrb	r3, [r3, #5]
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fb91 	bl	8006a14 <USBH_LL_GetURBState>
 80062f2:	4603      	mov	r3, r0
 80062f4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d105      	bne.n	8006308 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	220d      	movs	r2, #13
 8006304:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006306:	e043      	b.n	8006390 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006308:	7bbb      	ldrb	r3, [r7, #14]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d103      	bne.n	8006316 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2209      	movs	r2, #9
 8006312:	761a      	strb	r2, [r3, #24]
      break;
 8006314:	e03c      	b.n	8006390 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006316:	7bbb      	ldrb	r3, [r7, #14]
 8006318:	2b04      	cmp	r3, #4
 800631a:	d139      	bne.n	8006390 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	220b      	movs	r2, #11
 8006320:	761a      	strb	r2, [r3, #24]
      break;
 8006322:	e035      	b.n	8006390 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	7e5b      	ldrb	r3, [r3, #25]
 8006328:	3301      	adds	r3, #1
 800632a:	b2da      	uxtb	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	765a      	strb	r2, [r3, #25]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	7e5b      	ldrb	r3, [r3, #25]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d806      	bhi.n	8006346 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006344:	e025      	b.n	8006392 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800634c:	2106      	movs	r1, #6
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	795b      	ldrb	r3, [r3, #5]
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f90c 	bl	800657c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	791b      	ldrb	r3, [r3, #4]
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f906 	bl	800657c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006376:	2302      	movs	r3, #2
 8006378:	73fb      	strb	r3, [r7, #15]
      break;
 800637a:	e00a      	b.n	8006392 <USBH_HandleControl+0x2de>

    default:
      break;
 800637c:	bf00      	nop
 800637e:	e008      	b.n	8006392 <USBH_HandleControl+0x2de>
      break;
 8006380:	bf00      	nop
 8006382:	e006      	b.n	8006392 <USBH_HandleControl+0x2de>
      break;
 8006384:	bf00      	nop
 8006386:	e004      	b.n	8006392 <USBH_HandleControl+0x2de>
      break;
 8006388:	bf00      	nop
 800638a:	e002      	b.n	8006392 <USBH_HandleControl+0x2de>
      break;
 800638c:	bf00      	nop
 800638e:	e000      	b.n	8006392 <USBH_HandleControl+0x2de>
      break;
 8006390:	bf00      	nop
  }

  return status;
 8006392:	7bfb      	ldrb	r3, [r7, #15]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af04      	add	r7, sp, #16
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	4613      	mov	r3, r2
 80063a8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80063aa:	79f9      	ldrb	r1, [r7, #7]
 80063ac:	2300      	movs	r3, #0
 80063ae:	9303      	str	r3, [sp, #12]
 80063b0:	2308      	movs	r3, #8
 80063b2:	9302      	str	r3, [sp, #8]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	9301      	str	r3, [sp, #4]
 80063b8:	2300      	movs	r3, #0
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	2300      	movs	r3, #0
 80063be:	2200      	movs	r2, #0
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 faf6 	bl	80069b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af04      	add	r7, sp, #16
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	4611      	mov	r1, r2
 80063dc:	461a      	mov	r2, r3
 80063de:	460b      	mov	r3, r1
 80063e0:	80fb      	strh	r3, [r7, #6]
 80063e2:	4613      	mov	r3, r2
 80063e4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80063f4:	7979      	ldrb	r1, [r7, #5]
 80063f6:	7e3b      	ldrb	r3, [r7, #24]
 80063f8:	9303      	str	r3, [sp, #12]
 80063fa:	88fb      	ldrh	r3, [r7, #6]
 80063fc:	9302      	str	r3, [sp, #8]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	2301      	movs	r3, #1
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	2300      	movs	r3, #0
 8006408:	2200      	movs	r2, #0
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 fad1 	bl	80069b2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b088      	sub	sp, #32
 800641e:	af04      	add	r7, sp, #16
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	4611      	mov	r1, r2
 8006426:	461a      	mov	r2, r3
 8006428:	460b      	mov	r3, r1
 800642a:	80fb      	strh	r3, [r7, #6]
 800642c:	4613      	mov	r3, r2
 800642e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006430:	7979      	ldrb	r1, [r7, #5]
 8006432:	2300      	movs	r3, #0
 8006434:	9303      	str	r3, [sp, #12]
 8006436:	88fb      	ldrh	r3, [r7, #6]
 8006438:	9302      	str	r3, [sp, #8]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	2301      	movs	r3, #1
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	2300      	movs	r3, #0
 8006444:	2201      	movs	r2, #1
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fab3 	bl	80069b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800644c:	2300      	movs	r3, #0

}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b088      	sub	sp, #32
 800645a:	af04      	add	r7, sp, #16
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	4611      	mov	r1, r2
 8006462:	461a      	mov	r2, r3
 8006464:	460b      	mov	r3, r1
 8006466:	80fb      	strh	r3, [r7, #6]
 8006468:	4613      	mov	r3, r2
 800646a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800647a:	7979      	ldrb	r1, [r7, #5]
 800647c:	7e3b      	ldrb	r3, [r7, #24]
 800647e:	9303      	str	r3, [sp, #12]
 8006480:	88fb      	ldrh	r3, [r7, #6]
 8006482:	9302      	str	r3, [sp, #8]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	2301      	movs	r3, #1
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	2302      	movs	r3, #2
 800648e:	2200      	movs	r2, #0
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 fa8e 	bl	80069b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b088      	sub	sp, #32
 80064a4:	af04      	add	r7, sp, #16
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	4611      	mov	r1, r2
 80064ac:	461a      	mov	r2, r3
 80064ae:	460b      	mov	r3, r1
 80064b0:	80fb      	strh	r3, [r7, #6]
 80064b2:	4613      	mov	r3, r2
 80064b4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80064b6:	7979      	ldrb	r1, [r7, #5]
 80064b8:	2300      	movs	r3, #0
 80064ba:	9303      	str	r3, [sp, #12]
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	9302      	str	r3, [sp, #8]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	9301      	str	r3, [sp, #4]
 80064c4:	2301      	movs	r3, #1
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	2302      	movs	r3, #2
 80064ca:	2201      	movs	r2, #1
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 fa70 	bl	80069b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af04      	add	r7, sp, #16
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	4608      	mov	r0, r1
 80064e6:	4611      	mov	r1, r2
 80064e8:	461a      	mov	r2, r3
 80064ea:	4603      	mov	r3, r0
 80064ec:	70fb      	strb	r3, [r7, #3]
 80064ee:	460b      	mov	r3, r1
 80064f0:	70bb      	strb	r3, [r7, #2]
 80064f2:	4613      	mov	r3, r2
 80064f4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80064f6:	7878      	ldrb	r0, [r7, #1]
 80064f8:	78ba      	ldrb	r2, [r7, #2]
 80064fa:	78f9      	ldrb	r1, [r7, #3]
 80064fc:	8b3b      	ldrh	r3, [r7, #24]
 80064fe:	9302      	str	r3, [sp, #8]
 8006500:	7d3b      	ldrb	r3, [r7, #20]
 8006502:	9301      	str	r3, [sp, #4]
 8006504:	7c3b      	ldrb	r3, [r7, #16]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	4603      	mov	r3, r0
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fa03 	bl	8006916 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	460b      	mov	r3, r1
 8006524:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fa22 	bl	8006974 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	460b      	mov	r3, r1
 8006544:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f835 	bl	80065b6 <USBH_GetFreePipe>
 800654c:	4603      	mov	r3, r0
 800654e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006550:	89fb      	ldrh	r3, [r7, #14]
 8006552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006556:	4293      	cmp	r3, r2
 8006558:	d00a      	beq.n	8006570 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800655a:	78fa      	ldrb	r2, [r7, #3]
 800655c:	89fb      	ldrh	r3, [r7, #14]
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	33e0      	adds	r3, #224	; 0xe0
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	440b      	add	r3, r1
 800656e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006570:	89fb      	ldrh	r3, [r7, #14]
 8006572:	b2db      	uxtb	r3, r3
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	2b0f      	cmp	r3, #15
 800658c:	d80d      	bhi.n	80065aa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	33e0      	adds	r3, #224	; 0xe0
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	78fb      	ldrb	r3, [r7, #3]
 800659c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	33e0      	adds	r3, #224	; 0xe0
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bc80      	pop	{r7}
 80065b4:	4770      	bx	lr

080065b6 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]
 80065c6:	e00f      	b.n	80065e8 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	33e0      	adds	r3, #224	; 0xe0
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	e007      	b.n	80065f2 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	3301      	adds	r3, #1
 80065e6:	73fb      	strb	r3, [r7, #15]
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	2b0f      	cmp	r3, #15
 80065ec:	d9ec      	bls.n	80065c8 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80065ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr

080065fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006600:	2201      	movs	r2, #1
 8006602:	490e      	ldr	r1, [pc, #56]	; (800663c <MX_USB_HOST_Init+0x40>)
 8006604:	480e      	ldr	r0, [pc, #56]	; (8006640 <MX_USB_HOST_Init+0x44>)
 8006606:	f7ff fb41 	bl	8005c8c <USBH_Init>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006610:	f7fa faa0 	bl	8000b54 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006614:	490b      	ldr	r1, [pc, #44]	; (8006644 <MX_USB_HOST_Init+0x48>)
 8006616:	480a      	ldr	r0, [pc, #40]	; (8006640 <MX_USB_HOST_Init+0x44>)
 8006618:	f7ff fbc5 	bl	8005da6 <USBH_RegisterClass>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006622:	f7fa fa97 	bl	8000b54 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006626:	4806      	ldr	r0, [pc, #24]	; (8006640 <MX_USB_HOST_Init+0x44>)
 8006628:	f7ff fc46 	bl	8005eb8 <USBH_Start>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006632:	f7fa fa8f 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006636:	bf00      	nop
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	08006649 	.word	0x08006649
 8006640:	200001a8 	.word	0x200001a8
 8006644:	2000000c 	.word	0x2000000c

08006648 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	3b01      	subs	r3, #1
 8006658:	2b04      	cmp	r3, #4
 800665a:	d819      	bhi.n	8006690 <USBH_UserProcess+0x48>
 800665c:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <USBH_UserProcess+0x1c>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	08006691 	.word	0x08006691
 8006668:	08006681 	.word	0x08006681
 800666c:	08006691 	.word	0x08006691
 8006670:	08006689 	.word	0x08006689
 8006674:	08006679 	.word	0x08006679
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006678:	4b08      	ldr	r3, [pc, #32]	; (800669c <USBH_UserProcess+0x54>)
 800667a:	2203      	movs	r2, #3
 800667c:	701a      	strb	r2, [r3, #0]
  break;
 800667e:	e008      	b.n	8006692 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006680:	4b06      	ldr	r3, [pc, #24]	; (800669c <USBH_UserProcess+0x54>)
 8006682:	2202      	movs	r2, #2
 8006684:	701a      	strb	r2, [r3, #0]
  break;
 8006686:	e004      	b.n	8006692 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006688:	4b04      	ldr	r3, [pc, #16]	; (800669c <USBH_UserProcess+0x54>)
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]
  break;
 800668e:	e000      	b.n	8006692 <USBH_UserProcess+0x4a>

  default:
  break;
 8006690:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr
 800669c:	20000580 	.word	0x20000580

080066a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08a      	sub	sp, #40	; 0x28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a8:	f107 0314 	add.w	r3, r7, #20
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	605a      	str	r2, [r3, #4]
 80066b2:	609a      	str	r2, [r3, #8]
 80066b4:	60da      	str	r2, [r3, #12]
 80066b6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066c0:	d147      	bne.n	8006752 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066c2:	2300      	movs	r3, #0
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	4b25      	ldr	r3, [pc, #148]	; (800675c <HAL_HCD_MspInit+0xbc>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	4a24      	ldr	r2, [pc, #144]	; (800675c <HAL_HCD_MspInit+0xbc>)
 80066cc:	f043 0301 	orr.w	r3, r3, #1
 80066d0:	6313      	str	r3, [r2, #48]	; 0x30
 80066d2:	4b22      	ldr	r3, [pc, #136]	; (800675c <HAL_HCD_MspInit+0xbc>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	613b      	str	r3, [r7, #16]
 80066dc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80066de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e8:	2300      	movs	r3, #0
 80066ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80066ec:	f107 0314 	add.w	r3, r7, #20
 80066f0:	4619      	mov	r1, r3
 80066f2:	481b      	ldr	r0, [pc, #108]	; (8006760 <HAL_HCD_MspInit+0xc0>)
 80066f4:	f7fa fda4 	bl	8001240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80066f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80066fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066fe:	2302      	movs	r3, #2
 8006700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006702:	2300      	movs	r3, #0
 8006704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006706:	2300      	movs	r3, #0
 8006708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800670a:	230a      	movs	r3, #10
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800670e:	f107 0314 	add.w	r3, r7, #20
 8006712:	4619      	mov	r1, r3
 8006714:	4812      	ldr	r0, [pc, #72]	; (8006760 <HAL_HCD_MspInit+0xc0>)
 8006716:	f7fa fd93 	bl	8001240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800671a:	4b10      	ldr	r3, [pc, #64]	; (800675c <HAL_HCD_MspInit+0xbc>)
 800671c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671e:	4a0f      	ldr	r2, [pc, #60]	; (800675c <HAL_HCD_MspInit+0xbc>)
 8006720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006724:	6353      	str	r3, [r2, #52]	; 0x34
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	4b0c      	ldr	r3, [pc, #48]	; (800675c <HAL_HCD_MspInit+0xbc>)
 800672c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672e:	4a0b      	ldr	r2, [pc, #44]	; (800675c <HAL_HCD_MspInit+0xbc>)
 8006730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006734:	6453      	str	r3, [r2, #68]	; 0x44
 8006736:	4b09      	ldr	r3, [pc, #36]	; (800675c <HAL_HCD_MspInit+0xbc>)
 8006738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006742:	2200      	movs	r2, #0
 8006744:	2100      	movs	r1, #0
 8006746:	2043      	movs	r0, #67	; 0x43
 8006748:	f7fa fd43 	bl	80011d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800674c:	2043      	movs	r0, #67	; 0x43
 800674e:	f7fa fd5c 	bl	800120a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006752:	bf00      	nop
 8006754:	3728      	adds	r7, #40	; 0x28
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40023800 	.word	0x40023800
 8006760:	40020000 	.word	0x40020000

08006764 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006772:	4618      	mov	r0, r3
 8006774:	f7ff fbbe 	bl	8005ef4 <USBH_LL_IncTimer>
}
 8006778:	bf00      	nop
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800678e:	4618      	mov	r0, r3
 8006790:	f7ff fbf4 	bl	8005f7c <USBH_LL_Connect>
}
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff fbfc 	bl	8005fa8 <USBH_LL_Disconnect>
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
 80067c4:	4613      	mov	r3, r2
 80067c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr

080067d2 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff fbb1 	bl	8005f48 <USBH_LL_PortEnabled>
}
 80067e6:	bf00      	nop
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff fbb0 	bl	8005f62 <USBH_LL_PortDisabled>
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800681a:	2b01      	cmp	r3, #1
 800681c:	d12a      	bne.n	8006874 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800681e:	4a18      	ldr	r2, [pc, #96]	; (8006880 <USBH_LL_Init+0x74>)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a15      	ldr	r2, [pc, #84]	; (8006880 <USBH_LL_Init+0x74>)
 800682a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800682e:	4b14      	ldr	r3, [pc, #80]	; (8006880 <USBH_LL_Init+0x74>)
 8006830:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006834:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006836:	4b12      	ldr	r3, [pc, #72]	; (8006880 <USBH_LL_Init+0x74>)
 8006838:	2208      	movs	r2, #8
 800683a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800683c:	4b10      	ldr	r3, [pc, #64]	; (8006880 <USBH_LL_Init+0x74>)
 800683e:	2201      	movs	r2, #1
 8006840:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006842:	4b0f      	ldr	r3, [pc, #60]	; (8006880 <USBH_LL_Init+0x74>)
 8006844:	2200      	movs	r2, #0
 8006846:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006848:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <USBH_LL_Init+0x74>)
 800684a:	2202      	movs	r2, #2
 800684c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800684e:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <USBH_LL_Init+0x74>)
 8006850:	2200      	movs	r2, #0
 8006852:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006854:	480a      	ldr	r0, [pc, #40]	; (8006880 <USBH_LL_Init+0x74>)
 8006856:	f7fa febc 	bl	80015d2 <HAL_HCD_Init>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006860:	f7fa f978 	bl	8000b54 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006864:	4806      	ldr	r0, [pc, #24]	; (8006880 <USBH_LL_Init+0x74>)
 8006866:	f7fb fa90 	bl	8001d8a <HAL_HCD_GetCurrentFrame>
 800686a:	4603      	mov	r3, r0
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff fb32 	bl	8005ed8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20000584 	.word	0x20000584

08006884 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800689a:	4618      	mov	r0, r3
 800689c:	f7fb fa0f 	bl	8001cbe <HAL_HCD_Start>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 f90e 	bl	8006ac8 <USBH_Get_USB_Status>
 80068ac:	4603      	mov	r3, r0
 80068ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fb fa17 	bl	8001d04 <HAL_HCD_Stop>
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 f8f3 	bl	8006ac8 <USBH_Get_USB_Status>
 80068e2:	4603      	mov	r3, r0
 80068e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006902:	78fa      	ldrb	r2, [r7, #3]
 8006904:	4611      	mov	r1, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f7fb fa2c 	bl	8001d64 <HAL_HCD_HC_GetXferCount>
 800690c:	4603      	mov	r3, r0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006916:	b590      	push	{r4, r7, lr}
 8006918:	b089      	sub	sp, #36	; 0x24
 800691a:	af04      	add	r7, sp, #16
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	4608      	mov	r0, r1
 8006920:	4611      	mov	r1, r2
 8006922:	461a      	mov	r2, r3
 8006924:	4603      	mov	r3, r0
 8006926:	70fb      	strb	r3, [r7, #3]
 8006928:	460b      	mov	r3, r1
 800692a:	70bb      	strb	r3, [r7, #2]
 800692c:	4613      	mov	r3, r2
 800692e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006930:	2300      	movs	r3, #0
 8006932:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800693e:	787c      	ldrb	r4, [r7, #1]
 8006940:	78ba      	ldrb	r2, [r7, #2]
 8006942:	78f9      	ldrb	r1, [r7, #3]
 8006944:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006946:	9302      	str	r3, [sp, #8]
 8006948:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	4623      	mov	r3, r4
 8006956:	f7fa fe9e 	bl	8001696 <HAL_HCD_HC_Init>
 800695a:	4603      	mov	r3, r0
 800695c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 f8b1 	bl	8006ac8 <USBH_Get_USB_Status>
 8006966:	4603      	mov	r3, r0
 8006968:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800696a:	7bbb      	ldrb	r3, [r7, #14]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	bd90      	pop	{r4, r7, pc}

08006974 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800698e:	78fa      	ldrb	r2, [r7, #3]
 8006990:	4611      	mov	r1, r2
 8006992:	4618      	mov	r0, r3
 8006994:	f7fa ff0e 	bl	80017b4 <HAL_HCD_HC_Halt>
 8006998:	4603      	mov	r3, r0
 800699a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 f892 	bl	8006ac8 <USBH_Get_USB_Status>
 80069a4:	4603      	mov	r3, r0
 80069a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80069b2:	b590      	push	{r4, r7, lr}
 80069b4:	b089      	sub	sp, #36	; 0x24
 80069b6:	af04      	add	r7, sp, #16
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	4608      	mov	r0, r1
 80069bc:	4611      	mov	r1, r2
 80069be:	461a      	mov	r2, r3
 80069c0:	4603      	mov	r3, r0
 80069c2:	70fb      	strb	r3, [r7, #3]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70bb      	strb	r3, [r7, #2]
 80069c8:	4613      	mov	r3, r2
 80069ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80069da:	787c      	ldrb	r4, [r7, #1]
 80069dc:	78ba      	ldrb	r2, [r7, #2]
 80069de:	78f9      	ldrb	r1, [r7, #3]
 80069e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80069e4:	9303      	str	r3, [sp, #12]
 80069e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80069e8:	9302      	str	r3, [sp, #8]
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	9301      	str	r3, [sp, #4]
 80069ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	4623      	mov	r3, r4
 80069f6:	f7fa ff01 	bl	80017fc <HAL_HCD_HC_SubmitRequest>
 80069fa:	4603      	mov	r3, r0
 80069fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 f861 	bl	8006ac8 <USBH_Get_USB_Status>
 8006a06:	4603      	mov	r3, r0
 8006a08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd90      	pop	{r4, r7, pc}

08006a14 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a26:	78fa      	ldrb	r2, [r7, #3]
 8006a28:	4611      	mov	r1, r2
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fb f987 	bl	8001d3e <HAL_HCD_HC_GetURBState>
 8006a30:	4603      	mov	r3, r0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b082      	sub	sp, #8
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	460b      	mov	r3, r1
 8006a44:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d103      	bne.n	8006a58 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 f864 	bl	8006b20 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006a58:	20c8      	movs	r0, #200	; 0xc8
 8006a5a:	f7fa fabf 	bl	8000fdc <HAL_Delay>
  return USBH_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
 8006a74:	4613      	mov	r3, r2
 8006a76:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a7e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	212c      	movs	r1, #44	; 0x2c
 8006a86:	fb01 f303 	mul.w	r3, r1, r3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	333b      	adds	r3, #59	; 0x3b
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	212c      	movs	r1, #44	; 0x2c
 8006a9a:	fb01 f303 	mul.w	r3, r1, r3
 8006a9e:	4413      	add	r3, r2
 8006aa0:	3354      	adds	r3, #84	; 0x54
 8006aa2:	78ba      	ldrb	r2, [r7, #2]
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	e008      	b.n	8006aba <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	212c      	movs	r1, #44	; 0x2c
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	4413      	add	r3, r2
 8006ab4:	3355      	adds	r3, #85	; 0x55
 8006ab6:	78ba      	ldrb	r2, [r7, #2]
 8006ab8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr
	...

08006ac8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	2b03      	cmp	r3, #3
 8006ada:	d817      	bhi.n	8006b0c <USBH_Get_USB_Status+0x44>
 8006adc:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <USBH_Get_USB_Status+0x1c>)
 8006ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae2:	bf00      	nop
 8006ae4:	08006af5 	.word	0x08006af5
 8006ae8:	08006afb 	.word	0x08006afb
 8006aec:	08006b01 	.word	0x08006b01
 8006af0:	08006b07 	.word	0x08006b07
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	73fb      	strb	r3, [r7, #15]
    break;
 8006af8:	e00b      	b.n	8006b12 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006afa:	2302      	movs	r3, #2
 8006afc:	73fb      	strb	r3, [r7, #15]
    break;
 8006afe:	e008      	b.n	8006b12 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006b00:	2301      	movs	r3, #1
 8006b02:	73fb      	strb	r3, [r7, #15]
    break;
 8006b04:	e005      	b.n	8006b12 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006b06:	2302      	movs	r3, #2
 8006b08:	73fb      	strb	r3, [r7, #15]
    break;
 8006b0a:	e002      	b.n	8006b12 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8006b10:	bf00      	nop
  }
  return usb_status;
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop

08006b20 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d102      	bne.n	8006b3a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]
 8006b38:	e001      	b.n	8006b3e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	461a      	mov	r2, r3
 8006b42:	2101      	movs	r1, #1
 8006b44:	4803      	ldr	r0, [pc, #12]	; (8006b54 <MX_DriverVbusFS+0x34>)
 8006b46:	f7fa fd2c 	bl	80015a2 <HAL_GPIO_WritePin>
}
 8006b4a:	bf00      	nop
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40020800 	.word	0x40020800

08006b58 <__errno>:
 8006b58:	4b01      	ldr	r3, [pc, #4]	; (8006b60 <__errno+0x8>)
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	2000002c 	.word	0x2000002c

08006b64 <__libc_init_array>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	4d0d      	ldr	r5, [pc, #52]	; (8006b9c <__libc_init_array+0x38>)
 8006b68:	4c0d      	ldr	r4, [pc, #52]	; (8006ba0 <__libc_init_array+0x3c>)
 8006b6a:	1b64      	subs	r4, r4, r5
 8006b6c:	10a4      	asrs	r4, r4, #2
 8006b6e:	2600      	movs	r6, #0
 8006b70:	42a6      	cmp	r6, r4
 8006b72:	d109      	bne.n	8006b88 <__libc_init_array+0x24>
 8006b74:	4d0b      	ldr	r5, [pc, #44]	; (8006ba4 <__libc_init_array+0x40>)
 8006b76:	4c0c      	ldr	r4, [pc, #48]	; (8006ba8 <__libc_init_array+0x44>)
 8006b78:	f000 f92c 	bl	8006dd4 <_init>
 8006b7c:	1b64      	subs	r4, r4, r5
 8006b7e:	10a4      	asrs	r4, r4, #2
 8006b80:	2600      	movs	r6, #0
 8006b82:	42a6      	cmp	r6, r4
 8006b84:	d105      	bne.n	8006b92 <__libc_init_array+0x2e>
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8c:	4798      	blx	r3
 8006b8e:	3601      	adds	r6, #1
 8006b90:	e7ee      	b.n	8006b70 <__libc_init_array+0xc>
 8006b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b96:	4798      	blx	r3
 8006b98:	3601      	adds	r6, #1
 8006b9a:	e7f2      	b.n	8006b82 <__libc_init_array+0x1e>
 8006b9c:	08006e10 	.word	0x08006e10
 8006ba0:	08006e10 	.word	0x08006e10
 8006ba4:	08006e10 	.word	0x08006e10
 8006ba8:	08006e14 	.word	0x08006e14

08006bac <malloc>:
 8006bac:	4b02      	ldr	r3, [pc, #8]	; (8006bb8 <malloc+0xc>)
 8006bae:	4601      	mov	r1, r0
 8006bb0:	6818      	ldr	r0, [r3, #0]
 8006bb2:	f000 b87d 	b.w	8006cb0 <_malloc_r>
 8006bb6:	bf00      	nop
 8006bb8:	2000002c 	.word	0x2000002c

08006bbc <free>:
 8006bbc:	4b02      	ldr	r3, [pc, #8]	; (8006bc8 <free+0xc>)
 8006bbe:	4601      	mov	r1, r0
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	f000 b80b 	b.w	8006bdc <_free_r>
 8006bc6:	bf00      	nop
 8006bc8:	2000002c 	.word	0x2000002c

08006bcc <memset>:
 8006bcc:	4402      	add	r2, r0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d100      	bne.n	8006bd6 <memset+0xa>
 8006bd4:	4770      	bx	lr
 8006bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bda:	e7f9      	b.n	8006bd0 <memset+0x4>

08006bdc <_free_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4605      	mov	r5, r0
 8006be0:	2900      	cmp	r1, #0
 8006be2:	d041      	beq.n	8006c68 <_free_r+0x8c>
 8006be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be8:	1f0c      	subs	r4, r1, #4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	bfb8      	it	lt
 8006bee:	18e4      	addlt	r4, r4, r3
 8006bf0:	f000 f8e2 	bl	8006db8 <__malloc_lock>
 8006bf4:	4a1d      	ldr	r2, [pc, #116]	; (8006c6c <_free_r+0x90>)
 8006bf6:	6813      	ldr	r3, [r2, #0]
 8006bf8:	b933      	cbnz	r3, 8006c08 <_free_r+0x2c>
 8006bfa:	6063      	str	r3, [r4, #4]
 8006bfc:	6014      	str	r4, [r2, #0]
 8006bfe:	4628      	mov	r0, r5
 8006c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c04:	f000 b8de 	b.w	8006dc4 <__malloc_unlock>
 8006c08:	42a3      	cmp	r3, r4
 8006c0a:	d908      	bls.n	8006c1e <_free_r+0x42>
 8006c0c:	6820      	ldr	r0, [r4, #0]
 8006c0e:	1821      	adds	r1, r4, r0
 8006c10:	428b      	cmp	r3, r1
 8006c12:	bf01      	itttt	eq
 8006c14:	6819      	ldreq	r1, [r3, #0]
 8006c16:	685b      	ldreq	r3, [r3, #4]
 8006c18:	1809      	addeq	r1, r1, r0
 8006c1a:	6021      	streq	r1, [r4, #0]
 8006c1c:	e7ed      	b.n	8006bfa <_free_r+0x1e>
 8006c1e:	461a      	mov	r2, r3
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	b10b      	cbz	r3, 8006c28 <_free_r+0x4c>
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	d9fa      	bls.n	8006c1e <_free_r+0x42>
 8006c28:	6811      	ldr	r1, [r2, #0]
 8006c2a:	1850      	adds	r0, r2, r1
 8006c2c:	42a0      	cmp	r0, r4
 8006c2e:	d10b      	bne.n	8006c48 <_free_r+0x6c>
 8006c30:	6820      	ldr	r0, [r4, #0]
 8006c32:	4401      	add	r1, r0
 8006c34:	1850      	adds	r0, r2, r1
 8006c36:	4283      	cmp	r3, r0
 8006c38:	6011      	str	r1, [r2, #0]
 8006c3a:	d1e0      	bne.n	8006bfe <_free_r+0x22>
 8006c3c:	6818      	ldr	r0, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	6053      	str	r3, [r2, #4]
 8006c42:	4401      	add	r1, r0
 8006c44:	6011      	str	r1, [r2, #0]
 8006c46:	e7da      	b.n	8006bfe <_free_r+0x22>
 8006c48:	d902      	bls.n	8006c50 <_free_r+0x74>
 8006c4a:	230c      	movs	r3, #12
 8006c4c:	602b      	str	r3, [r5, #0]
 8006c4e:	e7d6      	b.n	8006bfe <_free_r+0x22>
 8006c50:	6820      	ldr	r0, [r4, #0]
 8006c52:	1821      	adds	r1, r4, r0
 8006c54:	428b      	cmp	r3, r1
 8006c56:	bf04      	itt	eq
 8006c58:	6819      	ldreq	r1, [r3, #0]
 8006c5a:	685b      	ldreq	r3, [r3, #4]
 8006c5c:	6063      	str	r3, [r4, #4]
 8006c5e:	bf04      	itt	eq
 8006c60:	1809      	addeq	r1, r1, r0
 8006c62:	6021      	streq	r1, [r4, #0]
 8006c64:	6054      	str	r4, [r2, #4]
 8006c66:	e7ca      	b.n	8006bfe <_free_r+0x22>
 8006c68:	bd38      	pop	{r3, r4, r5, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000888 	.word	0x20000888

08006c70 <sbrk_aligned>:
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	4e0e      	ldr	r6, [pc, #56]	; (8006cac <sbrk_aligned+0x3c>)
 8006c74:	460c      	mov	r4, r1
 8006c76:	6831      	ldr	r1, [r6, #0]
 8006c78:	4605      	mov	r5, r0
 8006c7a:	b911      	cbnz	r1, 8006c82 <sbrk_aligned+0x12>
 8006c7c:	f000 f88c 	bl	8006d98 <_sbrk_r>
 8006c80:	6030      	str	r0, [r6, #0]
 8006c82:	4621      	mov	r1, r4
 8006c84:	4628      	mov	r0, r5
 8006c86:	f000 f887 	bl	8006d98 <_sbrk_r>
 8006c8a:	1c43      	adds	r3, r0, #1
 8006c8c:	d00a      	beq.n	8006ca4 <sbrk_aligned+0x34>
 8006c8e:	1cc4      	adds	r4, r0, #3
 8006c90:	f024 0403 	bic.w	r4, r4, #3
 8006c94:	42a0      	cmp	r0, r4
 8006c96:	d007      	beq.n	8006ca8 <sbrk_aligned+0x38>
 8006c98:	1a21      	subs	r1, r4, r0
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	f000 f87c 	bl	8006d98 <_sbrk_r>
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	d101      	bne.n	8006ca8 <sbrk_aligned+0x38>
 8006ca4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ca8:	4620      	mov	r0, r4
 8006caa:	bd70      	pop	{r4, r5, r6, pc}
 8006cac:	2000088c 	.word	0x2000088c

08006cb0 <_malloc_r>:
 8006cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb4:	1ccd      	adds	r5, r1, #3
 8006cb6:	f025 0503 	bic.w	r5, r5, #3
 8006cba:	3508      	adds	r5, #8
 8006cbc:	2d0c      	cmp	r5, #12
 8006cbe:	bf38      	it	cc
 8006cc0:	250c      	movcc	r5, #12
 8006cc2:	2d00      	cmp	r5, #0
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	db01      	blt.n	8006ccc <_malloc_r+0x1c>
 8006cc8:	42a9      	cmp	r1, r5
 8006cca:	d905      	bls.n	8006cd8 <_malloc_r+0x28>
 8006ccc:	230c      	movs	r3, #12
 8006cce:	603b      	str	r3, [r7, #0]
 8006cd0:	2600      	movs	r6, #0
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd8:	4e2e      	ldr	r6, [pc, #184]	; (8006d94 <_malloc_r+0xe4>)
 8006cda:	f000 f86d 	bl	8006db8 <__malloc_lock>
 8006cde:	6833      	ldr	r3, [r6, #0]
 8006ce0:	461c      	mov	r4, r3
 8006ce2:	bb34      	cbnz	r4, 8006d32 <_malloc_r+0x82>
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	f7ff ffc2 	bl	8006c70 <sbrk_aligned>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	4604      	mov	r4, r0
 8006cf0:	d14d      	bne.n	8006d8e <_malloc_r+0xde>
 8006cf2:	6834      	ldr	r4, [r6, #0]
 8006cf4:	4626      	mov	r6, r4
 8006cf6:	2e00      	cmp	r6, #0
 8006cf8:	d140      	bne.n	8006d7c <_malloc_r+0xcc>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4638      	mov	r0, r7
 8006d00:	eb04 0803 	add.w	r8, r4, r3
 8006d04:	f000 f848 	bl	8006d98 <_sbrk_r>
 8006d08:	4580      	cmp	r8, r0
 8006d0a:	d13a      	bne.n	8006d82 <_malloc_r+0xd2>
 8006d0c:	6821      	ldr	r1, [r4, #0]
 8006d0e:	3503      	adds	r5, #3
 8006d10:	1a6d      	subs	r5, r5, r1
 8006d12:	f025 0503 	bic.w	r5, r5, #3
 8006d16:	3508      	adds	r5, #8
 8006d18:	2d0c      	cmp	r5, #12
 8006d1a:	bf38      	it	cc
 8006d1c:	250c      	movcc	r5, #12
 8006d1e:	4629      	mov	r1, r5
 8006d20:	4638      	mov	r0, r7
 8006d22:	f7ff ffa5 	bl	8006c70 <sbrk_aligned>
 8006d26:	3001      	adds	r0, #1
 8006d28:	d02b      	beq.n	8006d82 <_malloc_r+0xd2>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	442b      	add	r3, r5
 8006d2e:	6023      	str	r3, [r4, #0]
 8006d30:	e00e      	b.n	8006d50 <_malloc_r+0xa0>
 8006d32:	6822      	ldr	r2, [r4, #0]
 8006d34:	1b52      	subs	r2, r2, r5
 8006d36:	d41e      	bmi.n	8006d76 <_malloc_r+0xc6>
 8006d38:	2a0b      	cmp	r2, #11
 8006d3a:	d916      	bls.n	8006d6a <_malloc_r+0xba>
 8006d3c:	1961      	adds	r1, r4, r5
 8006d3e:	42a3      	cmp	r3, r4
 8006d40:	6025      	str	r5, [r4, #0]
 8006d42:	bf18      	it	ne
 8006d44:	6059      	strne	r1, [r3, #4]
 8006d46:	6863      	ldr	r3, [r4, #4]
 8006d48:	bf08      	it	eq
 8006d4a:	6031      	streq	r1, [r6, #0]
 8006d4c:	5162      	str	r2, [r4, r5]
 8006d4e:	604b      	str	r3, [r1, #4]
 8006d50:	4638      	mov	r0, r7
 8006d52:	f104 060b 	add.w	r6, r4, #11
 8006d56:	f000 f835 	bl	8006dc4 <__malloc_unlock>
 8006d5a:	f026 0607 	bic.w	r6, r6, #7
 8006d5e:	1d23      	adds	r3, r4, #4
 8006d60:	1af2      	subs	r2, r6, r3
 8006d62:	d0b6      	beq.n	8006cd2 <_malloc_r+0x22>
 8006d64:	1b9b      	subs	r3, r3, r6
 8006d66:	50a3      	str	r3, [r4, r2]
 8006d68:	e7b3      	b.n	8006cd2 <_malloc_r+0x22>
 8006d6a:	6862      	ldr	r2, [r4, #4]
 8006d6c:	42a3      	cmp	r3, r4
 8006d6e:	bf0c      	ite	eq
 8006d70:	6032      	streq	r2, [r6, #0]
 8006d72:	605a      	strne	r2, [r3, #4]
 8006d74:	e7ec      	b.n	8006d50 <_malloc_r+0xa0>
 8006d76:	4623      	mov	r3, r4
 8006d78:	6864      	ldr	r4, [r4, #4]
 8006d7a:	e7b2      	b.n	8006ce2 <_malloc_r+0x32>
 8006d7c:	4634      	mov	r4, r6
 8006d7e:	6876      	ldr	r6, [r6, #4]
 8006d80:	e7b9      	b.n	8006cf6 <_malloc_r+0x46>
 8006d82:	230c      	movs	r3, #12
 8006d84:	603b      	str	r3, [r7, #0]
 8006d86:	4638      	mov	r0, r7
 8006d88:	f000 f81c 	bl	8006dc4 <__malloc_unlock>
 8006d8c:	e7a1      	b.n	8006cd2 <_malloc_r+0x22>
 8006d8e:	6025      	str	r5, [r4, #0]
 8006d90:	e7de      	b.n	8006d50 <_malloc_r+0xa0>
 8006d92:	bf00      	nop
 8006d94:	20000888 	.word	0x20000888

08006d98 <_sbrk_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4d06      	ldr	r5, [pc, #24]	; (8006db4 <_sbrk_r+0x1c>)
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4608      	mov	r0, r1
 8006da2:	602b      	str	r3, [r5, #0]
 8006da4:	f7fa f846 	bl	8000e34 <_sbrk>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d102      	bne.n	8006db2 <_sbrk_r+0x1a>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	b103      	cbz	r3, 8006db2 <_sbrk_r+0x1a>
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	20000890 	.word	0x20000890

08006db8 <__malloc_lock>:
 8006db8:	4801      	ldr	r0, [pc, #4]	; (8006dc0 <__malloc_lock+0x8>)
 8006dba:	f000 b809 	b.w	8006dd0 <__retarget_lock_acquire_recursive>
 8006dbe:	bf00      	nop
 8006dc0:	20000894 	.word	0x20000894

08006dc4 <__malloc_unlock>:
 8006dc4:	4801      	ldr	r0, [pc, #4]	; (8006dcc <__malloc_unlock+0x8>)
 8006dc6:	f000 b804 	b.w	8006dd2 <__retarget_lock_release_recursive>
 8006dca:	bf00      	nop
 8006dcc:	20000894 	.word	0x20000894

08006dd0 <__retarget_lock_acquire_recursive>:
 8006dd0:	4770      	bx	lr

08006dd2 <__retarget_lock_release_recursive>:
 8006dd2:	4770      	bx	lr

08006dd4 <_init>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	bf00      	nop
 8006dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dda:	bc08      	pop	{r3}
 8006ddc:	469e      	mov	lr, r3
 8006dde:	4770      	bx	lr

08006de0 <_fini>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	bf00      	nop
 8006de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de6:	bc08      	pop	{r3}
 8006de8:	469e      	mov	lr, r3
 8006dea:	4770      	bx	lr
